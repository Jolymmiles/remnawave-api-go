// Code generated by sub-client generator. DO NOT EDIT manually.
// This file extends the base Client with organized sub-client access patterns.

package api

import "context"

// ClientExt wraps the base Client and adds organized sub-client methods for all 139 API operations.
type ClientExt struct {
	*Client
	apiTokensController *ApiTokensControllerClient
	authController *AuthControllerClient
	bandwidthStatsController *BandwidthStatsControllerClient
	configProfilesController *ConfigProfilesControllerClient
	externalSquadsController *ExternalSquadsControllerClient
	hwidUserDevicesController *HwidUserDevicesControllerClient
	hostsBulkActionsController *HostsBulkActionsControllerClient
	hostsController *HostsControllerClient
	infraBillingController *InfraBillingControllerClient
	internalSquadsController *InternalSquadsControllerClient
	keygenController *KeygenControllerClient
	nodesController *NodesControllerClient
	passkeysController *PasskeysControllerClient
	remnawaveSettingsController *RemnawaveSettingsControllerClient
	snippetsController *SnippetsControllerClient
	subscriptionRequestHistoryController *SubscriptionRequestHistoryControllerClient
	subscriptionSettingsController *SubscriptionSettingsControllerClient
	subscriptionTemplateController *SubscriptionTemplateControllerClient
	systemController *SystemControllerClient
	usersBulkActionsController *UsersBulkActionsControllerClient
	usersController *UsersControllerClient
	usersStatsController *UsersStatsControllerClient
	protectedSubscriptionsController *ProtectedSubscriptionsControllerClient
	publicSubscriptionController *PublicSubscriptionControllerClient
}

// NewClientExt wraps an existing Client with sub-client access.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client: client,
		apiTokensController: NewApiTokensControllerClient(client),
		authController: NewAuthControllerClient(client),
		bandwidthStatsController: NewBandwidthStatsControllerClient(client),
		configProfilesController: NewConfigProfilesControllerClient(client),
		externalSquadsController: NewExternalSquadsControllerClient(client),
		hwidUserDevicesController: NewHwidUserDevicesControllerClient(client),
		hostsBulkActionsController: NewHostsBulkActionsControllerClient(client),
		hostsController: NewHostsControllerClient(client),
		infraBillingController: NewInfraBillingControllerClient(client),
		internalSquadsController: NewInternalSquadsControllerClient(client),
		keygenController: NewKeygenControllerClient(client),
		nodesController: NewNodesControllerClient(client),
		passkeysController: NewPasskeysControllerClient(client),
		remnawaveSettingsController: NewRemnawaveSettingsControllerClient(client),
		snippetsController: NewSnippetsControllerClient(client),
		subscriptionRequestHistoryController: NewSubscriptionRequestHistoryControllerClient(client),
		subscriptionSettingsController: NewSubscriptionSettingsControllerClient(client),
		subscriptionTemplateController: NewSubscriptionTemplateControllerClient(client),
		systemController: NewSystemControllerClient(client),
		usersBulkActionsController: NewUsersBulkActionsControllerClient(client),
		usersController: NewUsersControllerClient(client),
		usersStatsController: NewUsersStatsControllerClient(client),
		protectedSubscriptionsController: NewProtectedSubscriptionsControllerClient(client),
		publicSubscriptionController: NewPublicSubscriptionControllerClient(client),
	}
}

// Accessor methods
func (c *ClientExt) Apitokenscontroller() *ApiTokensControllerClient { return c.apiTokensController }
func (c *ClientExt) Authcontroller() *AuthControllerClient { return c.authController }
func (c *ClientExt) Bandwidthstatscontroller() *BandwidthStatsControllerClient { return c.bandwidthStatsController }
func (c *ClientExt) Configprofilescontroller() *ConfigProfilesControllerClient { return c.configProfilesController }
func (c *ClientExt) Externalsquadscontroller() *ExternalSquadsControllerClient { return c.externalSquadsController }
func (c *ClientExt) Hwiduserdevicescontroller() *HwidUserDevicesControllerClient { return c.hwidUserDevicesController }
func (c *ClientExt) Hostsbulkactionscontroller() *HostsBulkActionsControllerClient { return c.hostsBulkActionsController }
func (c *ClientExt) Hostscontroller() *HostsControllerClient { return c.hostsController }
func (c *ClientExt) Infrabillingcontroller() *InfraBillingControllerClient { return c.infraBillingController }
func (c *ClientExt) Internalsquadscontroller() *InternalSquadsControllerClient { return c.internalSquadsController }
func (c *ClientExt) Keygencontroller() *KeygenControllerClient { return c.keygenController }
func (c *ClientExt) Nodescontroller() *NodesControllerClient { return c.nodesController }
func (c *ClientExt) Passkeyscontroller() *PasskeysControllerClient { return c.passkeysController }
func (c *ClientExt) Remnawavesettingscontroller() *RemnawaveSettingsControllerClient { return c.remnawaveSettingsController }
func (c *ClientExt) Snippetscontroller() *SnippetsControllerClient { return c.snippetsController }
func (c *ClientExt) Subscriptionrequesthistorycontroller() *SubscriptionRequestHistoryControllerClient { return c.subscriptionRequestHistoryController }
func (c *ClientExt) Subscriptionsettingscontroller() *SubscriptionSettingsControllerClient { return c.subscriptionSettingsController }
func (c *ClientExt) Subscriptiontemplatecontroller() *SubscriptionTemplateControllerClient { return c.subscriptionTemplateController }
func (c *ClientExt) Systemcontroller() *SystemControllerClient { return c.systemController }
func (c *ClientExt) Usersbulkactionscontroller() *UsersBulkActionsControllerClient { return c.usersBulkActionsController }
func (c *ClientExt) Userscontroller() *UsersControllerClient { return c.usersController }
func (c *ClientExt) Usersstatscontroller() *UsersStatsControllerClient { return c.usersStatsController }
func (c *ClientExt) Protectedsubscriptionscontroller() *ProtectedSubscriptionsControllerClient { return c.protectedSubscriptionsController }
func (c *ClientExt) Publicsubscriptioncontroller() *PublicSubscriptionControllerClient { return c.publicSubscriptionController }


// ApiTokensControllerClient provides access to api tokens controller operations
type ApiTokensControllerClient struct { client *Client }
func NewApiTokensControllerClient(c *Client) *ApiTokensControllerClient { return &ApiTokensControllerClient{client: c} }

func (ac *ApiTokensControllerClient) Create(ctx context.Context, request *CreateApiTokenRequestDto) (CreateApiTokenResponseDto, error) {
	return ac.client.ApiTokensController_create(ctx, request)
}

func (ac *ApiTokensControllerClient) Delete(ctx context.Context, params ApiTokensController_deleteParams) (DeleteApiTokenResponseDto, error) {
	return ac.client.ApiTokensController_delete(ctx, params)
}

func (ac *ApiTokensControllerClient) Findall(ctx context.Context) (FindAllApiTokensResponseDto, error) {
	return ac.client.ApiTokensController_findAll(ctx)
}


// AuthControllerClient provides access to auth controller operations
type AuthControllerClient struct { client *Client }
func NewAuthControllerClient(c *Client) *AuthControllerClient { return &AuthControllerClient{client: c} }

func (ac *AuthControllerClient) Getstatus(ctx context.Context) error {
	return ac.client.AuthController_getStatus(ctx)
}

func (ac *AuthControllerClient) Login(ctx context.Context, request *LoginRequestDto) error {
	return ac.client.AuthController_login(ctx, request)
}

func (ac *AuthControllerClient) Oauth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequestDto) error {
	return ac.client.AuthController_oauth2Authorize(ctx, request)
}

func (ac *AuthControllerClient) Oauth2Callback(ctx context.Context, request *OAuth2CallbackRequestDto) error {
	return ac.client.AuthController_oauth2Callback(ctx, request)
}

func (ac *AuthControllerClient) Passkeyauthenticationoptions(ctx context.Context) error {
	return ac.client.AuthController_passkeyAuthenticationOptions(ctx)
}

func (ac *AuthControllerClient) Passkeyauthenticationverify(ctx context.Context, request *PasskeyOptionsResponse) error {
	return ac.client.AuthController_passkeyAuthenticationVerify(ctx, request)
}

func (ac *AuthControllerClient) Register(ctx context.Context, request *RegisterRequestDto) error {
	return ac.client.AuthController_register(ctx, request)
}

func (ac *AuthControllerClient) Telegramcallback(ctx context.Context, request *TelegramCallbackRequestDto) error {
	return ac.client.AuthController_telegramCallback(ctx, request)
}


// BandwidthStatsControllerClient provides access to bandwidth stats controller operations
type BandwidthStatsControllerClient struct { client *Client }
func NewBandwidthStatsControllerClient(c *Client) *BandwidthStatsControllerClient { return &BandwidthStatsControllerClient{client: c} }

func (bc *BandwidthStatsControllerClient) Getnodesusagebyrange(ctx context.Context, params NodesUsageHistoryController_getNodesUsageByRangeParams) (GetNodesUsageByRangeResponseDto, error) {
	return bc.client.NodesUsageHistoryController_getNodesUsageByRange(ctx, params)
}

func (bc *BandwidthStatsControllerClient) Getnodeuserusage(ctx context.Context, params NodesUserUsageHistoryController_getNodeUserUsageParams) (GetNodeUserUsageByRangeResponseDto, error) {
	return bc.client.NodesUserUsageHistoryController_getNodeUserUsage(ctx, params)
}

func (bc *BandwidthStatsControllerClient) Getnodesrealtimeusage(ctx context.Context) (GetNodesRealtimeUsageResponseDto, error) {
	return bc.client.NodesUserUsageHistoryController_getNodesRealtimeUsage(ctx)
}


// ConfigProfilesControllerClient provides access to config profiles controller operations
type ConfigProfilesControllerClient struct { client *Client }
func NewConfigProfilesControllerClient(c *Client) *ConfigProfilesControllerClient { return &ConfigProfilesControllerClient{client: c} }

func (cc *ConfigProfilesControllerClient) Createconfigprofile(ctx context.Context, request *CreateConfigProfileRequestDto) (ConfigProfileResponse, error) {
	return cc.client.ConfigProfileController_createConfigProfile(ctx, request)
}

func (cc *ConfigProfilesControllerClient) Deleteconfigprofilebyuuid(ctx context.Context, params ConfigProfileController_deleteConfigProfileByUuidParams) (DeleteResponseDto, error) {
	return cc.client.ConfigProfileController_deleteConfigProfileByUuid(ctx, params)
}

func (cc *ConfigProfilesControllerClient) Getallinbounds(ctx context.Context) (InboundsResponse, error) {
	return cc.client.ConfigProfileController_getAllInbounds(ctx)
}

func (cc *ConfigProfilesControllerClient) Getconfigprofilebyuuid(ctx context.Context, params ConfigProfileController_getConfigProfileByUuidParams) (ConfigProfileResponse, error) {
	return cc.client.ConfigProfileController_getConfigProfileByUuid(ctx, params)
}

func (cc *ConfigProfilesControllerClient) Getconfigprofiles(ctx context.Context) (GetConfigProfilesResponseDto, error) {
	return cc.client.ConfigProfileController_getConfigProfiles(ctx)
}

func (cc *ConfigProfilesControllerClient) Getinboundsbyprofileuuid(ctx context.Context, params ConfigProfileController_getInboundsByProfileUuidParams) (InboundsResponse, error) {
	return cc.client.ConfigProfileController_getInboundsByProfileUuid(ctx, params)
}

func (cc *ConfigProfilesControllerClient) Updateconfigprofile(ctx context.Context, request *UpdateConfigProfileRequestDto) (ConfigProfileResponse, error) {
	return cc.client.ConfigProfileController_updateConfigProfile(ctx, request)
}


// ExternalSquadsControllerClient provides access to external squads controller operations
type ExternalSquadsControllerClient struct { client *Client }
func NewExternalSquadsControllerClient(c *Client) *ExternalSquadsControllerClient { return &ExternalSquadsControllerClient{client: c} }

func (ec *ExternalSquadsControllerClient) Adduserstoexternalsquad(ctx context.Context, params ExternalSquadController_addUsersToExternalSquadParams) (EventResponseDto, error) {
	return ec.client.ExternalSquadController_addUsersToExternalSquad(ctx, params)
}

func (ec *ExternalSquadsControllerClient) Createexternalsquad(ctx context.Context, request *CreateExternalSquadRequestDto) (ExternalSquadResponse, error) {
	return ec.client.ExternalSquadController_createExternalSquad(ctx, request)
}

func (ec *ExternalSquadsControllerClient) Deleteexternalsquad(ctx context.Context, params ExternalSquadController_deleteExternalSquadParams) (DeleteResponseDto, error) {
	return ec.client.ExternalSquadController_deleteExternalSquad(ctx, params)
}

func (ec *ExternalSquadsControllerClient) Getexternalsquadbyuuid(ctx context.Context, params ExternalSquadController_getExternalSquadByUuidParams) (ExternalSquadResponse, error) {
	return ec.client.ExternalSquadController_getExternalSquadByUuid(ctx, params)
}

func (ec *ExternalSquadsControllerClient) Getexternalsquads(ctx context.Context) (GetExternalSquadsResponseDto, error) {
	return ec.client.ExternalSquadController_getExternalSquads(ctx)
}

func (ec *ExternalSquadsControllerClient) Removeusersfromexternalsquad(ctx context.Context, params ExternalSquadController_removeUsersFromExternalSquadParams) (EventResponseDto, error) {
	return ec.client.ExternalSquadController_removeUsersFromExternalSquad(ctx, params)
}

func (ec *ExternalSquadsControllerClient) Updateexternalsquad(ctx context.Context, request *UpdateExternalSquadRequestDto) (ExternalSquadResponse, error) {
	return ec.client.ExternalSquadController_updateExternalSquad(ctx, request)
}


// HwidUserDevicesControllerClient provides access to hwid user devices controller operations
type HwidUserDevicesControllerClient struct { client *Client }
func NewHwidUserDevicesControllerClient(c *Client) *HwidUserDevicesControllerClient { return &HwidUserDevicesControllerClient{client: c} }

func (hc *HwidUserDevicesControllerClient) Createuserhwiddevice(ctx context.Context, request *CreateUserHwidDeviceRequestDto) (HwidDevicesResponse, error) {
	return hc.client.HwidUserDevicesController_createUserHwidDevice(ctx, request)
}

func (hc *HwidUserDevicesControllerClient) Deletealluserhwiddevices(ctx context.Context, request *DeleteAllUserHwidDevicesRequestDto) (HwidDevicesResponse, error) {
	return hc.client.HwidUserDevicesController_deleteAllUserHwidDevices(ctx, request)
}

func (hc *HwidUserDevicesControllerClient) Deleteuserhwiddevice(ctx context.Context, request *DeleteUserHwidDeviceRequestDto) (HwidDevicesResponse, error) {
	return hc.client.HwidUserDevicesController_deleteUserHwidDevice(ctx, request)
}

func (hc *HwidUserDevicesControllerClient) Getallusers(ctx context.Context, params HwidUserDevicesController_getAllUsersParams) (GetAllHwidDevicesResponseDto, error) {
	return hc.client.HwidUserDevicesController_getAllUsers(ctx, params)
}

func (hc *HwidUserDevicesControllerClient) Gethwiddevicesstats(ctx context.Context) (GetHwidDevicesStatsResponseDto, error) {
	return hc.client.HwidUserDevicesController_getHwidDevicesStats(ctx)
}

func (hc *HwidUserDevicesControllerClient) Getuserhwiddevices(ctx context.Context, params HwidUserDevicesController_getUserHwidDevicesParams) (HwidDevicesResponse, error) {
	return hc.client.HwidUserDevicesController_getUserHwidDevices(ctx, params)
}


// HostsBulkActionsControllerClient provides access to hosts bulk actions controller operations
type HostsBulkActionsControllerClient struct { client *Client }
func NewHostsBulkActionsControllerClient(c *Client) *HostsBulkActionsControllerClient { return &HostsBulkActionsControllerClient{client: c} }

func (hc *HostsBulkActionsControllerClient) Deletehosts(ctx context.Context, request *BulkUuidsRequest) (HostListResponse, error) {
	return hc.client.HostsBulkActionsController_deleteHosts(ctx, request)
}

func (hc *HostsBulkActionsControllerClient) Disablehosts(ctx context.Context, request *BulkUuidsRequest) (HostListResponse, error) {
	return hc.client.HostsBulkActionsController_disableHosts(ctx, request)
}

func (hc *HostsBulkActionsControllerClient) Enablehosts(ctx context.Context, request *BulkUuidsRequest) (HostListResponse, error) {
	return hc.client.HostsBulkActionsController_enableHosts(ctx, request)
}

func (hc *HostsBulkActionsControllerClient) Setinboundtohosts(ctx context.Context, request *SetInboundToManyHostsRequestDto) (HostListResponse, error) {
	return hc.client.HostsBulkActionsController_setInboundToHosts(ctx, request)
}

func (hc *HostsBulkActionsControllerClient) Setporttohosts(ctx context.Context, request *SetPortToManyHostsRequestDto) (HostListResponse, error) {
	return hc.client.HostsBulkActionsController_setPortToHosts(ctx, request)
}


// HostsControllerClient provides access to hosts controller operations
type HostsControllerClient struct { client *Client }
func NewHostsControllerClient(c *Client) *HostsControllerClient { return &HostsControllerClient{client: c} }

func (hc *HostsControllerClient) Createhost(ctx context.Context, request *CreateHostRequestDto) (HostResponse, error) {
	return hc.client.HostsController_createHost(ctx, request)
}

func (hc *HostsControllerClient) Deletehost(ctx context.Context, params HostsController_deleteHostParams) (DeleteResponseDto, error) {
	return hc.client.HostsController_deleteHost(ctx, params)
}

func (hc *HostsControllerClient) Getallhosttags(ctx context.Context) (TagsResponse, error) {
	return hc.client.HostsController_getAllHostTags(ctx)
}

func (hc *HostsControllerClient) Getallhosts(ctx context.Context) (HostListResponse, error) {
	return hc.client.HostsController_getAllHosts(ctx)
}

func (hc *HostsControllerClient) Getonehost(ctx context.Context, params HostsController_getOneHostParams) (HostResponse, error) {
	return hc.client.HostsController_getOneHost(ctx, params)
}

func (hc *HostsControllerClient) Reorderhosts(ctx context.Context, request *ReorderHostRequestDto) (ReorderHostResponseDto, error) {
	return hc.client.HostsController_reorderHosts(ctx, request)
}

func (hc *HostsControllerClient) Updatehost(ctx context.Context, request *UpdateHostRequestDto) (HostResponse, error) {
	return hc.client.HostsController_updateHost(ctx, request)
}


// InfraBillingControllerClient provides access to infra billing controller operations
type InfraBillingControllerClient struct { client *Client }
func NewInfraBillingControllerClient(c *Client) *InfraBillingControllerClient { return &InfraBillingControllerClient{client: c} }

func (ic *InfraBillingControllerClient) Createinfrabillinghistoryrecord(ctx context.Context, request *CreateInfraBillingHistoryRecordRequestDto) (BillingHistoryResponse, error) {
	return ic.client.InfraBillingController_createInfraBillingHistoryRecord(ctx, request)
}

func (ic *InfraBillingControllerClient) Createinfrabillingnode(ctx context.Context, request *CreateInfraBillingNodeRequestDto) (BillingNodesResponse, error) {
	return ic.client.InfraBillingController_createInfraBillingNode(ctx, request)
}

func (ic *InfraBillingControllerClient) Createinfraprovider(ctx context.Context, request *CreateInfraProviderRequestDto) (InfraProviderResponse, error) {
	return ic.client.InfraBillingController_createInfraProvider(ctx, request)
}

func (ic *InfraBillingControllerClient) Deleteinfrabillinghistoryrecordbyuuid(ctx context.Context, params InfraBillingController_deleteInfraBillingHistoryRecordByUuidParams) (BillingHistoryResponse, error) {
	return ic.client.InfraBillingController_deleteInfraBillingHistoryRecordByUuid(ctx, params)
}

func (ic *InfraBillingControllerClient) Deleteinfrabillingnodebyuuid(ctx context.Context, params InfraBillingController_deleteInfraBillingNodeByUuidParams) (BillingNodesResponse, error) {
	return ic.client.InfraBillingController_deleteInfraBillingNodeByUuid(ctx, params)
}

func (ic *InfraBillingControllerClient) Deleteinfraproviderbyuuid(ctx context.Context, params InfraBillingController_deleteInfraProviderByUuidParams) (DeleteResponseDto, error) {
	return ic.client.InfraBillingController_deleteInfraProviderByUuid(ctx, params)
}

func (ic *InfraBillingControllerClient) Getbillingnodes(ctx context.Context) (BillingNodesResponse, error) {
	return ic.client.InfraBillingController_getBillingNodes(ctx)
}

func (ic *InfraBillingControllerClient) Getinfrabillinghistoryrecords(ctx context.Context) (BillingHistoryResponse, error) {
	return ic.client.InfraBillingController_getInfraBillingHistoryRecords(ctx)
}

func (ic *InfraBillingControllerClient) Getinfraproviderbyuuid(ctx context.Context, params InfraBillingController_getInfraProviderByUuidParams) (InfraProviderResponse, error) {
	return ic.client.InfraBillingController_getInfraProviderByUuid(ctx, params)
}

func (ic *InfraBillingControllerClient) Getinfraproviders(ctx context.Context) (GetInfraProvidersResponseDto, error) {
	return ic.client.InfraBillingController_getInfraProviders(ctx)
}

func (ic *InfraBillingControllerClient) Updateinfrabillingnode(ctx context.Context, request *UpdateInfraBillingNodeRequestDto) (BillingNodesResponse, error) {
	return ic.client.InfraBillingController_updateInfraBillingNode(ctx, request)
}

func (ic *InfraBillingControllerClient) Updateinfraprovider(ctx context.Context, request *UpdateInfraProviderRequestDto) (InfraProviderResponse, error) {
	return ic.client.InfraBillingController_updateInfraProvider(ctx, request)
}


// InternalSquadsControllerClient provides access to internal squads controller operations
type InternalSquadsControllerClient struct { client *Client }
func NewInternalSquadsControllerClient(c *Client) *InternalSquadsControllerClient { return &InternalSquadsControllerClient{client: c} }

func (ic *InternalSquadsControllerClient) Adduserstointernalsquad(ctx context.Context, params InternalSquadController_addUsersToInternalSquadParams) (EventResponseDto, error) {
	return ic.client.InternalSquadController_addUsersToInternalSquad(ctx, params)
}

func (ic *InternalSquadsControllerClient) Createinternalsquad(ctx context.Context, request *CreateInternalSquadRequestDto) (InternalSquadResponse, error) {
	return ic.client.InternalSquadController_createInternalSquad(ctx, request)
}

func (ic *InternalSquadsControllerClient) Deleteinternalsquad(ctx context.Context, params InternalSquadController_deleteInternalSquadParams) (DeleteResponseDto, error) {
	return ic.client.InternalSquadController_deleteInternalSquad(ctx, params)
}

func (ic *InternalSquadsControllerClient) Getinternalsquadaccessiblenodes(ctx context.Context, params InternalSquadController_getInternalSquadAccessibleNodesParams) (GetInternalSquadAccessibleNodesResponseDto, error) {
	return ic.client.InternalSquadController_getInternalSquadAccessibleNodes(ctx, params)
}

func (ic *InternalSquadsControllerClient) Getinternalsquadbyuuid(ctx context.Context, params InternalSquadController_getInternalSquadByUuidParams) (InternalSquadResponse, error) {
	return ic.client.InternalSquadController_getInternalSquadByUuid(ctx, params)
}

func (ic *InternalSquadsControllerClient) Getinternalsquads(ctx context.Context) (GetInternalSquadsResponseDto, error) {
	return ic.client.InternalSquadController_getInternalSquads(ctx)
}

func (ic *InternalSquadsControllerClient) Removeusersfrominternalsquad(ctx context.Context, params InternalSquadController_removeUsersFromInternalSquadParams) (EventResponseDto, error) {
	return ic.client.InternalSquadController_removeUsersFromInternalSquad(ctx, params)
}

func (ic *InternalSquadsControllerClient) Updateinternalsquad(ctx context.Context, request *UpdateInternalSquadRequestDto) (InternalSquadResponse, error) {
	return ic.client.InternalSquadController_updateInternalSquad(ctx, request)
}


// KeygenControllerClient provides access to keygen controller operations
type KeygenControllerClient struct { client *Client }
func NewKeygenControllerClient(c *Client) *KeygenControllerClient { return &KeygenControllerClient{client: c} }

func (kc *KeygenControllerClient) Generatekey(ctx context.Context) (GetPubKeyResponseDto, error) {
	return kc.client.KeygenController_generateKey(ctx)
}


// NodesControllerClient provides access to nodes controller operations
type NodesControllerClient struct { client *Client }
func NewNodesControllerClient(c *Client) *NodesControllerClient { return &NodesControllerClient{client: c} }

func (nc *NodesControllerClient) Createnode(ctx context.Context, request *CreateNodeRequestDto) (NodeResponse, error) {
	return nc.client.NodesController_createNode(ctx, request)
}

func (nc *NodesControllerClient) Deletenode(ctx context.Context, params NodesController_deleteNodeParams) (DeleteResponseDto, error) {
	return nc.client.NodesController_deleteNode(ctx, params)
}

func (nc *NodesControllerClient) Disablenode(ctx context.Context, params NodesController_disableNodeParams) (NodeResponse, error) {
	return nc.client.NodesController_disableNode(ctx, params)
}

func (nc *NodesControllerClient) Enablenode(ctx context.Context, params NodesController_enableNodeParams) (NodeResponse, error) {
	return nc.client.NodesController_enableNode(ctx, params)
}

func (nc *NodesControllerClient) Getallnodes(ctx context.Context) (NodesResponse, error) {
	return nc.client.NodesController_getAllNodes(ctx)
}

func (nc *NodesControllerClient) Getonenode(ctx context.Context, params NodesController_getOneNodeParams) (NodeResponse, error) {
	return nc.client.NodesController_getOneNode(ctx, params)
}

func (nc *NodesControllerClient) Reordernodes(ctx context.Context, request *ReorderNodeRequestDto) (NodesResponse, error) {
	return nc.client.NodesController_reorderNodes(ctx, request)
}

func (nc *NodesControllerClient) Restartallnodes(ctx context.Context, request *RestartAllNodesRequestBodyDto) (EventResponseDto, error) {
	return nc.client.NodesController_restartAllNodes(ctx, request)
}

func (nc *NodesControllerClient) Restartnode(ctx context.Context, params NodesController_restartNodeParams) (EventResponseDto, error) {
	return nc.client.NodesController_restartNode(ctx, params)
}

func (nc *NodesControllerClient) Updatenode(ctx context.Context, request *UpdateNodeRequestDto) (NodeResponse, error) {
	return nc.client.NodesController_updateNode(ctx, request)
}


// PasskeysControllerClient provides access to passkeys controller operations
type PasskeysControllerClient struct { client *Client }
func NewPasskeysControllerClient(c *Client) *PasskeysControllerClient { return &PasskeysControllerClient{client: c} }

func (pc *PasskeysControllerClient) Deletepasskey(ctx context.Context, request *DeletePasskeyRequestDto) error {
	return pc.client.PasskeyController_deletePasskey(ctx, request)
}

func (pc *PasskeysControllerClient) Getactivepasskeys(ctx context.Context) error {
	return pc.client.PasskeyController_getActivePasskeys(ctx)
}

func (pc *PasskeysControllerClient) Passkeyregistrationoptions(ctx context.Context) error {
	return pc.client.PasskeyController_passkeyRegistrationOptions(ctx)
}

func (pc *PasskeysControllerClient) Passkeyregistrationverify(ctx context.Context, request *PasskeyOptionsResponse) error {
	return pc.client.PasskeyController_passkeyRegistrationVerify(ctx, request)
}


// RemnawaveSettingsControllerClient provides access to remnawave settings controller operations
type RemnawaveSettingsControllerClient struct { client *Client }
func NewRemnawaveSettingsControllerClient(c *Client) *RemnawaveSettingsControllerClient { return &RemnawaveSettingsControllerClient{client: c} }

func (rc *RemnawaveSettingsControllerClient) Getsettings(ctx context.Context) (SettingsResponse, error) {
	return rc.client.RemnawaveSettingsController_getSettings(ctx)
}

func (rc *RemnawaveSettingsControllerClient) Updatesettings(ctx context.Context, request *UpdateRemnawaveSettingsRequestDto) (SettingsResponse, error) {
	return rc.client.RemnawaveSettingsController_updateSettings(ctx, request)
}


// SnippetsControllerClient provides access to snippets controller operations
type SnippetsControllerClient struct { client *Client }
func NewSnippetsControllerClient(c *Client) *SnippetsControllerClient { return &SnippetsControllerClient{client: c} }

func (sc *SnippetsControllerClient) Createsnippet(ctx context.Context, request *SnippetRequest) (SnippetsResponse, error) {
	return sc.client.SnippetsController_createSnippet(ctx, request)
}

func (sc *SnippetsControllerClient) Deletesnippetbyname(ctx context.Context, request *DeleteSnippetRequestDto) (SnippetsResponse, error) {
	return sc.client.SnippetsController_deleteSnippetByName(ctx, request)
}

func (sc *SnippetsControllerClient) Getsnippets(ctx context.Context) (SnippetsResponse, error) {
	return sc.client.SnippetsController_getSnippets(ctx)
}

func (sc *SnippetsControllerClient) Updatesnippet(ctx context.Context, request *SnippetRequest) (SnippetsResponse, error) {
	return sc.client.SnippetsController_updateSnippet(ctx, request)
}


// SubscriptionRequestHistoryControllerClient provides access to subscription request history controller operations
type SubscriptionRequestHistoryControllerClient struct { client *Client }
func NewSubscriptionRequestHistoryControllerClient(c *Client) *SubscriptionRequestHistoryControllerClient { return &SubscriptionRequestHistoryControllerClient{client: c} }

func (sc *SubscriptionRequestHistoryControllerClient) Getsubscriptionrequesthistory(ctx context.Context, params UserSubscriptionRequestHistoryController_getSubscriptionRequestHistoryParams) (GetSubscriptionRequestHistoryResponseDto, error) {
	return sc.client.UserSubscriptionRequestHistoryController_getSubscriptionRequestHistory(ctx, params)
}

func (sc *SubscriptionRequestHistoryControllerClient) Getsubscriptionrequesthistorystats(ctx context.Context) (GetSubscriptionRequestHistoryStatsResponseDto, error) {
	return sc.client.UserSubscriptionRequestHistoryController_getSubscriptionRequestHistoryStats(ctx)
}


// SubscriptionSettingsControllerClient provides access to subscription settings controller operations
type SubscriptionSettingsControllerClient struct { client *Client }
func NewSubscriptionSettingsControllerClient(c *Client) *SubscriptionSettingsControllerClient { return &SubscriptionSettingsControllerClient{client: c} }

func (sc *SubscriptionSettingsControllerClient) Getsettings(ctx context.Context) (SubscriptionSettingsResponse, error) {
	return sc.client.SubscriptionSettingsController_getSettings(ctx)
}

func (sc *SubscriptionSettingsControllerClient) Updatesettings(ctx context.Context, request *UpdateSubscriptionSettingsRequestDto) (SubscriptionSettingsResponse, error) {
	return sc.client.SubscriptionSettingsController_updateSettings(ctx, request)
}


// SubscriptionTemplateControllerClient provides access to subscription template controller operations
type SubscriptionTemplateControllerClient struct { client *Client }
func NewSubscriptionTemplateControllerClient(c *Client) *SubscriptionTemplateControllerClient { return &SubscriptionTemplateControllerClient{client: c} }

func (sc *SubscriptionTemplateControllerClient) Createtemplate(ctx context.Context, request *CreateSubscriptionTemplateRequestDto) (TemplateResponse, error) {
	return sc.client.SubscriptionTemplateController_createTemplate(ctx, request)
}

func (sc *SubscriptionTemplateControllerClient) Deletetemplate(ctx context.Context, params SubscriptionTemplateController_deleteTemplateParams) (DeleteResponseDto, error) {
	return sc.client.SubscriptionTemplateController_deleteTemplate(ctx, params)
}

func (sc *SubscriptionTemplateControllerClient) Getalltemplates(ctx context.Context) (GetTemplatesResponseDto, error) {
	return sc.client.SubscriptionTemplateController_getAllTemplates(ctx)
}

func (sc *SubscriptionTemplateControllerClient) Gettemplatebyuuid(ctx context.Context, params SubscriptionTemplateController_getTemplateByUuidParams) (TemplateResponse, error) {
	return sc.client.SubscriptionTemplateController_getTemplateByUuid(ctx, params)
}

func (sc *SubscriptionTemplateControllerClient) Updatetemplate(ctx context.Context, request *UpdateTemplateRequestDto) (TemplateResponse, error) {
	return sc.client.SubscriptionTemplateController_updateTemplate(ctx, request)
}


// SystemControllerClient provides access to system controller operations
type SystemControllerClient struct { client *Client }
func NewSystemControllerClient(c *Client) *SystemControllerClient { return &SystemControllerClient{client: c} }

func (sc *SystemControllerClient) Debugsrrmatcher(ctx context.Context, request *DebugSrrMatcherRequestDto) (DebugSrrMatcherResponseDto, error) {
	return sc.client.SystemController_debugSrrMatcher(ctx, request)
}

func (sc *SystemControllerClient) Encrypthappcryptolink(ctx context.Context, request *EncryptHappCryptoLinkRequestDto) (EncryptHappCryptoLinkResponseDto, error) {
	return sc.client.SystemController_encryptHappCryptoLink(ctx, request)
}

func (sc *SystemControllerClient) Getbandwidthstats(ctx context.Context) (GetBandwidthStatsResponseDto, error) {
	return sc.client.SystemController_getBandwidthStats(ctx)
}

func (sc *SystemControllerClient) Getnodesmetrics(ctx context.Context) (GetNodesMetricsResponseDto, error) {
	return sc.client.SystemController_getNodesMetrics(ctx)
}

func (sc *SystemControllerClient) Getnodesstatistics(ctx context.Context) (GetNodesStatisticsResponseDto, error) {
	return sc.client.SystemController_getNodesStatistics(ctx)
}

func (sc *SystemControllerClient) Getremnawavehealth(ctx context.Context) (GetRemnawaveHealthResponseDto, error) {
	return sc.client.SystemController_getRemnawaveHealth(ctx)
}

func (sc *SystemControllerClient) Getstats(ctx context.Context) (GetStatsResponseDto, error) {
	return sc.client.SystemController_getStats(ctx)
}

func (sc *SystemControllerClient) Getx25519Keypairs(ctx context.Context) (GenerateX25519ResponseDto, error) {
	return sc.client.SystemController_getX25519Keypairs(ctx)
}


// UsersBulkActionsControllerClient provides access to users bulk actions controller operations
type UsersBulkActionsControllerClient struct { client *Client }
func NewUsersBulkActionsControllerClient(c *Client) *UsersBulkActionsControllerClient { return &UsersBulkActionsControllerClient{client: c} }

func (uc *UsersBulkActionsControllerClient) Bulkallresetusertraffic(ctx context.Context) (EventResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkAllResetUserTraffic(ctx)
}

func (uc *UsersBulkActionsControllerClient) Bulkdeleteusers(ctx context.Context, request *BulkDeleteUsersRequestDto) (BulkActionResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkDeleteUsers(ctx, request)
}

func (uc *UsersBulkActionsControllerClient) Bulkdeleteusersbystatus(ctx context.Context, request *BulkDeleteUsersByStatusRequestDto) (BulkActionResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkDeleteUsersByStatus(ctx, request)
}

func (uc *UsersBulkActionsControllerClient) Bulkresetusertraffic(ctx context.Context, request *BulkUuidsRequest) (BulkActionResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkResetUserTraffic(ctx, request)
}

func (uc *UsersBulkActionsControllerClient) Bulkrevokeuserssubscription(ctx context.Context, request *BulkUuidsRequest) (BulkActionResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkRevokeUsersSubscription(ctx, request)
}

func (uc *UsersBulkActionsControllerClient) Bulkupdateallusers(ctx context.Context, request *BulkAllUpdateUsersRequestDto) (EventResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkUpdateAllUsers(ctx, request)
}

func (uc *UsersBulkActionsControllerClient) Bulkupdateusers(ctx context.Context, request *BulkUpdateUsersRequestDto) (BulkActionResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkUpdateUsers(ctx, request)
}

func (uc *UsersBulkActionsControllerClient) Bulkupdateusersinternalsquads(ctx context.Context, request *BulkUpdateUsersSquadsRequestDto) (BulkActionResponseDto, error) {
	return uc.client.UsersBulkActionsController_bulkUpdateUsersInternalSquads(ctx, request)
}


// UsersControllerClient provides access to users controller operations
type UsersControllerClient struct { client *Client }
func NewUsersControllerClient(c *Client) *UsersControllerClient { return &UsersControllerClient{client: c} }

func (uc *UsersControllerClient) Createuser(ctx context.Context, request *CreateUserRequestDto) (UserResponse, error) {
	return uc.client.UsersController_createUser(ctx, request)
}

func (uc *UsersControllerClient) Deleteuser(ctx context.Context, params UsersController_deleteUserParams) (DeleteResponseDto, error) {
	return uc.client.UsersController_deleteUser(ctx, params)
}

func (uc *UsersControllerClient) Disableuser(ctx context.Context, params UsersController_disableUserParams) (UserResponse, error) {
	return uc.client.UsersController_disableUser(ctx, params)
}

func (uc *UsersControllerClient) Enableuser(ctx context.Context, params UsersController_enableUserParams) (UserResponse, error) {
	return uc.client.UsersController_enableUser(ctx, params)
}

func (uc *UsersControllerClient) Getalltags(ctx context.Context) (TagsResponse, error) {
	return uc.client.UsersController_getAllTags(ctx)
}

func (uc *UsersControllerClient) Getallusers(ctx context.Context, params UsersController_getAllUsersParams) (GetAllUsersResponseDto, error) {
	return uc.client.UsersController_getAllUsers(ctx, params)
}

func (uc *UsersControllerClient) Getuseraccessiblenodes(ctx context.Context, params UsersController_getUserAccessibleNodesParams) (GetUserAccessibleNodesResponseDto, error) {
	return uc.client.UsersController_getUserAccessibleNodes(ctx, params)
}

func (uc *UsersControllerClient) Getuserbyshortuuid(ctx context.Context, params UsersController_getUserByShortUuidParams) (UserResponse, error) {
	return uc.client.UsersController_getUserByShortUuid(ctx, params)
}

func (uc *UsersControllerClient) Getuserbytelegramid(ctx context.Context, params UsersController_getUserByTelegramIdParams) (UsersResponse, error) {
	return uc.client.UsersController_getUserByTelegramId(ctx, params)
}

func (uc *UsersControllerClient) Getuserbyusername(ctx context.Context, params UsersController_getUserByUsernameParams) (UserResponse, error) {
	return uc.client.UsersController_getUserByUsername(ctx, params)
}

func (uc *UsersControllerClient) Getuserbyuuid(ctx context.Context, params UsersController_getUserByUuidParams) (UserResponse, error) {
	return uc.client.UsersController_getUserByUuid(ctx, params)
}

func (uc *UsersControllerClient) Getusersubscriptionrequesthistory(ctx context.Context, params UsersController_getUserSubscriptionRequestHistoryParams) (GetUserSubscriptionRequestHistoryResponseDto, error) {
	return uc.client.UsersController_getUserSubscriptionRequestHistory(ctx, params)
}

func (uc *UsersControllerClient) Getusersbyemail(ctx context.Context, params UsersController_getUsersByEmailParams) (UsersResponse, error) {
	return uc.client.UsersController_getUsersByEmail(ctx, params)
}

func (uc *UsersControllerClient) Getusersbytag(ctx context.Context, params UsersController_getUsersByTagParams) (UsersResponse, error) {
	return uc.client.UsersController_getUsersByTag(ctx, params)
}

func (uc *UsersControllerClient) Resetusertraffic(ctx context.Context, params UsersController_resetUserTrafficParams) (UserResponse, error) {
	return uc.client.UsersController_resetUserTraffic(ctx, params)
}

func (uc *UsersControllerClient) Revokeusersubscription(ctx context.Context, request *RevokeUserSubscriptionBodyDto, params UsersController_revokeUserSubscriptionParams) (UserResponse, error) {
	return uc.client.UsersController_revokeUserSubscription(ctx, params, request)
}

func (uc *UsersControllerClient) Updateuser(ctx context.Context, request *UpdateUserRequestDto) (UserResponse, error) {
	return uc.client.UsersController_updateUser(ctx, request)
}


// UsersStatsControllerClient provides access to users stats controller operations
type UsersStatsControllerClient struct { client *Client }
func NewUsersStatsControllerClient(c *Client) *UsersStatsControllerClient { return &UsersStatsControllerClient{client: c} }

func (uc *UsersStatsControllerClient) Getuserusagebyrange(ctx context.Context, params UsersStatsController_getUserUsageByRangeParams) (GetUserUsageByRangeResponseDto, error) {
	return uc.client.UsersStatsController_getUserUsageByRange(ctx, params)
}


// ProtectedSubscriptionsControllerClient provides access to [protected] subscriptions controller operations
type ProtectedSubscriptionsControllerClient struct { client *Client }
func NewProtectedSubscriptionsControllerClient(c *Client) *ProtectedSubscriptionsControllerClient { return &ProtectedSubscriptionsControllerClient{client: c} }

func (pc *ProtectedSubscriptionsControllerClient) Getallsubscriptions(ctx context.Context, params SubscriptionsController_getAllSubscriptionsParams) (GetAllSubscriptionsResponseDto, error) {
	return pc.client.SubscriptionsController_getAllSubscriptions(ctx, params)
}

func (pc *ProtectedSubscriptionsControllerClient) Getrawsubscriptionbyshortuuid(ctx context.Context, params SubscriptionsController_getRawSubscriptionByShortUuidParams) (GetRawSubscriptionByShortUuidResponseDto, error) {
	return pc.client.SubscriptionsController_getRawSubscriptionByShortUuid(ctx, params)
}

func (pc *ProtectedSubscriptionsControllerClient) Getsubscriptionbyshortuuidprotected(ctx context.Context, params SubscriptionsController_getSubscriptionByShortUuidProtectedParams) (SubscriptionResponse, error) {
	return pc.client.SubscriptionsController_getSubscriptionByShortUuidProtected(ctx, params)
}

func (pc *ProtectedSubscriptionsControllerClient) Getsubscriptionbyusername(ctx context.Context, params SubscriptionsController_getSubscriptionByUsernameParams) (SubscriptionResponse, error) {
	return pc.client.SubscriptionsController_getSubscriptionByUsername(ctx, params)
}

func (pc *ProtectedSubscriptionsControllerClient) Getsubscriptionbyuuid(ctx context.Context, params SubscriptionsController_getSubscriptionByUuidParams) (SubscriptionResponse, error) {
	return pc.client.SubscriptionsController_getSubscriptionByUuid(ctx, params)
}


// PublicSubscriptionControllerClient provides access to [public] subscription controller operations
type PublicSubscriptionControllerClient struct { client *Client }
func NewPublicSubscriptionControllerClient(c *Client) *PublicSubscriptionControllerClient { return &PublicSubscriptionControllerClient{client: c} }

func (pc *PublicSubscriptionControllerClient) Getsubscription(ctx context.Context, params SubscriptionController_getSubscriptionParams) error {
	return pc.client.SubscriptionController_getSubscription(ctx, params)
}

func (pc *PublicSubscriptionControllerClient) Getsubscriptionbyclienttype(ctx context.Context, params SubscriptionController_getSubscriptionByClientTypeParams) error {
	return pc.client.SubscriptionController_getSubscriptionByClientType(ctx, params)
}

func (pc *PublicSubscriptionControllerClient) Getsubscriptioninfobyshortuuid(ctx context.Context, params SubscriptionController_getSubscriptionInfoByShortUuidParams) (SubscriptionResponse, error) {
	return pc.client.SubscriptionController_getSubscriptionInfoByShortUuid(ctx, params)
}

func (pc *PublicSubscriptionControllerClient) Getsubscriptionwithtype(ctx context.Context, params SubscriptionController_getSubscriptionWithTypeParams) error {
	return pc.client.SubscriptionController_getSubscriptionWithType(ctx, params)
}
