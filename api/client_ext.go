// Code generated by sub-client generator. DO NOT EDIT manually.
// This file extends the base Client with organized sub-client access patterns.

package api

import "context"

// ClientExt wraps the base Client and adds organized sub-client methods for all 139 API operations.
type ClientExt struct {
	*Client
	apiTokens *ApiTokensClient
	auth *AuthClient
	bandwidthStats *BandwidthStatsClient
	configProfiles *ConfigProfilesClient
	externalSquads *ExternalSquadsClient
	hwidUserDevices *HwidUserDevicesClient
	hostsBulkActions *HostsBulkActionsClient
	hosts *HostsClient
	infraBilling *InfraBillingClient
	internalSquads *InternalSquadsClient
	keygen *KeygenClient
	nodes *NodesClient
	passkeys *PasskeysClient
	remnawaveSettings *RemnawaveSettingsClient
	snippets *SnippetsClient
	subscriptionRequestHistory *SubscriptionRequestHistoryClient
	subscriptionSettings *SubscriptionSettingsClient
	subscriptionTemplate *SubscriptionTemplateClient
	system *SystemClient
	usersBulkActions *UsersBulkActionsClient
	users *UsersClient
	usersStats *UsersStatsClient
	protectedSubscriptions *ProtectedSubscriptionsClient
	publicSubscription *PublicSubscriptionClient
}

// NewClientExt wraps an existing Client with sub-client access.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client: client,
		apiTokens: NewApiTokensClient(client),
		auth: NewAuthClient(client),
		bandwidthStats: NewBandwidthStatsClient(client),
		configProfiles: NewConfigProfilesClient(client),
		externalSquads: NewExternalSquadsClient(client),
		hwidUserDevices: NewHwidUserDevicesClient(client),
		hostsBulkActions: NewHostsBulkActionsClient(client),
		hosts: NewHostsClient(client),
		infraBilling: NewInfraBillingClient(client),
		internalSquads: NewInternalSquadsClient(client),
		keygen: NewKeygenClient(client),
		nodes: NewNodesClient(client),
		passkeys: NewPasskeysClient(client),
		remnawaveSettings: NewRemnawaveSettingsClient(client),
		snippets: NewSnippetsClient(client),
		subscriptionRequestHistory: NewSubscriptionRequestHistoryClient(client),
		subscriptionSettings: NewSubscriptionSettingsClient(client),
		subscriptionTemplate: NewSubscriptionTemplateClient(client),
		system: NewSystemClient(client),
		usersBulkActions: NewUsersBulkActionsClient(client),
		users: NewUsersClient(client),
		usersStats: NewUsersStatsClient(client),
		protectedSubscriptions: NewProtectedSubscriptionsClient(client),
		publicSubscription: NewPublicSubscriptionClient(client),
	}
}

// Accessor methods
func (c *ClientExt) ApiTokens() *ApiTokensClient { return c.apiTokens }
func (c *ClientExt) Auth() *AuthClient { return c.auth }
func (c *ClientExt) BandwidthStats() *BandwidthStatsClient { return c.bandwidthStats }
func (c *ClientExt) ConfigProfiles() *ConfigProfilesClient { return c.configProfiles }
func (c *ClientExt) ExternalSquads() *ExternalSquadsClient { return c.externalSquads }
func (c *ClientExt) HwidUserDevices() *HwidUserDevicesClient { return c.hwidUserDevices }
func (c *ClientExt) HostsBulkActions() *HostsBulkActionsClient { return c.hostsBulkActions }
func (c *ClientExt) Hosts() *HostsClient { return c.hosts }
func (c *ClientExt) InfraBilling() *InfraBillingClient { return c.infraBilling }
func (c *ClientExt) InternalSquads() *InternalSquadsClient { return c.internalSquads }
func (c *ClientExt) Keygen() *KeygenClient { return c.keygen }
func (c *ClientExt) Nodes() *NodesClient { return c.nodes }
func (c *ClientExt) Passkeys() *PasskeysClient { return c.passkeys }
func (c *ClientExt) RemnawaveSettings() *RemnawaveSettingsClient { return c.remnawaveSettings }
func (c *ClientExt) Snippets() *SnippetsClient { return c.snippets }
func (c *ClientExt) SubscriptionRequestHistory() *SubscriptionRequestHistoryClient { return c.subscriptionRequestHistory }
func (c *ClientExt) SubscriptionSettings() *SubscriptionSettingsClient { return c.subscriptionSettings }
func (c *ClientExt) SubscriptionTemplate() *SubscriptionTemplateClient { return c.subscriptionTemplate }
func (c *ClientExt) System() *SystemClient { return c.system }
func (c *ClientExt) UsersBulkActions() *UsersBulkActionsClient { return c.usersBulkActions }
func (c *ClientExt) Users() *UsersClient { return c.users }
func (c *ClientExt) UsersStats() *UsersStatsClient { return c.usersStats }
func (c *ClientExt) ProtectedSubscriptions() *ProtectedSubscriptionsClient { return c.protectedSubscriptions }
func (c *ClientExt) PublicSubscription() *PublicSubscriptionClient { return c.publicSubscription }


// ApiTokensClient provides access to api tokens controller operations
type ApiTokensClient struct { client *Client }
func NewApiTokensClient(c *Client) *ApiTokensClient { return &ApiTokensClient{client: c} }

func (ac *ApiTokensClient) Create(ctx context.Context, request *CreateApiTokenRequestDto) (ApiTokensControllerCreateRes, error) {
	return ac.client.ApiTokensControllerCreate(ctx, request)
}

func (ac *ApiTokensClient) Delete(ctx context.Context, params ApiTokensControllerDeleteParams) (ApiTokensControllerDeleteRes, error) {
	return ac.client.ApiTokensControllerDelete(ctx, params)
}

func (ac *ApiTokensClient) FindAll(ctx context.Context) (ApiTokensControllerFindAllRes, error) {
	return ac.client.ApiTokensControllerFindAll(ctx)
}


// AuthClient provides access to auth controller operations
type AuthClient struct { client *Client }
func NewAuthClient(c *Client) *AuthClient { return &AuthClient{client: c} }

func (ac *AuthClient) GetStatus(ctx context.Context) (AuthControllerGetStatusRes, error) {
	return ac.client.AuthControllerGetStatus(ctx)
}

func (ac *AuthClient) Login(ctx context.Context, request *LoginRequestDto) (AuthControllerLoginRes, error) {
	return ac.client.AuthControllerLogin(ctx, request)
}

func (ac *AuthClient) Oauth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequestDto) (AuthControllerOauth2AuthorizeRes, error) {
	return ac.client.AuthControllerOauth2Authorize(ctx, request)
}

func (ac *AuthClient) Oauth2Callback(ctx context.Context, request *OAuth2CallbackRequestDto) (AuthControllerOauth2CallbackRes, error) {
	return ac.client.AuthControllerOauth2Callback(ctx, request)
}

func (ac *AuthClient) PasskeyAuthenticationOptions(ctx context.Context) (AuthControllerPasskeyAuthenticationOptionsRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationOptions(ctx)
}

func (ac *AuthClient) PasskeyAuthenticationVerify(ctx context.Context, request *VerifyPasskeyAuthenticationRequestDto) (AuthControllerPasskeyAuthenticationVerifyRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationVerify(ctx, request)
}

func (ac *AuthClient) Register(ctx context.Context, request *RegisterRequestDto) (AuthControllerRegisterRes, error) {
	return ac.client.AuthControllerRegister(ctx, request)
}

func (ac *AuthClient) TelegramCallback(ctx context.Context, request *TelegramCallbackRequestDto) (AuthControllerTelegramCallbackRes, error) {
	return ac.client.AuthControllerTelegramCallback(ctx, request)
}


// BandwidthStatsClient provides access to bandwidth stats controller operations
type BandwidthStatsClient struct { client *Client }
func NewBandwidthStatsClient(c *Client) *BandwidthStatsClient { return &BandwidthStatsClient{client: c} }

func (bc *BandwidthStatsClient) GetNodesUsageByRange(ctx context.Context, params NodesUsageHistoryControllerGetNodesUsageByRangeParams) (NodesUsageHistoryControllerGetNodesUsageByRangeRes, error) {
	return bc.client.NodesUsageHistoryControllerGetNodesUsageByRange(ctx, params)
}

func (bc *BandwidthStatsClient) GetNodeUserUsage(ctx context.Context, params NodesUserUsageHistoryControllerGetNodeUserUsageParams) (NodesUserUsageHistoryControllerGetNodeUserUsageRes, error) {
	return bc.client.NodesUserUsageHistoryControllerGetNodeUserUsage(ctx, params)
}

func (bc *BandwidthStatsClient) GetNodesRealtimeUsage(ctx context.Context) (NodesUserUsageHistoryControllerGetNodesRealtimeUsageRes, error) {
	return bc.client.NodesUserUsageHistoryControllerGetNodesRealtimeUsage(ctx)
}


// ConfigProfilesClient provides access to config profiles controller operations
type ConfigProfilesClient struct { client *Client }
func NewConfigProfilesClient(c *Client) *ConfigProfilesClient { return &ConfigProfilesClient{client: c} }

func (cc *ConfigProfilesClient) CreateConfigProfile(ctx context.Context, request *CreateConfigProfileRequestDto) (ConfigProfileControllerCreateConfigProfileRes, error) {
	return cc.client.ConfigProfileControllerCreateConfigProfile(ctx, request)
}

func (cc *ConfigProfilesClient) DeleteConfigProfileByUuid(ctx context.Context, params ConfigProfileControllerDeleteConfigProfileByUuidParams) (ConfigProfileControllerDeleteConfigProfileByUuidRes, error) {
	return cc.client.ConfigProfileControllerDeleteConfigProfileByUuid(ctx, params)
}

func (cc *ConfigProfilesClient) GetAllInbounds(ctx context.Context) (ConfigProfileControllerGetAllInboundsRes, error) {
	return cc.client.ConfigProfileControllerGetAllInbounds(ctx)
}

func (cc *ConfigProfilesClient) GetConfigProfileByUuid(ctx context.Context, params ConfigProfileControllerGetConfigProfileByUuidParams) (ConfigProfileControllerGetConfigProfileByUuidRes, error) {
	return cc.client.ConfigProfileControllerGetConfigProfileByUuid(ctx, params)
}

func (cc *ConfigProfilesClient) GetConfigProfiles(ctx context.Context) (ConfigProfileControllerGetConfigProfilesRes, error) {
	return cc.client.ConfigProfileControllerGetConfigProfiles(ctx)
}

func (cc *ConfigProfilesClient) GetInboundsByProfileUuid(ctx context.Context, params ConfigProfileControllerGetInboundsByProfileUuidParams) (ConfigProfileControllerGetInboundsByProfileUuidRes, error) {
	return cc.client.ConfigProfileControllerGetInboundsByProfileUuid(ctx, params)
}

func (cc *ConfigProfilesClient) UpdateConfigProfile(ctx context.Context, request *UpdateConfigProfileRequestDto) (ConfigProfileControllerUpdateConfigProfileRes, error) {
	return cc.client.ConfigProfileControllerUpdateConfigProfile(ctx, request)
}


// ExternalSquadsClient provides access to external squads controller operations
type ExternalSquadsClient struct { client *Client }
func NewExternalSquadsClient(c *Client) *ExternalSquadsClient { return &ExternalSquadsClient{client: c} }

func (ec *ExternalSquadsClient) AddUsersToExternalSquad(ctx context.Context, params ExternalSquadControllerAddUsersToExternalSquadParams) (ExternalSquadControllerAddUsersToExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerAddUsersToExternalSquad(ctx, params)
}

func (ec *ExternalSquadsClient) CreateExternalSquad(ctx context.Context, request *CreateExternalSquadRequestDto) (ExternalSquadControllerCreateExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerCreateExternalSquad(ctx, request)
}

func (ec *ExternalSquadsClient) DeleteExternalSquad(ctx context.Context, params ExternalSquadControllerDeleteExternalSquadParams) (ExternalSquadControllerDeleteExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerDeleteExternalSquad(ctx, params)
}

func (ec *ExternalSquadsClient) GetExternalSquadByUuid(ctx context.Context, params ExternalSquadControllerGetExternalSquadByUuidParams) (ExternalSquadControllerGetExternalSquadByUuidRes, error) {
	return ec.client.ExternalSquadControllerGetExternalSquadByUuid(ctx, params)
}

func (ec *ExternalSquadsClient) GetExternalSquads(ctx context.Context) (ExternalSquadControllerGetExternalSquadsRes, error) {
	return ec.client.ExternalSquadControllerGetExternalSquads(ctx)
}

func (ec *ExternalSquadsClient) RemoveUsersFromExternalSquad(ctx context.Context, params ExternalSquadControllerRemoveUsersFromExternalSquadParams) (ExternalSquadControllerRemoveUsersFromExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerRemoveUsersFromExternalSquad(ctx, params)
}

func (ec *ExternalSquadsClient) UpdateExternalSquad(ctx context.Context, request *UpdateExternalSquadRequestDto) (ExternalSquadControllerUpdateExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerUpdateExternalSquad(ctx, request)
}


// HwidUserDevicesClient provides access to hwid user devices controller operations
type HwidUserDevicesClient struct { client *Client }
func NewHwidUserDevicesClient(c *Client) *HwidUserDevicesClient { return &HwidUserDevicesClient{client: c} }

func (hc *HwidUserDevicesClient) CreateUserHwidDevice(ctx context.Context, request *CreateUserHwidDeviceRequestDto) (HwidUserDevicesControllerCreateUserHwidDeviceRes, error) {
	return hc.client.HwidUserDevicesControllerCreateUserHwidDevice(ctx, request)
}

func (hc *HwidUserDevicesClient) DeleteAllUserHwidDevices(ctx context.Context, request *DeleteAllUserHwidDevicesRequestDto) (HwidUserDevicesControllerDeleteAllUserHwidDevicesRes, error) {
	return hc.client.HwidUserDevicesControllerDeleteAllUserHwidDevices(ctx, request)
}

func (hc *HwidUserDevicesClient) DeleteUserHwidDevice(ctx context.Context, request *DeleteUserHwidDeviceRequestDto) (HwidUserDevicesControllerDeleteUserHwidDeviceRes, error) {
	return hc.client.HwidUserDevicesControllerDeleteUserHwidDevice(ctx, request)
}

func (hc *HwidUserDevicesClient) GetAllUsers(ctx context.Context, params HwidUserDevicesControllerGetAllUsersParams) (HwidUserDevicesControllerGetAllUsersRes, error) {
	return hc.client.HwidUserDevicesControllerGetAllUsers(ctx, params)
}

func (hc *HwidUserDevicesClient) GetHwidDevicesStats(ctx context.Context) (HwidUserDevicesControllerGetHwidDevicesStatsRes, error) {
	return hc.client.HwidUserDevicesControllerGetHwidDevicesStats(ctx)
}

func (hc *HwidUserDevicesClient) GetUserHwidDevices(ctx context.Context, params HwidUserDevicesControllerGetUserHwidDevicesParams) (HwidUserDevicesControllerGetUserHwidDevicesRes, error) {
	return hc.client.HwidUserDevicesControllerGetUserHwidDevices(ctx, params)
}


// HostsBulkActionsClient provides access to hosts bulk actions controller operations
type HostsBulkActionsClient struct { client *Client }
func NewHostsBulkActionsClient(c *Client) *HostsBulkActionsClient { return &HostsBulkActionsClient{client: c} }

func (hc *HostsBulkActionsClient) DeleteHosts(ctx context.Context, request *BulkDeleteHostsRequestDto) (HostsBulkActionsControllerDeleteHostsRes, error) {
	return hc.client.HostsBulkActionsControllerDeleteHosts(ctx, request)
}

func (hc *HostsBulkActionsClient) DisableHosts(ctx context.Context, request *BulkDisableHostsRequestDto) (HostsBulkActionsControllerDisableHostsRes, error) {
	return hc.client.HostsBulkActionsControllerDisableHosts(ctx, request)
}

func (hc *HostsBulkActionsClient) EnableHosts(ctx context.Context, request *BulkEnableHostsRequestDto) (HostsBulkActionsControllerEnableHostsRes, error) {
	return hc.client.HostsBulkActionsControllerEnableHosts(ctx, request)
}

func (hc *HostsBulkActionsClient) SetInboundToHosts(ctx context.Context, request *SetInboundToManyHostsRequestDto) (HostsBulkActionsControllerSetInboundToHostsRes, error) {
	return hc.client.HostsBulkActionsControllerSetInboundToHosts(ctx, request)
}

func (hc *HostsBulkActionsClient) SetPortToHosts(ctx context.Context, request *SetPortToManyHostsRequestDto) (HostsBulkActionsControllerSetPortToHostsRes, error) {
	return hc.client.HostsBulkActionsControllerSetPortToHosts(ctx, request)
}


// HostsClient provides access to hosts controller operations
type HostsClient struct { client *Client }
func NewHostsClient(c *Client) *HostsClient { return &HostsClient{client: c} }

func (hc *HostsClient) CreateHost(ctx context.Context, request *CreateHostRequestDto) (HostsControllerCreateHostRes, error) {
	return hc.client.HostsControllerCreateHost(ctx, request)
}

func (hc *HostsClient) DeleteHost(ctx context.Context, params HostsControllerDeleteHostParams) (HostsControllerDeleteHostRes, error) {
	return hc.client.HostsControllerDeleteHost(ctx, params)
}

func (hc *HostsClient) GetAllHostTags(ctx context.Context) (HostsControllerGetAllHostTagsRes, error) {
	return hc.client.HostsControllerGetAllHostTags(ctx)
}

func (hc *HostsClient) GetAllHosts(ctx context.Context) (HostsControllerGetAllHostsRes, error) {
	return hc.client.HostsControllerGetAllHosts(ctx)
}

func (hc *HostsClient) GetOneHost(ctx context.Context, params HostsControllerGetOneHostParams) (HostsControllerGetOneHostRes, error) {
	return hc.client.HostsControllerGetOneHost(ctx, params)
}

func (hc *HostsClient) ReorderHosts(ctx context.Context, request *ReorderHostRequestDto) (HostsControllerReorderHostsRes, error) {
	return hc.client.HostsControllerReorderHosts(ctx, request)
}

func (hc *HostsClient) UpdateHost(ctx context.Context, request *UpdateHostRequestDto) (HostsControllerUpdateHostRes, error) {
	return hc.client.HostsControllerUpdateHost(ctx, request)
}


// InfraBillingClient provides access to infra billing controller operations
type InfraBillingClient struct { client *Client }
func NewInfraBillingClient(c *Client) *InfraBillingClient { return &InfraBillingClient{client: c} }

func (ic *InfraBillingClient) CreateInfraBillingHistoryRecord(ctx context.Context, request *CreateInfraBillingHistoryRecordRequestDto) (InfraBillingControllerCreateInfraBillingHistoryRecordRes, error) {
	return ic.client.InfraBillingControllerCreateInfraBillingHistoryRecord(ctx, request)
}

func (ic *InfraBillingClient) CreateInfraBillingNode(ctx context.Context, request *CreateInfraBillingNodeRequestDto) (InfraBillingControllerCreateInfraBillingNodeRes, error) {
	return ic.client.InfraBillingControllerCreateInfraBillingNode(ctx, request)
}

func (ic *InfraBillingClient) CreateInfraProvider(ctx context.Context, request *CreateInfraProviderRequestDto) (InfraBillingControllerCreateInfraProviderRes, error) {
	return ic.client.InfraBillingControllerCreateInfraProvider(ctx, request)
}

func (ic *InfraBillingClient) DeleteInfraBillingHistoryRecordByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidParams) (InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidRes, error) {
	return ic.client.InfraBillingControllerDeleteInfraBillingHistoryRecordByUuid(ctx, params)
}

func (ic *InfraBillingClient) DeleteInfraBillingNodeByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraBillingNodeByUuidParams) (InfraBillingControllerDeleteInfraBillingNodeByUuidRes, error) {
	return ic.client.InfraBillingControllerDeleteInfraBillingNodeByUuid(ctx, params)
}

func (ic *InfraBillingClient) DeleteInfraProviderByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraProviderByUuidParams) (InfraBillingControllerDeleteInfraProviderByUuidRes, error) {
	return ic.client.InfraBillingControllerDeleteInfraProviderByUuid(ctx, params)
}

func (ic *InfraBillingClient) GetBillingNodes(ctx context.Context) (InfraBillingControllerGetBillingNodesRes, error) {
	return ic.client.InfraBillingControllerGetBillingNodes(ctx)
}

func (ic *InfraBillingClient) GetInfraBillingHistoryRecords(ctx context.Context) (InfraBillingControllerGetInfraBillingHistoryRecordsRes, error) {
	return ic.client.InfraBillingControllerGetInfraBillingHistoryRecords(ctx)
}

func (ic *InfraBillingClient) GetInfraProviderByUuid(ctx context.Context, params InfraBillingControllerGetInfraProviderByUuidParams) (InfraBillingControllerGetInfraProviderByUuidRes, error) {
	return ic.client.InfraBillingControllerGetInfraProviderByUuid(ctx, params)
}

func (ic *InfraBillingClient) GetInfraProviders(ctx context.Context) (InfraBillingControllerGetInfraProvidersRes, error) {
	return ic.client.InfraBillingControllerGetInfraProviders(ctx)
}

func (ic *InfraBillingClient) UpdateInfraBillingNode(ctx context.Context, request *UpdateInfraBillingNodeRequestDto) (InfraBillingControllerUpdateInfraBillingNodeRes, error) {
	return ic.client.InfraBillingControllerUpdateInfraBillingNode(ctx, request)
}

func (ic *InfraBillingClient) UpdateInfraProvider(ctx context.Context, request *UpdateInfraProviderRequestDto) (InfraBillingControllerUpdateInfraProviderRes, error) {
	return ic.client.InfraBillingControllerUpdateInfraProvider(ctx, request)
}


// InternalSquadsClient provides access to internal squads controller operations
type InternalSquadsClient struct { client *Client }
func NewInternalSquadsClient(c *Client) *InternalSquadsClient { return &InternalSquadsClient{client: c} }

func (ic *InternalSquadsClient) AddUsersToInternalSquad(ctx context.Context, params InternalSquadControllerAddUsersToInternalSquadParams) (InternalSquadControllerAddUsersToInternalSquadRes, error) {
	return ic.client.InternalSquadControllerAddUsersToInternalSquad(ctx, params)
}

func (ic *InternalSquadsClient) CreateInternalSquad(ctx context.Context, request *CreateInternalSquadRequestDto) (InternalSquadControllerCreateInternalSquadRes, error) {
	return ic.client.InternalSquadControllerCreateInternalSquad(ctx, request)
}

func (ic *InternalSquadsClient) DeleteInternalSquad(ctx context.Context, params InternalSquadControllerDeleteInternalSquadParams) (InternalSquadControllerDeleteInternalSquadRes, error) {
	return ic.client.InternalSquadControllerDeleteInternalSquad(ctx, params)
}

func (ic *InternalSquadsClient) GetInternalSquadAccessibleNodes(ctx context.Context, params InternalSquadControllerGetInternalSquadAccessibleNodesParams) (InternalSquadControllerGetInternalSquadAccessibleNodesRes, error) {
	return ic.client.InternalSquadControllerGetInternalSquadAccessibleNodes(ctx, params)
}

func (ic *InternalSquadsClient) GetInternalSquadByUuid(ctx context.Context, params InternalSquadControllerGetInternalSquadByUuidParams) (InternalSquadControllerGetInternalSquadByUuidRes, error) {
	return ic.client.InternalSquadControllerGetInternalSquadByUuid(ctx, params)
}

func (ic *InternalSquadsClient) GetInternalSquads(ctx context.Context) (InternalSquadControllerGetInternalSquadsRes, error) {
	return ic.client.InternalSquadControllerGetInternalSquads(ctx)
}

func (ic *InternalSquadsClient) RemoveUsersFromInternalSquad(ctx context.Context, params InternalSquadControllerRemoveUsersFromInternalSquadParams) (InternalSquadControllerRemoveUsersFromInternalSquadRes, error) {
	return ic.client.InternalSquadControllerRemoveUsersFromInternalSquad(ctx, params)
}

func (ic *InternalSquadsClient) UpdateInternalSquad(ctx context.Context, request *UpdateInternalSquadRequestDto) (InternalSquadControllerUpdateInternalSquadRes, error) {
	return ic.client.InternalSquadControllerUpdateInternalSquad(ctx, request)
}


// KeygenClient provides access to keygen controller operations
type KeygenClient struct { client *Client }
func NewKeygenClient(c *Client) *KeygenClient { return &KeygenClient{client: c} }

func (kc *KeygenClient) GenerateKey(ctx context.Context) (KeygenControllerGenerateKeyRes, error) {
	return kc.client.KeygenControllerGenerateKey(ctx)
}


// NodesClient provides access to nodes controller operations
type NodesClient struct { client *Client }
func NewNodesClient(c *Client) *NodesClient { return &NodesClient{client: c} }

func (nc *NodesClient) CreateNode(ctx context.Context, request *CreateNodeRequestDto) (NodesControllerCreateNodeRes, error) {
	return nc.client.NodesControllerCreateNode(ctx, request)
}

func (nc *NodesClient) DeleteNode(ctx context.Context, params NodesControllerDeleteNodeParams) (NodesControllerDeleteNodeRes, error) {
	return nc.client.NodesControllerDeleteNode(ctx, params)
}

func (nc *NodesClient) DisableNode(ctx context.Context, params NodesControllerDisableNodeParams) (NodesControllerDisableNodeRes, error) {
	return nc.client.NodesControllerDisableNode(ctx, params)
}

func (nc *NodesClient) EnableNode(ctx context.Context, params NodesControllerEnableNodeParams) (NodesControllerEnableNodeRes, error) {
	return nc.client.NodesControllerEnableNode(ctx, params)
}

func (nc *NodesClient) GetAllNodes(ctx context.Context) (NodesControllerGetAllNodesRes, error) {
	return nc.client.NodesControllerGetAllNodes(ctx)
}

func (nc *NodesClient) GetOneNode(ctx context.Context, params NodesControllerGetOneNodeParams) (NodesControllerGetOneNodeRes, error) {
	return nc.client.NodesControllerGetOneNode(ctx, params)
}

func (nc *NodesClient) ReorderNodes(ctx context.Context, request *ReorderNodeRequestDto) (NodesControllerReorderNodesRes, error) {
	return nc.client.NodesControllerReorderNodes(ctx, request)
}

func (nc *NodesClient) RestartAllNodes(ctx context.Context, request *RestartAllNodesRequestBodyDto) (NodesControllerRestartAllNodesRes, error) {
	return nc.client.NodesControllerRestartAllNodes(ctx, request)
}

func (nc *NodesClient) RestartNode(ctx context.Context, params NodesControllerRestartNodeParams) (NodesControllerRestartNodeRes, error) {
	return nc.client.NodesControllerRestartNode(ctx, params)
}

func (nc *NodesClient) UpdateNode(ctx context.Context, request *UpdateNodeRequestDto) (NodesControllerUpdateNodeRes, error) {
	return nc.client.NodesControllerUpdateNode(ctx, request)
}


// PasskeysClient provides access to passkeys controller operations
type PasskeysClient struct { client *Client }
func NewPasskeysClient(c *Client) *PasskeysClient { return &PasskeysClient{client: c} }

func (pc *PasskeysClient) DeletePasskey(ctx context.Context, request *DeletePasskeyRequestDto) (PasskeyControllerDeletePasskeyRes, error) {
	return pc.client.PasskeyControllerDeletePasskey(ctx, request)
}

func (pc *PasskeysClient) GetActivePasskeys(ctx context.Context) (PasskeyControllerGetActivePasskeysRes, error) {
	return pc.client.PasskeyControllerGetActivePasskeys(ctx)
}

func (pc *PasskeysClient) PasskeyRegistrationOptions(ctx context.Context) (PasskeyControllerPasskeyRegistrationOptionsRes, error) {
	return pc.client.PasskeyControllerPasskeyRegistrationOptions(ctx)
}

func (pc *PasskeysClient) PasskeyRegistrationVerify(ctx context.Context, request *VerifyPasskeyRegistrationRequestDto) (PasskeyControllerPasskeyRegistrationVerifyRes, error) {
	return pc.client.PasskeyControllerPasskeyRegistrationVerify(ctx, request)
}


// RemnawaveSettingsClient provides access to remnawave settings controller operations
type RemnawaveSettingsClient struct { client *Client }
func NewRemnawaveSettingsClient(c *Client) *RemnawaveSettingsClient { return &RemnawaveSettingsClient{client: c} }

func (rc *RemnawaveSettingsClient) GetSettings(ctx context.Context) (RemnawaveSettingsControllerGetSettingsRes, error) {
	return rc.client.RemnawaveSettingsControllerGetSettings(ctx)
}

func (rc *RemnawaveSettingsClient) UpdateSettings(ctx context.Context, request *UpdateRemnawaveSettingsRequestDto) (RemnawaveSettingsControllerUpdateSettingsRes, error) {
	return rc.client.RemnawaveSettingsControllerUpdateSettings(ctx, request)
}


// SnippetsClient provides access to snippets controller operations
type SnippetsClient struct { client *Client }
func NewSnippetsClient(c *Client) *SnippetsClient { return &SnippetsClient{client: c} }

func (sc *SnippetsClient) CreateSnippet(ctx context.Context, request *CreateSnippetRequestDto) (SnippetsControllerCreateSnippetRes, error) {
	return sc.client.SnippetsControllerCreateSnippet(ctx, request)
}

func (sc *SnippetsClient) DeleteSnippetByName(ctx context.Context, request *DeleteSnippetRequestDto) (SnippetsControllerDeleteSnippetByNameRes, error) {
	return sc.client.SnippetsControllerDeleteSnippetByName(ctx, request)
}

func (sc *SnippetsClient) GetSnippets(ctx context.Context) (SnippetsControllerGetSnippetsRes, error) {
	return sc.client.SnippetsControllerGetSnippets(ctx)
}

func (sc *SnippetsClient) UpdateSnippet(ctx context.Context, request *UpdateSnippetRequestDto) (SnippetsControllerUpdateSnippetRes, error) {
	return sc.client.SnippetsControllerUpdateSnippet(ctx, request)
}


// SubscriptionRequestHistoryClient provides access to subscription request history controller operations
type SubscriptionRequestHistoryClient struct { client *Client }
func NewSubscriptionRequestHistoryClient(c *Client) *SubscriptionRequestHistoryClient { return &SubscriptionRequestHistoryClient{client: c} }

func (sc *SubscriptionRequestHistoryClient) GetSubscriptionRequestHistory(ctx context.Context, params UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryParams) (UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryRes, error) {
	return sc.client.UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistory(ctx, params)
}

func (sc *SubscriptionRequestHistoryClient) GetSubscriptionRequestHistoryStats(ctx context.Context) (UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsRes, error) {
	return sc.client.UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStats(ctx)
}


// SubscriptionSettingsClient provides access to subscription settings controller operations
type SubscriptionSettingsClient struct { client *Client }
func NewSubscriptionSettingsClient(c *Client) *SubscriptionSettingsClient { return &SubscriptionSettingsClient{client: c} }

func (sc *SubscriptionSettingsClient) GetSettings(ctx context.Context) (SubscriptionSettingsControllerGetSettingsRes, error) {
	return sc.client.SubscriptionSettingsControllerGetSettings(ctx)
}

func (sc *SubscriptionSettingsClient) UpdateSettings(ctx context.Context, request *UpdateSubscriptionSettingsRequestDto) (SubscriptionSettingsControllerUpdateSettingsRes, error) {
	return sc.client.SubscriptionSettingsControllerUpdateSettings(ctx, request)
}


// SubscriptionTemplateClient provides access to subscription template controller operations
type SubscriptionTemplateClient struct { client *Client }
func NewSubscriptionTemplateClient(c *Client) *SubscriptionTemplateClient { return &SubscriptionTemplateClient{client: c} }

func (sc *SubscriptionTemplateClient) CreateTemplate(ctx context.Context, request *CreateSubscriptionTemplateRequestDto) (SubscriptionTemplateControllerCreateTemplateRes, error) {
	return sc.client.SubscriptionTemplateControllerCreateTemplate(ctx, request)
}

func (sc *SubscriptionTemplateClient) DeleteTemplate(ctx context.Context, params SubscriptionTemplateControllerDeleteTemplateParams) (SubscriptionTemplateControllerDeleteTemplateRes, error) {
	return sc.client.SubscriptionTemplateControllerDeleteTemplate(ctx, params)
}

func (sc *SubscriptionTemplateClient) GetAllTemplates(ctx context.Context) (SubscriptionTemplateControllerGetAllTemplatesRes, error) {
	return sc.client.SubscriptionTemplateControllerGetAllTemplates(ctx)
}

func (sc *SubscriptionTemplateClient) GetTemplateByUuid(ctx context.Context, params SubscriptionTemplateControllerGetTemplateByUuidParams) (SubscriptionTemplateControllerGetTemplateByUuidRes, error) {
	return sc.client.SubscriptionTemplateControllerGetTemplateByUuid(ctx, params)
}

func (sc *SubscriptionTemplateClient) UpdateTemplate(ctx context.Context, request *UpdateTemplateRequestDto) (SubscriptionTemplateControllerUpdateTemplateRes, error) {
	return sc.client.SubscriptionTemplateControllerUpdateTemplate(ctx, request)
}


// SystemClient provides access to system controller operations
type SystemClient struct { client *Client }
func NewSystemClient(c *Client) *SystemClient { return &SystemClient{client: c} }

func (sc *SystemClient) DebugSrrMatcher(ctx context.Context, request *DebugSrrMatcherRequestDto) (SystemControllerDebugSrrMatcherRes, error) {
	return sc.client.SystemControllerDebugSrrMatcher(ctx, request)
}

func (sc *SystemClient) EncryptHappCryptoLink(ctx context.Context, request *EncryptHappCryptoLinkRequestDto) (SystemControllerEncryptHappCryptoLinkRes, error) {
	return sc.client.SystemControllerEncryptHappCryptoLink(ctx, request)
}

func (sc *SystemClient) GetBandwidthStats(ctx context.Context) (SystemControllerGetBandwidthStatsRes, error) {
	return sc.client.SystemControllerGetBandwidthStats(ctx)
}

func (sc *SystemClient) GetNodesMetrics(ctx context.Context) (SystemControllerGetNodesMetricsRes, error) {
	return sc.client.SystemControllerGetNodesMetrics(ctx)
}

func (sc *SystemClient) GetNodesStatistics(ctx context.Context) (SystemControllerGetNodesStatisticsRes, error) {
	return sc.client.SystemControllerGetNodesStatistics(ctx)
}

func (sc *SystemClient) GetRemnawaveHealth(ctx context.Context) (SystemControllerGetRemnawaveHealthRes, error) {
	return sc.client.SystemControllerGetRemnawaveHealth(ctx)
}

func (sc *SystemClient) GetStats(ctx context.Context) (SystemControllerGetStatsRes, error) {
	return sc.client.SystemControllerGetStats(ctx)
}

func (sc *SystemClient) GetX25519Keypairs(ctx context.Context) (SystemControllerGetX25519KeypairsRes, error) {
	return sc.client.SystemControllerGetX25519Keypairs(ctx)
}


// UsersBulkActionsClient provides access to users bulk actions controller operations
type UsersBulkActionsClient struct { client *Client }
func NewUsersBulkActionsClient(c *Client) *UsersBulkActionsClient { return &UsersBulkActionsClient{client: c} }

func (uc *UsersBulkActionsClient) BulkAllResetUserTraffic(ctx context.Context) (UsersBulkActionsControllerBulkAllResetUserTrafficRes, error) {
	return uc.client.UsersBulkActionsControllerBulkAllResetUserTraffic(ctx)
}

func (uc *UsersBulkActionsClient) BulkDeleteUsers(ctx context.Context, request *BulkDeleteUsersRequestDto) (UsersBulkActionsControllerBulkDeleteUsersRes, error) {
	return uc.client.UsersBulkActionsControllerBulkDeleteUsers(ctx, request)
}

func (uc *UsersBulkActionsClient) BulkDeleteUsersByStatus(ctx context.Context, request *BulkDeleteUsersByStatusRequestDto) (UsersBulkActionsControllerBulkDeleteUsersByStatusRes, error) {
	return uc.client.UsersBulkActionsControllerBulkDeleteUsersByStatus(ctx, request)
}

func (uc *UsersBulkActionsClient) BulkResetUserTraffic(ctx context.Context, request *BulkResetTrafficUsersRequestDto) (UsersBulkActionsControllerBulkResetUserTrafficRes, error) {
	return uc.client.UsersBulkActionsControllerBulkResetUserTraffic(ctx, request)
}

func (uc *UsersBulkActionsClient) BulkRevokeUsersSubscription(ctx context.Context, request *BulkRevokeUsersSubscriptionRequestDto) (UsersBulkActionsControllerBulkRevokeUsersSubscriptionRes, error) {
	return uc.client.UsersBulkActionsControllerBulkRevokeUsersSubscription(ctx, request)
}

func (uc *UsersBulkActionsClient) BulkUpdateAllUsers(ctx context.Context, request *BulkAllUpdateUsersRequestDto) (UsersBulkActionsControllerBulkUpdateAllUsersRes, error) {
	return uc.client.UsersBulkActionsControllerBulkUpdateAllUsers(ctx, request)
}

func (uc *UsersBulkActionsClient) BulkUpdateUsers(ctx context.Context, request *BulkUpdateUsersRequestDto) (UsersBulkActionsControllerBulkUpdateUsersRes, error) {
	return uc.client.UsersBulkActionsControllerBulkUpdateUsers(ctx, request)
}

func (uc *UsersBulkActionsClient) BulkUpdateUsersInternalSquads(ctx context.Context, request *BulkUpdateUsersSquadsRequestDto) (UsersBulkActionsControllerBulkUpdateUsersInternalSquadsRes, error) {
	return uc.client.UsersBulkActionsControllerBulkUpdateUsersInternalSquads(ctx, request)
}


// UsersClient provides access to users controller operations
type UsersClient struct { client *Client }
func NewUsersClient(c *Client) *UsersClient { return &UsersClient{client: c} }

func (uc *UsersClient) CreateUser(ctx context.Context, request *CreateUserRequestDto) (UsersControllerCreateUserRes, error) {
	return uc.client.UsersControllerCreateUser(ctx, request)
}

func (uc *UsersClient) DeleteUser(ctx context.Context, params UsersControllerDeleteUserParams) (UsersControllerDeleteUserRes, error) {
	return uc.client.UsersControllerDeleteUser(ctx, params)
}

func (uc *UsersClient) DisableUser(ctx context.Context, params UsersControllerDisableUserParams) (UsersControllerDisableUserRes, error) {
	return uc.client.UsersControllerDisableUser(ctx, params)
}

func (uc *UsersClient) EnableUser(ctx context.Context, params UsersControllerEnableUserParams) (UsersControllerEnableUserRes, error) {
	return uc.client.UsersControllerEnableUser(ctx, params)
}

func (uc *UsersClient) GetAllTags(ctx context.Context) (UsersControllerGetAllTagsRes, error) {
	return uc.client.UsersControllerGetAllTags(ctx)
}

func (uc *UsersClient) GetAllUsers(ctx context.Context, params UsersControllerGetAllUsersParams) (UsersControllerGetAllUsersRes, error) {
	return uc.client.UsersControllerGetAllUsers(ctx, params)
}

func (uc *UsersClient) GetUserAccessibleNodes(ctx context.Context, params UsersControllerGetUserAccessibleNodesParams) (UsersControllerGetUserAccessibleNodesRes, error) {
	return uc.client.UsersControllerGetUserAccessibleNodes(ctx, params)
}

func (uc *UsersClient) GetUserByShortUuid(ctx context.Context, params UsersControllerGetUserByShortUuidParams) (UsersControllerGetUserByShortUuidRes, error) {
	return uc.client.UsersControllerGetUserByShortUuid(ctx, params)
}

func (uc *UsersClient) GetUserByTelegramId(ctx context.Context, params UsersControllerGetUserByTelegramIdParams) (UsersControllerGetUserByTelegramIdRes, error) {
	return uc.client.UsersControllerGetUserByTelegramId(ctx, params)
}

func (uc *UsersClient) GetUserByUsername(ctx context.Context, params UsersControllerGetUserByUsernameParams) (UsersControllerGetUserByUsernameRes, error) {
	return uc.client.UsersControllerGetUserByUsername(ctx, params)
}

func (uc *UsersClient) GetUserByUuid(ctx context.Context, params UsersControllerGetUserByUuidParams) (UsersControllerGetUserByUuidRes, error) {
	return uc.client.UsersControllerGetUserByUuid(ctx, params)
}

func (uc *UsersClient) GetUserSubscriptionRequestHistory(ctx context.Context, params UsersControllerGetUserSubscriptionRequestHistoryParams) (UsersControllerGetUserSubscriptionRequestHistoryRes, error) {
	return uc.client.UsersControllerGetUserSubscriptionRequestHistory(ctx, params)
}

func (uc *UsersClient) GetUsersByEmail(ctx context.Context, params UsersControllerGetUsersByEmailParams) (UsersControllerGetUsersByEmailRes, error) {
	return uc.client.UsersControllerGetUsersByEmail(ctx, params)
}

func (uc *UsersClient) GetUsersByTag(ctx context.Context, params UsersControllerGetUsersByTagParams) (UsersControllerGetUsersByTagRes, error) {
	return uc.client.UsersControllerGetUsersByTag(ctx, params)
}

func (uc *UsersClient) ResetUserTraffic(ctx context.Context, params UsersControllerResetUserTrafficParams) (UsersControllerResetUserTrafficRes, error) {
	return uc.client.UsersControllerResetUserTraffic(ctx, params)
}

func (uc *UsersClient) RevokeUserSubscription(ctx context.Context, request *RevokeUserSubscriptionBodyDto, params UsersControllerRevokeUserSubscriptionParams) (UsersControllerRevokeUserSubscriptionRes, error) {
	return uc.client.UsersControllerRevokeUserSubscription(ctx, request, params)
}

func (uc *UsersClient) UpdateUser(ctx context.Context, request *UpdateUserRequestDto) (UsersControllerUpdateUserRes, error) {
	return uc.client.UsersControllerUpdateUser(ctx, request)
}


// UsersStatsClient provides access to users stats controller operations
type UsersStatsClient struct { client *Client }
func NewUsersStatsClient(c *Client) *UsersStatsClient { return &UsersStatsClient{client: c} }

func (uc *UsersStatsClient) GetUserUsageByRange(ctx context.Context, params UsersStatsControllerGetUserUsageByRangeParams) (UsersStatsControllerGetUserUsageByRangeRes, error) {
	return uc.client.UsersStatsControllerGetUserUsageByRange(ctx, params)
}


// ProtectedSubscriptionsClient provides access to [protected] subscriptions controller operations
type ProtectedSubscriptionsClient struct { client *Client }
func NewProtectedSubscriptionsClient(c *Client) *ProtectedSubscriptionsClient { return &ProtectedSubscriptionsClient{client: c} }

func (pc *ProtectedSubscriptionsClient) GetAllSubscriptions(ctx context.Context, params SubscriptionsControllerGetAllSubscriptionsParams) (SubscriptionsControllerGetAllSubscriptionsRes, error) {
	return pc.client.SubscriptionsControllerGetAllSubscriptions(ctx, params)
}

func (pc *ProtectedSubscriptionsClient) GetRawSubscriptionByShortUuid(ctx context.Context, params SubscriptionsControllerGetRawSubscriptionByShortUuidParams) (SubscriptionsControllerGetRawSubscriptionByShortUuidRes, error) {
	return pc.client.SubscriptionsControllerGetRawSubscriptionByShortUuid(ctx, params)
}

func (pc *ProtectedSubscriptionsClient) GetSubscriptionByShortUuidProtected(ctx context.Context, params SubscriptionsControllerGetSubscriptionByShortUuidProtectedParams) (SubscriptionsControllerGetSubscriptionByShortUuidProtectedRes, error) {
	return pc.client.SubscriptionsControllerGetSubscriptionByShortUuidProtected(ctx, params)
}

func (pc *ProtectedSubscriptionsClient) GetSubscriptionByUsername(ctx context.Context, params SubscriptionsControllerGetSubscriptionByUsernameParams) (SubscriptionsControllerGetSubscriptionByUsernameRes, error) {
	return pc.client.SubscriptionsControllerGetSubscriptionByUsername(ctx, params)
}

func (pc *ProtectedSubscriptionsClient) GetSubscriptionByUuid(ctx context.Context, params SubscriptionsControllerGetSubscriptionByUuidParams) (SubscriptionsControllerGetSubscriptionByUuidRes, error) {
	return pc.client.SubscriptionsControllerGetSubscriptionByUuid(ctx, params)
}


// PublicSubscriptionClient provides access to [public] subscription controller operations
type PublicSubscriptionClient struct { client *Client }
func NewPublicSubscriptionClient(c *Client) *PublicSubscriptionClient { return &PublicSubscriptionClient{client: c} }

func (pc *PublicSubscriptionClient) GetSubscription(ctx context.Context, params SubscriptionControllerGetSubscriptionParams) error {
	return pc.client.SubscriptionControllerGetSubscription(ctx, params)
}

func (pc *PublicSubscriptionClient) GetSubscriptionByClientType(ctx context.Context, params SubscriptionControllerGetSubscriptionByClientTypeParams) error {
	return pc.client.SubscriptionControllerGetSubscriptionByClientType(ctx, params)
}

func (pc *PublicSubscriptionClient) GetSubscriptionInfoByShortUuid(ctx context.Context, params SubscriptionControllerGetSubscriptionInfoByShortUuidParams) (SubscriptionControllerGetSubscriptionInfoByShortUuidRes, error) {
	return pc.client.SubscriptionControllerGetSubscriptionInfoByShortUuid(ctx, params)
}

func (pc *PublicSubscriptionClient) GetSubscriptionWithType(ctx context.Context, params SubscriptionControllerGetSubscriptionWithTypeParams) error {
	return pc.client.SubscriptionControllerGetSubscriptionWithType(ctx, params)
}
