// Code generated by sub-client generator. DO NOT EDIT manually.
// This file extends the base Client with organized sub-client access patterns for all 139 API operations.

package api

import "context"

// ClientExt wraps the base Client and adds organized sub-client methods for all 139 API operations.
type ClientExt struct {
	*Client
	apiTokens                  *ApiTokensClient
	auth                       *AuthClient
	bandwidthStats             *BandwidthStatsClient
	configProfiles             *ConfigProfilesClient
	externalSquads             *ExternalSquadsClient
	hwidUserDevices            *HwidUserDevicesClient
	hostsBulkActions           *HostsBulkActionsClient
	hosts                      *HostsClient
	infraBilling               *InfraBillingClient
	internalSquads             *InternalSquadsClient
	keygen                     *KeygenClient
	nodes                      *NodesClient
	passkeys                   *PasskeysClient
	remnawaveSettings          *RemnawaveSettingsClient
	snippets                   *SnippetsClient
	subscriptionRequestHistory *SubscriptionRequestHistoryClient
	subscriptionSettings       *SubscriptionSettingsClient
	subscriptionTemplate       *SubscriptionTemplateClient
	system                     *SystemClient
	usersBulkActions           *UsersBulkActionsClient
	users                      *UsersClient
	usersStats                 *UsersStatsClient
	protectedSubscriptions     *ProtectedSubscriptionsClient
	publicSubscription         *PublicSubscriptionClient
}

// NewClientExt wraps an existing Client with sub-client access.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client:                     client,
		apiTokens:                  NewApiTokensClient(client),
		auth:                       NewAuthClient(client),
		bandwidthStats:             NewBandwidthStatsClient(client),
		configProfiles:             NewConfigProfilesClient(client),
		externalSquads:             NewExternalSquadsClient(client),
		hwidUserDevices:            NewHwidUserDevicesClient(client),
		hostsBulkActions:           NewHostsBulkActionsClient(client),
		hosts:                      NewHostsClient(client),
		infraBilling:               NewInfraBillingClient(client),
		internalSquads:             NewInternalSquadsClient(client),
		keygen:                     NewKeygenClient(client),
		nodes:                      NewNodesClient(client),
		passkeys:                   NewPasskeysClient(client),
		remnawaveSettings:          NewRemnawaveSettingsClient(client),
		snippets:                   NewSnippetsClient(client),
		subscriptionRequestHistory: NewSubscriptionRequestHistoryClient(client),
		subscriptionSettings:       NewSubscriptionSettingsClient(client),
		subscriptionTemplate:       NewSubscriptionTemplateClient(client),
		system:                     NewSystemClient(client),
		usersBulkActions:           NewUsersBulkActionsClient(client),
		users:                      NewUsersClient(client),
		usersStats:                 NewUsersStatsClient(client),
		protectedSubscriptions:     NewProtectedSubscriptionsClient(client),
		publicSubscription:         NewPublicSubscriptionClient(client),
	}
}

// Accessor methods for all sub-clients
func (c *ClientExt) ApiTokens() *ApiTokensClient                   { return c.apiTokens }
func (c *ClientExt) Auth() *AuthClient                             { return c.auth }
func (c *ClientExt) BandwidthStats() *BandwidthStatsClient         { return c.bandwidthStats }
func (c *ClientExt) ConfigProfiles() *ConfigProfilesClient         { return c.configProfiles }
func (c *ClientExt) ExternalSquads() *ExternalSquadsClient         { return c.externalSquads }
func (c *ClientExt) HwidUserDevices() *HwidUserDevicesClient       { return c.hwidUserDevices }
func (c *ClientExt) HostsBulkActions() *HostsBulkActionsClient     { return c.hostsBulkActions }
func (c *ClientExt) Hosts() *HostsClient                           { return c.hosts }
func (c *ClientExt) InfraBilling() *InfraBillingClient             { return c.infraBilling }
func (c *ClientExt) InternalSquads() *InternalSquadsClient         { return c.internalSquads }
func (c *ClientExt) Keygen() *KeygenClient                         { return c.keygen }
func (c *ClientExt) Nodes() *NodesClient                           { return c.nodes }
func (c *ClientExt) Passkeys() *PasskeysClient                     { return c.passkeys }
func (c *ClientExt) RemnawaveSettings() *RemnawaveSettingsClient   { return c.remnawaveSettings }
func (c *ClientExt) Snippets() *SnippetsClient                     { return c.snippets }
func (c *ClientExt) SubscriptionRequestHistory() *SubscriptionRequestHistoryClient { return c.subscriptionRequestHistory }
func (c *ClientExt) SubscriptionSettings() *SubscriptionSettingsClient { return c.subscriptionSettings }
func (c *ClientExt) SubscriptionTemplate() *SubscriptionTemplateClient { return c.subscriptionTemplate }
func (c *ClientExt) System() *SystemClient                         { return c.system }
func (c *ClientExt) UsersBulkActions() *UsersBulkActionsClient     { return c.usersBulkActions }
func (c *ClientExt) Users() *UsersClient                           { return c.users }
func (c *ClientExt) UsersStats() *UsersStatsClient                 { return c.usersStats }
func (c *ClientExt) ProtectedSubscriptions() *ProtectedSubscriptionsClient { return c.protectedSubscriptions }
func (c *ClientExt) PublicSubscription() *PublicSubscriptionClient { return c.publicSubscription }

// =============================================================================
// Sub-Client Implementations (24 clients covering all 139 operations)
// =============================================================================

// ApiTokensClient - 3 operations
type ApiTokensClient struct{ client *Client }
func NewApiTokensClient(c *Client) *ApiTokensClient { return &ApiTokensClient{client: c} }

func (ac *ApiTokensClient) FindAll(ctx context.Context) (ApiTokensControllerFindAllRes, error) {
	return ac.client.ApiTokensControllerFindAll(ctx)
}
func (ac *ApiTokensClient) Create(ctx context.Context, request *CreateApiTokenRequest) (ApiTokensControllerCreateRes, error) {
	return ac.client.ApiTokensControllerCreate(ctx, request)
}
func (ac *ApiTokensClient) Delete(ctx context.Context, params ApiTokensControllerDeleteParams) (ApiTokensControllerDeleteRes, error) {
	return ac.client.ApiTokensControllerDelete(ctx, params)
}

// AuthClient - 8 operations
type AuthClient struct{ client *Client }
func NewAuthClient(c *Client) *AuthClient { return &AuthClient{client: c} }

func (ac *AuthClient) GetStatus(ctx context.Context) (AuthControllerGetStatusRes, error) {
	return ac.client.AuthControllerGetStatus(ctx)
}
func (ac *AuthClient) Login(ctx context.Context, request *LoginRequest) (AuthControllerLoginRes, error) {
	return ac.client.AuthControllerLogin(ctx, request)
}
func (ac *AuthClient) Register(ctx context.Context, request *RegisterRequest) (AuthControllerRegisterRes, error) {
	return ac.client.AuthControllerRegister(ctx, request)
}
func (ac *AuthClient) OAuth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequest) (AuthControllerOauth2AuthorizeRes, error) {
	return ac.client.AuthControllerOauth2Authorize(ctx, request)
}
func (ac *AuthClient) OAuth2Callback(ctx context.Context, request *OAuth2CallbackRequest) (AuthControllerOauth2CallbackRes, error) {
	return ac.client.AuthControllerOauth2Callback(ctx, request)
}
func (ac *AuthClient) TelegramCallback(ctx context.Context, request *TelegramCallbackRequest) (AuthControllerTelegramCallbackRes, error) {
	return ac.client.AuthControllerTelegramCallback(ctx, request)
}
func (ac *AuthClient) PasskeyAuthenticationOptions(ctx context.Context) (AuthControllerPasskeyAuthenticationOptionsRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationOptions(ctx)
}
func (ac *AuthClient) PasskeyAuthenticationVerify(ctx context.Context, request *VerifyPasskeyAuthenticationRequest) (AuthControllerPasskeyAuthenticationVerifyRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationVerify(ctx, request)
}

// BandwidthStatsClient - 3 operations
type BandwidthStatsClient struct{ client *Client }
func NewBandwidthStatsClient(c *Client) *BandwidthStatsClient { return &BandwidthStatsClient{client: c} }

func (bc *BandwidthStatsClient) GetNodesUsageByRange(ctx context.Context) (NodesUsageHistoryControllerGetNodesUsageByRangeRes, error) {
	return bc.client.NodesUsageHistoryControllerGetNodesUsageByRange(ctx)
}
func (bc *BandwidthStatsClient) GetNodesRealtimeUsage(ctx context.Context) (NodesUserUsageHistoryControllerGetNodesRealtimeUsageRes, error) {
	return bc.client.NodesUserUsageHistoryControllerGetNodesRealtimeUsage(ctx)
}
func (bc *BandwidthStatsClient) GetNodeUserUsage(ctx context.Context, params NodesUserUsageHistoryControllerGetNodeUserUsageParams) (NodesUserUsageHistoryControllerGetNodeUserUsageRes, error) {
	return bc.client.NodesUserUsageHistoryControllerGetNodeUserUsage(ctx, params)
}

// ConfigProfilesClient - 7 operations
type ConfigProfilesClient struct{ client *Client }
func NewConfigProfilesClient(c *Client) *ConfigProfilesClient { return &ConfigProfilesClient{client: c} }

func (cc *ConfigProfilesClient) GetConfigProfiles(ctx context.Context) (ConfigProfileControllerGetConfigProfilesRes, error) {
	return cc.client.ConfigProfileControllerGetConfigProfiles(ctx)
}
func (cc *ConfigProfilesClient) UpdateConfigProfile(ctx context.Context, request *UpdateConfigProfileRequest) (ConfigProfileControllerUpdateConfigProfileRes, error) {
	return cc.client.ConfigProfileControllerUpdateConfigProfile(ctx, request)
}
func (cc *ConfigProfilesClient) CreateConfigProfile(ctx context.Context, request *CreateConfigProfileRequest) (ConfigProfileControllerCreateConfigProfileRes, error) {
	return cc.client.ConfigProfileControllerCreateConfigProfile(ctx, request)
}
func (cc *ConfigProfilesClient) GetAllInbounds(ctx context.Context) (ConfigProfileControllerGetAllInboundsRes, error) {
	return cc.client.ConfigProfileControllerGetAllInbounds(ctx)
}
func (cc *ConfigProfilesClient) DeleteConfigProfileByUuid(ctx context.Context, params ConfigProfileControllerDeleteConfigProfileByUuidParams) (ConfigProfileControllerDeleteConfigProfileByUuidRes, error) {
	return cc.client.ConfigProfileControllerDeleteConfigProfileByUuid(ctx, params)
}
func (cc *ConfigProfilesClient) GetConfigProfileByUuid(ctx context.Context, params ConfigProfileControllerGetConfigProfileByUuidParams) (ConfigProfileControllerGetConfigProfileByUuidRes, error) {
	return cc.client.ConfigProfileControllerGetConfigProfileByUuid(ctx, params)
}
func (cc *ConfigProfilesClient) GetInboundsByProfileUuid(ctx context.Context, params ConfigProfileControllerGetInboundsByProfileUuidParams) (ConfigProfileControllerGetInboundsByProfileUuidRes, error) {
	return cc.client.ConfigProfileControllerGetInboundsByProfileUuid(ctx, params)
}

// ExternalSquadsClient - 7 operations
type ExternalSquadsClient struct{ client *Client }
func NewExternalSquadsClient(c *Client) *ExternalSquadsClient { return &ExternalSquadsClient{client: c} }

func (ec *ExternalSquadsClient) GetExternalSquads(ctx context.Context) (ExternalSquadControllerGetExternalSquadsRes, error) {
	return ec.client.ExternalSquadControllerGetExternalSquads(ctx)
}
func (ec *ExternalSquadsClient) UpdateExternalSquad(ctx context.Context, request *UpdateExternalSquadRequest) (ExternalSquadControllerUpdateExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerUpdateExternalSquad(ctx, request)
}
func (ec *ExternalSquadsClient) CreateExternalSquad(ctx context.Context, request *CreateExternalSquadRequest) (ExternalSquadControllerCreateExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerCreateExternalSquad(ctx, request)
}
func (ec *ExternalSquadsClient) DeleteExternalSquad(ctx context.Context, params ExternalSquadControllerDeleteExternalSquadParams) (ExternalSquadControllerDeleteExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerDeleteExternalSquad(ctx, params)
}
func (ec *ExternalSquadsClient) GetExternalSquadByUuid(ctx context.Context, params ExternalSquadControllerGetExternalSquadByUuidParams) (ExternalSquadControllerGetExternalSquadByUuidRes, error) {
	return ec.client.ExternalSquadControllerGetExternalSquadByUuid(ctx, params)
}
func (ec *ExternalSquadsClient) AddUsersToExternalSquad(ctx context.Context, params ExternalSquadControllerAddUsersToExternalSquadParams) (ExternalSquadControllerAddUsersToExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerAddUsersToExternalSquad(ctx, params)
}
func (ec *ExternalSquadsClient) RemoveUsersFromExternalSquad(ctx context.Context, params ExternalSquadControllerRemoveUsersFromExternalSquadParams) (ExternalSquadControllerRemoveUsersFromExternalSquadRes, error) {
	return ec.client.ExternalSquadControllerRemoveUsersFromExternalSquad(ctx, params)
}

// HwidUserDevicesClient - 6 operations
type HwidUserDevicesClient struct{ client *Client }
func NewHwidUserDevicesClient(c *Client) *HwidUserDevicesClient { return &HwidUserDevicesClient{client: c} }

func (hc *HwidUserDevicesClient) GetAllUsers(ctx context.Context) (HwidUserDevicesControllerGetAllUsersRes, error) {
	return hc.client.HwidUserDevicesControllerGetAllUsers(ctx)
}
func (hc *HwidUserDevicesClient) CreateUserHwidDevice(ctx context.Context, request *CreateUserHwidDeviceRequest) (HwidUserDevicesControllerCreateUserHwidDeviceRes, error) {
	return hc.client.HwidUserDevicesControllerCreateUserHwidDevice(ctx, request)
}
func (hc *HwidUserDevicesClient) DeleteUserHwidDevice(ctx context.Context, request *DeleteUserHwidDeviceRequest) (HwidUserDevicesControllerDeleteUserHwidDeviceRes, error) {
	return hc.client.HwidUserDevicesControllerDeleteUserHwidDevice(ctx, request)
}
func (hc *HwidUserDevicesClient) DeleteAllUserHwidDevices(ctx context.Context, request *DeleteAllUserHwidDevicesRequest) (HwidUserDevicesControllerDeleteAllUserHwidDevicesRes, error) {
	return hc.client.HwidUserDevicesControllerDeleteAllUserHwidDevices(ctx, request)
}
func (hc *HwidUserDevicesClient) GetHwidDevicesStats(ctx context.Context) (HwidUserDevicesControllerGetHwidDevicesStatsRes, error) {
	return hc.client.HwidUserDevicesControllerGetHwidDevicesStats(ctx)
}
func (hc *HwidUserDevicesClient) GetUserHwidDevices(ctx context.Context, params HwidUserDevicesControllerGetUserHwidDevicesParams) (HwidUserDevicesControllerGetUserHwidDevicesRes, error) {
	return hc.client.HwidUserDevicesControllerGetUserHwidDevices(ctx, params)
}

// HostsBulkActionsClient - 5 operations
type HostsBulkActionsClient struct{ client *Client }
func NewHostsBulkActionsClient(c *Client) *HostsBulkActionsClient { return &HostsBulkActionsClient{client: c} }

func (hbc *HostsBulkActionsClient) DeleteHosts(ctx context.Context, request *BulkUuidsRequest) (HostsBulkActionsControllerDeleteHostsRes, error) {
	return hbc.client.HostsBulkActionsControllerDeleteHosts(ctx, request)
}
func (hbc *HostsBulkActionsClient) DisableHosts(ctx context.Context, request *BulkUuidsRequest) (HostsBulkActionsControllerDisableHostsRes, error) {
	return hbc.client.HostsBulkActionsControllerDisableHosts(ctx, request)
}
func (hbc *HostsBulkActionsClient) EnableHosts(ctx context.Context, request *BulkUuidsRequest) (HostsBulkActionsControllerEnableHostsRes, error) {
	return hbc.client.HostsBulkActionsControllerEnableHosts(ctx, request)
}
func (hbc *HostsBulkActionsClient) SetInboundToHosts(ctx context.Context, request *SetInboundToHostsRequest) (HostsBulkActionsControllerSetInboundToHostsRes, error) {
	return hbc.client.HostsBulkActionsControllerSetInboundToHosts(ctx, request)
}
func (hbc *HostsBulkActionsClient) SetPortToHosts(ctx context.Context, request *SetPortToHostsRequest) (HostsBulkActionsControllerSetPortToHostsRes, error) {
	return hbc.client.HostsBulkActionsControllerSetPortToHosts(ctx, request)
}

// HostsClient - 7 operations
type HostsClient struct{ client *Client }
func NewHostsClient(c *Client) *HostsClient { return &HostsClient{client: c} }

func (hc *HostsClient) GetAllHosts(ctx context.Context) (HostsControllerGetAllHostsRes, error) {
	return hc.client.HostsControllerGetAllHosts(ctx)
}
func (hc *HostsClient) UpdateHost(ctx context.Context, request *UpdateHostRequest) (HostsControllerUpdateHostRes, error) {
	return hc.client.HostsControllerUpdateHost(ctx, request)
}
func (hc *HostsClient) CreateHost(ctx context.Context, request *CreateHostRequest) (HostsControllerCreateHostRes, error) {
	return hc.client.HostsControllerCreateHost(ctx, request)
}
func (hc *HostsClient) ReorderHosts(ctx context.Context, request *ReorderRequest) (HostsControllerReorderHostsRes, error) {
	return hc.client.HostsControllerReorderHosts(ctx, request)
}
func (hc *HostsClient) GetAllHostTags(ctx context.Context) (HostsControllerGetAllHostTagsRes, error) {
	return hc.client.HostsControllerGetAllHostTags(ctx)
}
func (hc *HostsClient) DeleteHost(ctx context.Context, params HostsControllerDeleteHostParams) (HostsControllerDeleteHostRes, error) {
	return hc.client.HostsControllerDeleteHost(ctx, params)
}
func (hc *HostsClient) GetOneHost(ctx context.Context, params HostsControllerGetOneHostParams) (HostsControllerGetOneHostRes, error) {
	return hc.client.HostsControllerGetOneHost(ctx, params)
}

// InfraBillingClient - 12 operations
type InfraBillingClient struct{ client *Client }
func NewInfraBillingClient(c *Client) *InfraBillingClient { return &InfraBillingClient{client: c} }

func (ic *InfraBillingClient) GetInfraBillingHistoryRecords(ctx context.Context) (InfraBillingControllerGetInfraBillingHistoryRecordsRes, error) {
	return ic.client.InfraBillingControllerGetInfraBillingHistoryRecords(ctx)
}
func (ic *InfraBillingClient) CreateInfraBillingHistoryRecord(ctx context.Context, request *CreateInfraBillingHistoryRecordRequest) (InfraBillingControllerCreateInfraBillingHistoryRecordRes, error) {
	return ic.client.InfraBillingControllerCreateInfraBillingHistoryRecord(ctx, request)
}
func (ic *InfraBillingClient) DeleteInfraBillingHistoryRecordByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidParams) (InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidRes, error) {
	return ic.client.InfraBillingControllerDeleteInfraBillingHistoryRecordByUuid(ctx, params)
}
func (ic *InfraBillingClient) GetBillingNodes(ctx context.Context) (InfraBillingControllerGetBillingNodesRes, error) {
	return ic.client.InfraBillingControllerGetBillingNodes(ctx)
}
func (ic *InfraBillingClient) UpdateInfraBillingNode(ctx context.Context, request *UpdateInfraBillingNodeRequest) (InfraBillingControllerUpdateInfraBillingNodeRes, error) {
	return ic.client.InfraBillingControllerUpdateInfraBillingNode(ctx, request)
}
func (ic *InfraBillingClient) CreateInfraBillingNode(ctx context.Context, request *CreateInfraBillingNodeRequest) (InfraBillingControllerCreateInfraBillingNodeRes, error) {
	return ic.client.InfraBillingControllerCreateInfraBillingNode(ctx, request)
}
func (ic *InfraBillingClient) DeleteInfraBillingNodeByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraBillingNodeByUuidParams) (InfraBillingControllerDeleteInfraBillingNodeByUuidRes, error) {
	return ic.client.InfraBillingControllerDeleteInfraBillingNodeByUuid(ctx, params)
}
func (ic *InfraBillingClient) GetInfraProviders(ctx context.Context) (InfraBillingControllerGetInfraProvidersRes, error) {
	return ic.client.InfraBillingControllerGetInfraProviders(ctx)
}
func (ic *InfraBillingClient) UpdateInfraProvider(ctx context.Context, request *UpdateInfraProviderRequest) (InfraBillingControllerUpdateInfraProviderRes, error) {
	return ic.client.InfraBillingControllerUpdateInfraProvider(ctx, request)
}
func (ic *InfraBillingClient) CreateInfraProvider(ctx context.Context, request *CreateInfraProviderRequest) (InfraBillingControllerCreateInfraProviderRes, error) {
	return ic.client.InfraBillingControllerCreateInfraProvider(ctx, request)
}
func (ic *InfraBillingClient) DeleteInfraProviderByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraProviderByUuidParams) (InfraBillingControllerDeleteInfraProviderByUuidRes, error) {
	return ic.client.InfraBillingControllerDeleteInfraProviderByUuid(ctx, params)
}
func (ic *InfraBillingClient) GetInfraProviderByUuid(ctx context.Context, params InfraBillingControllerGetInfraProviderByUuidParams) (InfraBillingControllerGetInfraProviderByUuidRes, error) {
	return ic.client.InfraBillingControllerGetInfraProviderByUuid(ctx, params)
}

// InternalSquadsClient - 8 operations
type InternalSquadsClient struct{ client *Client }
func NewInternalSquadsClient(c *Client) *InternalSquadsClient { return &InternalSquadsClient{client: c} }

func (ic *InternalSquadsClient) GetInternalSquads(ctx context.Context) (InternalSquadControllerGetInternalSquadsRes, error) {
	return ic.client.InternalSquadControllerGetInternalSquads(ctx)
}
func (ic *InternalSquadsClient) UpdateInternalSquad(ctx context.Context, request *UpdateInternalSquadRequest) (InternalSquadControllerUpdateInternalSquadRes, error) {
	return ic.client.InternalSquadControllerUpdateInternalSquad(ctx, request)
}
func (ic *InternalSquadsClient) CreateInternalSquad(ctx context.Context, request *CreateInternalSquadRequest) (InternalSquadControllerCreateInternalSquadRes, error) {
	return ic.client.InternalSquadControllerCreateInternalSquad(ctx, request)
}
func (ic *InternalSquadsClient) DeleteInternalSquad(ctx context.Context, params InternalSquadControllerDeleteInternalSquadParams) (InternalSquadControllerDeleteInternalSquadRes, error) {
	return ic.client.InternalSquadControllerDeleteInternalSquad(ctx, params)
}
func (ic *InternalSquadsClient) GetInternalSquadByUuid(ctx context.Context, params InternalSquadControllerGetInternalSquadByUuidParams) (InternalSquadControllerGetInternalSquadByUuidRes, error) {
	return ic.client.InternalSquadControllerGetInternalSquadByUuid(ctx, params)
}
func (ic *InternalSquadsClient) GetInternalSquadAccessibleNodes(ctx context.Context, params InternalSquadControllerGetInternalSquadAccessibleNodesParams) (InternalSquadControllerGetInternalSquadAccessibleNodesRes, error) {
	return ic.client.InternalSquadControllerGetInternalSquadAccessibleNodes(ctx, params)
}
func (ic *InternalSquadsClient) AddUsersToInternalSquad(ctx context.Context, params InternalSquadControllerAddUsersToInternalSquadParams) (InternalSquadControllerAddUsersToInternalSquadRes, error) {
	return ic.client.InternalSquadControllerAddUsersToInternalSquad(ctx, params)
}
func (ic *InternalSquadsClient) RemoveUsersFromInternalSquad(ctx context.Context, params InternalSquadControllerRemoveUsersFromInternalSquadParams) (InternalSquadControllerRemoveUsersFromInternalSquadRes, error) {
	return ic.client.InternalSquadControllerRemoveUsersFromInternalSquad(ctx, params)
}

// KeygenClient - 1 operation
type KeygenClient struct{ client *Client }
func NewKeygenClient(c *Client) *KeygenClient { return &KeygenClient{client: c} }

func (kc *KeygenClient) GenerateKey(ctx context.Context) (KeygenControllerGenerateKeyRes, error) {
	return kc.client.KeygenControllerGenerateKey(ctx)
}

// NodesClient - 10 operations
type NodesClient struct{ client *Client }
func NewNodesClient(c *Client) *NodesClient { return &NodesClient{client: c} }

func (nc *NodesClient) GetAllNodes(ctx context.Context) (NodesControllerGetAllNodesRes, error) {
	return nc.client.NodesControllerGetAllNodes(ctx)
}
func (nc *NodesClient) UpdateNode(ctx context.Context, request *UpdateNodeRequest) (NodesControllerUpdateNodeRes, error) {
	return nc.client.NodesControllerUpdateNode(ctx, request)
}
func (nc *NodesClient) CreateNode(ctx context.Context, request *CreateNodeRequest) (NodesControllerCreateNodeRes, error) {
	return nc.client.NodesControllerCreateNode(ctx, request)
}
func (nc *NodesClient) ReorderNodes(ctx context.Context, request *ReorderRequest) (NodesControllerReorderNodesRes, error) {
	return nc.client.NodesControllerReorderNodes(ctx, request)
}
func (nc *NodesClient) RestartAllNodes(ctx context.Context, request *RestartAllNodesRequest) (NodesControllerRestartAllNodesRes, error) {
	return nc.client.NodesControllerRestartAllNodes(ctx, request)
}
func (nc *NodesClient) DeleteNode(ctx context.Context, params NodesControllerDeleteNodeParams) (NodesControllerDeleteNodeRes, error) {
	return nc.client.NodesControllerDeleteNode(ctx, params)
}
func (nc *NodesClient) GetOneNode(ctx context.Context, params NodesControllerGetOneNodeParams) (NodesControllerGetOneNodeRes, error) {
	return nc.client.NodesControllerGetOneNode(ctx, params)
}
func (nc *NodesClient) DisableNode(ctx context.Context, params NodesControllerDisableNodeParams) (NodesControllerDisableNodeRes, error) {
	return nc.client.NodesControllerDisableNode(ctx, params)
}
func (nc *NodesClient) EnableNode(ctx context.Context, params NodesControllerEnableNodeParams) (NodesControllerEnableNodeRes, error) {
	return nc.client.NodesControllerEnableNode(ctx, params)
}
func (nc *NodesClient) RestartNode(ctx context.Context, params NodesControllerRestartNodeParams) (NodesControllerRestartNodeRes, error) {
	return nc.client.NodesControllerRestartNode(ctx, params)
}

// PasskeysClient - 4 operations
type PasskeysClient struct{ client *Client }
func NewPasskeysClient(c *Client) *PasskeysClient { return &PasskeysClient{client: c} }

func (pc *PasskeysClient) DeletePasskey(ctx context.Context) (PasskeyControllerDeletePasskeyRes, error) {
	return pc.client.PasskeyControllerDeletePasskey(ctx)
}
func (pc *PasskeysClient) GetActivePasskeys(ctx context.Context) (PasskeyControllerGetActivePasskeysRes, error) {
	return pc.client.PasskeyControllerGetActivePasskeys(ctx)
}
func (pc *PasskeysClient) PasskeyRegistrationOptions(ctx context.Context) (PasskeyControllerPasskeyRegistrationOptionsRes, error) {
	return pc.client.PasskeyControllerPasskeyRegistrationOptions(ctx)
}
func (pc *PasskeysClient) PasskeyRegistrationVerify(ctx context.Context, request *VerifyPasskeyRegistrationRequest) (PasskeyControllerPasskeyRegistrationVerifyRes, error) {
	return pc.client.PasskeyControllerPasskeyRegistrationVerify(ctx, request)
}

// RemnawaveSettingsClient - 2 operations
type RemnawaveSettingsClient struct{ client *Client }
func NewRemnawaveSettingsClient(c *Client) *RemnawaveSettingsClient { return &RemnawaveSettingsClient{client: c} }

func (rc *RemnawaveSettingsClient) GetSettings(ctx context.Context) (RemnawaveSettingsControllerGetSettingsRes, error) {
	return rc.client.RemnawaveSettingsControllerGetSettings(ctx)
}
func (rc *RemnawaveSettingsClient) UpdateSettings(ctx context.Context, request *UpdateRemnawaveSettingsRequest) (RemnawaveSettingsControllerUpdateSettingsRes, error) {
	return rc.client.RemnawaveSettingsControllerUpdateSettings(ctx, request)
}

// SnippetsClient - 4 operations
type SnippetsClient struct{ client *Client }
func NewSnippetsClient(c *Client) *SnippetsClient { return &SnippetsClient{client: c} }

func (sc *SnippetsClient) DeleteSnippetByName(ctx context.Context) (SnippetsControllerDeleteSnippetByNameRes, error) {
	return sc.client.SnippetsControllerDeleteSnippetByName(ctx)
}
func (sc *SnippetsClient) GetSnippets(ctx context.Context) (SnippetsControllerGetSnippetsRes, error) {
	return sc.client.SnippetsControllerGetSnippets(ctx)
}
func (sc *SnippetsClient) UpdateSnippet(ctx context.Context, request *UpdateSnippetRequest) (SnippetsControllerUpdateSnippetRes, error) {
	return sc.client.SnippetsControllerUpdateSnippet(ctx, request)
}
func (sc *SnippetsClient) CreateSnippet(ctx context.Context, request *CreateSnippetRequest) (SnippetsControllerCreateSnippetRes, error) {
	return sc.client.SnippetsControllerCreateSnippet(ctx, request)
}

// SubscriptionRequestHistoryClient - 2 operations
type SubscriptionRequestHistoryClient struct{ client *Client }
func NewSubscriptionRequestHistoryClient(c *Client) *SubscriptionRequestHistoryClient { return &SubscriptionRequestHistoryClient{client: c} }

func (src *SubscriptionRequestHistoryClient) GetSubscriptionRequestHistory(ctx context.Context) (UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryRes, error) {
	return src.client.UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistory(ctx)
}
func (src *SubscriptionRequestHistoryClient) GetSubscriptionRequestHistoryStats(ctx context.Context) (UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsRes, error) {
	return src.client.UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStats(ctx)
}

// SubscriptionSettingsClient - 2 operations
type SubscriptionSettingsClient struct{ client *Client }
func NewSubscriptionSettingsClient(c *Client) *SubscriptionSettingsClient { return &SubscriptionSettingsClient{client: c} }

func (ssc *SubscriptionSettingsClient) GetSettings(ctx context.Context) (SubscriptionSettingsControllerGetSettingsRes, error) {
	return ssc.client.SubscriptionSettingsControllerGetSettings(ctx)
}
func (ssc *SubscriptionSettingsClient) UpdateSettings(ctx context.Context, request *UpdateSubscriptionSettingsRequest) (SubscriptionSettingsControllerUpdateSettingsRes, error) {
	return ssc.client.SubscriptionSettingsControllerUpdateSettings(ctx, request)
}

// SubscriptionTemplateClient - 5 operations
type SubscriptionTemplateClient struct{ client *Client }
func NewSubscriptionTemplateClient(c *Client) *SubscriptionTemplateClient { return &SubscriptionTemplateClient{client: c} }

func (stc *SubscriptionTemplateClient) GetAllTemplates(ctx context.Context) (SubscriptionTemplateControllerGetAllTemplatesRes, error) {
	return stc.client.SubscriptionTemplateControllerGetAllTemplates(ctx)
}
func (stc *SubscriptionTemplateClient) UpdateTemplate(ctx context.Context, request *UpdateTemplateRequest) (SubscriptionTemplateControllerUpdateTemplateRes, error) {
	return stc.client.SubscriptionTemplateControllerUpdateTemplate(ctx, request)
}
func (stc *SubscriptionTemplateClient) CreateTemplate(ctx context.Context, request *CreateTemplateRequest) (SubscriptionTemplateControllerCreateTemplateRes, error) {
	return stc.client.SubscriptionTemplateControllerCreateTemplate(ctx, request)
}
func (stc *SubscriptionTemplateClient) DeleteTemplate(ctx context.Context, params SubscriptionTemplateControllerDeleteTemplateParams) (SubscriptionTemplateControllerDeleteTemplateRes, error) {
	return stc.client.SubscriptionTemplateControllerDeleteTemplate(ctx, params)
}
func (stc *SubscriptionTemplateClient) GetTemplateByUuid(ctx context.Context, params SubscriptionTemplateControllerGetTemplateByUuidParams) (SubscriptionTemplateControllerGetTemplateByUuidRes, error) {
	return stc.client.SubscriptionTemplateControllerGetTemplateByUuid(ctx, params)
}

// SystemClient - 8 operations
type SystemClient struct{ client *Client }
func NewSystemClient(c *Client) *SystemClient { return &SystemClient{client: c} }

func (syc *SystemClient) GetRemnawaveHealth(ctx context.Context) (SystemControllerGetRemnawaveHealthRes, error) {
	return syc.client.SystemControllerGetRemnawaveHealth(ctx)
}
func (syc *SystemClient) GetNodesMetrics(ctx context.Context) (SystemControllerGetNodesMetricsRes, error) {
	return syc.client.SystemControllerGetNodesMetrics(ctx)
}
func (syc *SystemClient) GetStats(ctx context.Context) (SystemControllerGetStatsRes, error) {
	return syc.client.SystemControllerGetStats(ctx)
}
func (syc *SystemClient) GetBandwidthStats(ctx context.Context) (SystemControllerGetBandwidthStatsRes, error) {
	return syc.client.SystemControllerGetBandwidthStats(ctx)
}
func (syc *SystemClient) GetNodesStatistics(ctx context.Context) (SystemControllerGetNodesStatisticsRes, error) {
	return syc.client.SystemControllerGetNodesStatistics(ctx)
}
func (syc *SystemClient) DebugSrrMatcher(ctx context.Context, request *DebugSrrMatcherRequest) (SystemControllerDebugSrrMatcherRes, error) {
	return syc.client.SystemControllerDebugSrrMatcher(ctx, request)
}
func (syc *SystemClient) EncryptHappCryptoLink(ctx context.Context, request *EncryptHappCryptoLinkRequest) (SystemControllerEncryptHappCryptoLinkRes, error) {
	return syc.client.SystemControllerEncryptHappCryptoLink(ctx, request)
}
func (syc *SystemClient) GetX25519Keypairs(ctx context.Context) (SystemControllerGetX25519KeypairsRes, error) {
	return syc.client.SystemControllerGetX25519Keypairs(ctx)
}

// UsersBulkActionsClient - 8 operations
type UsersBulkActionsClient struct{ client *Client }
func NewUsersBulkActionsClient(c *Client) *UsersBulkActionsClient { return &UsersBulkActionsClient{client: c} }

func (ubc *UsersBulkActionsClient) BulkAllResetUserTraffic(ctx context.Context, request *BulkAllResetUserTrafficRequest) (UsersBulkActionsControllerBulkAllResetUserTrafficRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkAllResetUserTraffic(ctx, request)
}
func (ubc *UsersBulkActionsClient) BulkUpdateAllUsers(ctx context.Context, request *BulkUpdateAllUsersRequest) (UsersBulkActionsControllerBulkUpdateAllUsersRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkUpdateAllUsers(ctx, request)
}
func (ubc *UsersBulkActionsClient) BulkDeleteUsers(ctx context.Context, request *BulkUuidsRequest) (UsersBulkActionsControllerBulkDeleteUsersRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkDeleteUsers(ctx, request)
}
func (ubc *UsersBulkActionsClient) BulkDeleteUsersByStatus(ctx context.Context, request *BulkDeleteUsersByStatusRequest) (UsersBulkActionsControllerBulkDeleteUsersByStatusRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkDeleteUsersByStatus(ctx, request)
}
func (ubc *UsersBulkActionsClient) BulkResetUserTraffic(ctx context.Context, request *BulkUuidsRequest) (UsersBulkActionsControllerBulkResetUserTrafficRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkResetUserTraffic(ctx, request)
}
func (ubc *UsersBulkActionsClient) BulkRevokeUsersSubscription(ctx context.Context, request *BulkUuidsRequest) (UsersBulkActionsControllerBulkRevokeUsersSubscriptionRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkRevokeUsersSubscription(ctx, request)
}
func (ubc *UsersBulkActionsClient) BulkUpdateUsers(ctx context.Context, request *BulkUpdateUsersRequest) (UsersBulkActionsControllerBulkUpdateUsersRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkUpdateUsers(ctx, request)
}
func (ubc *UsersBulkActionsClient) BulkUpdateUsersInternalSquads(ctx context.Context, request *BulkUpdateUsersInternalSquadsRequest) (UsersBulkActionsControllerBulkUpdateUsersInternalSquadsRes, error) {
	return ubc.client.UsersBulkActionsControllerBulkUpdateUsersInternalSquads(ctx, request)
}

// UsersClient - 17 operations
type UsersClient struct{ client *Client }
func NewUsersClient(c *Client) *UsersClient { return &UsersClient{client: c} }

func (uc *UsersClient) GetAllUsers(ctx context.Context) (UsersControllerGetAllUsersRes, error) {
	return uc.client.UsersControllerGetAllUsers(ctx)
}
func (uc *UsersClient) UpdateUser(ctx context.Context, request *UpdateUserRequest) (UsersControllerUpdateUserRes, error) {
	return uc.client.UsersControllerUpdateUser(ctx, request)
}
func (uc *UsersClient) CreateUser(ctx context.Context, request *CreateUserRequest) (UsersControllerCreateUserRes, error) {
	return uc.client.UsersControllerCreateUser(ctx, request)
}
func (uc *UsersClient) GetUsersByEmail(ctx context.Context, params UsersControllerGetUsersByEmailParams) (UsersControllerGetUsersByEmailRes, error) {
	return uc.client.UsersControllerGetUsersByEmail(ctx, params)
}
func (uc *UsersClient) GetUserByShortUuid(ctx context.Context, params UsersControllerGetUserByShortUuidParams) (UsersControllerGetUserByShortUuidRes, error) {
	return uc.client.UsersControllerGetUserByShortUuid(ctx, params)
}
func (uc *UsersClient) GetUsersByTag(ctx context.Context, params UsersControllerGetUsersByTagParams) (UsersControllerGetUsersByTagRes, error) {
	return uc.client.UsersControllerGetUsersByTag(ctx, params)
}
func (uc *UsersClient) GetUserByTelegramId(ctx context.Context, params UsersControllerGetUserByTelegramIdParams) (UsersControllerGetUserByTelegramIdRes, error) {
	return uc.client.UsersControllerGetUserByTelegramId(ctx, params)
}
func (uc *UsersClient) GetUserByUsername(ctx context.Context, params UsersControllerGetUserByUsernameParams) (UsersControllerGetUserByUsernameRes, error) {
	return uc.client.UsersControllerGetUserByUsername(ctx, params)
}
func (uc *UsersClient) GetAllTags(ctx context.Context) (UsersControllerGetAllTagsRes, error) {
	return uc.client.UsersControllerGetAllTags(ctx)
}
func (uc *UsersClient) DeleteUser(ctx context.Context, params UsersControllerDeleteUserParams) (UsersControllerDeleteUserRes, error) {
	return uc.client.UsersControllerDeleteUser(ctx, params)
}
func (uc *UsersClient) GetUserByUuid(ctx context.Context, params UsersControllerGetUserByUuidParams) (UsersControllerGetUserByUuidRes, error) {
	return uc.client.UsersControllerGetUserByUuid(ctx, params)
}
func (uc *UsersClient) GetUserAccessibleNodes(ctx context.Context, params UsersControllerGetUserAccessibleNodesParams) (UsersControllerGetUserAccessibleNodesRes, error) {
	return uc.client.UsersControllerGetUserAccessibleNodes(ctx, params)
}
func (uc *UsersClient) DisableUser(ctx context.Context, params UsersControllerDisableUserParams) (UsersControllerDisableUserRes, error) {
	return uc.client.UsersControllerDisableUser(ctx, params)
}
func (uc *UsersClient) EnableUser(ctx context.Context, params UsersControllerEnableUserParams) (UsersControllerEnableUserRes, error) {
	return uc.client.UsersControllerEnableUser(ctx, params)
}
func (uc *UsersClient) ResetUserTraffic(ctx context.Context, params UsersControllerResetUserTrafficParams) (UsersControllerResetUserTrafficRes, error) {
	return uc.client.UsersControllerResetUserTraffic(ctx, params)
}
func (uc *UsersClient) RevokeUserSubscription(ctx context.Context, params UsersControllerRevokeUserSubscriptionParams) (UsersControllerRevokeUserSubscriptionRes, error) {
	return uc.client.UsersControllerRevokeUserSubscription(ctx, params)
}
func (uc *UsersClient) GetUserSubscriptionRequestHistory(ctx context.Context, params UsersControllerGetUserSubscriptionRequestHistoryParams) (UsersControllerGetUserSubscriptionRequestHistoryRes, error) {
	return uc.client.UsersControllerGetUserSubscriptionRequestHistory(ctx, params)
}

// UsersStatsClient - 1 operation
type UsersStatsClient struct{ client *Client }
func NewUsersStatsClient(c *Client) *UsersStatsClient { return &UsersStatsClient{client: c} }

func (usc *UsersStatsClient) GetUserUsageByRange(ctx context.Context, params UsersStatsControllerGetUserUsageByRangeParams) (UsersStatsControllerGetUserUsageByRangeRes, error) {
	return usc.client.UsersStatsControllerGetUserUsageByRange(ctx, params)
}

// ProtectedSubscriptionsClient - 5 operations
type ProtectedSubscriptionsClient struct{ client *Client }
func NewProtectedSubscriptionsClient(c *Client) *ProtectedSubscriptionsClient { return &ProtectedSubscriptionsClient{client: c} }

func (psc *ProtectedSubscriptionsClient) GetAllSubscriptions(ctx context.Context) (SubscriptionsControllerGetAllSubscriptionsRes, error) {
	return psc.client.SubscriptionsControllerGetAllSubscriptions(ctx)
}
func (psc *ProtectedSubscriptionsClient) GetSubscriptionByShortUuidProtected(ctx context.Context, params SubscriptionsControllerGetSubscriptionByShortUuidProtectedParams) (SubscriptionsControllerGetSubscriptionByShortUuidProtectedRes, error) {
	return psc.client.SubscriptionsControllerGetSubscriptionByShortUuidProtected(ctx, params)
}
func (psc *ProtectedSubscriptionsClient) GetRawSubscriptionByShortUuid(ctx context.Context, params SubscriptionsControllerGetRawSubscriptionByShortUuidParams) (SubscriptionsControllerGetRawSubscriptionByShortUuidRes, error) {
	return psc.client.SubscriptionsControllerGetRawSubscriptionByShortUuid(ctx, params)
}
func (psc *ProtectedSubscriptionsClient) GetSubscriptionByUsername(ctx context.Context, params SubscriptionsControllerGetSubscriptionByUsernameParams) (SubscriptionsControllerGetSubscriptionByUsernameRes, error) {
	return psc.client.SubscriptionsControllerGetSubscriptionByUsername(ctx, params)
}
func (psc *ProtectedSubscriptionsClient) GetSubscriptionByUuid(ctx context.Context, params SubscriptionsControllerGetSubscriptionByUuidParams) (SubscriptionsControllerGetSubscriptionByUuidRes, error) {
	return psc.client.SubscriptionsControllerGetSubscriptionByUuid(ctx, params)
}

// PublicSubscriptionClient - 4 operations
type PublicSubscriptionClient struct{ client *Client }
func NewPublicSubscriptionClient(c *Client) *PublicSubscriptionClient { return &PublicSubscriptionClient{client: c} }

func (psc *PublicSubscriptionClient) GetSubscriptionWithType(ctx context.Context, params SubscriptionControllerGetSubscriptionWithTypeParams) (SubscriptionControllerGetSubscriptionWithTypeRes, error) {
	return psc.client.SubscriptionControllerGetSubscriptionWithType(ctx, params)
}
func (psc *PublicSubscriptionClient) GetSubscription(ctx context.Context, params SubscriptionControllerGetSubscriptionParams) (SubscriptionControllerGetSubscriptionRes, error) {
	return psc.client.SubscriptionControllerGetSubscription(ctx, params)
}
func (psc *PublicSubscriptionClient) GetSubscriptionInfoByShortUuid(ctx context.Context, params SubscriptionControllerGetSubscriptionInfoByShortUuidParams) (SubscriptionControllerGetSubscriptionInfoByShortUuidRes, error) {
	return psc.client.SubscriptionControllerGetSubscriptionInfoByShortUuid(ctx, params)
}
func (psc *PublicSubscriptionClient) GetSubscriptionByClientType(ctx context.Context, params SubscriptionControllerGetSubscriptionByClientTypeParams) (SubscriptionControllerGetSubscriptionByClientTypeRes, error) {
	return psc.client.SubscriptionControllerGetSubscriptionByClientType(ctx, params)
}
