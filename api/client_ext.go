// Code generated by pipeline.py. DO NOT EDIT manually.

package api

import "context"

// ClientExt wraps the base Client with organized sub-client access.
type ClientExt struct {
	*Client
	apiTokens *ApiTokensClient
	auth *AuthClient
	configProfile *ConfigProfileClient
	externalSquad *ExternalSquadClient
	hosts *HostsClient
	hostsBulkActions *HostsBulkActionsClient
	hwidUserDevices *HwidUserDevicesClient
	infraBilling *InfraBillingClient
	internalSquad *InternalSquadClient
	keygen *KeygenClient
	nodes *NodesClient
	nodesUsageHistory *NodesUsageHistoryClient
	nodesUserUsageHistory *NodesUserUsageHistoryClient
	passkey *PasskeyClient
	remnawaveSettings *RemnawaveSettingsClient
	snippets *SnippetsClient
	subscription *SubscriptionClient
	subscriptionSettings *SubscriptionSettingsClient
	subscriptionTemplate *SubscriptionTemplateClient
	subscriptions *SubscriptionsClient
	system *SystemClient
	userSubscriptionRequestHistory *UserSubscriptionRequestHistoryClient
	users *UsersClient
	usersBulkActions *UsersBulkActionsClient
	usersStats *UsersStatsClient
}

// NewClientExt creates a new ClientExt wrapper.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client: client,
		apiTokens: NewApiTokensClient(client),
		auth: NewAuthClient(client),
		configProfile: NewConfigProfileClient(client),
		externalSquad: NewExternalSquadClient(client),
		hosts: NewHostsClient(client),
		hostsBulkActions: NewHostsBulkActionsClient(client),
		hwidUserDevices: NewHwidUserDevicesClient(client),
		infraBilling: NewInfraBillingClient(client),
		internalSquad: NewInternalSquadClient(client),
		keygen: NewKeygenClient(client),
		nodes: NewNodesClient(client),
		nodesUsageHistory: NewNodesUsageHistoryClient(client),
		nodesUserUsageHistory: NewNodesUserUsageHistoryClient(client),
		passkey: NewPasskeyClient(client),
		remnawaveSettings: NewRemnawaveSettingsClient(client),
		snippets: NewSnippetsClient(client),
		subscription: NewSubscriptionClient(client),
		subscriptionSettings: NewSubscriptionSettingsClient(client),
		subscriptionTemplate: NewSubscriptionTemplateClient(client),
		subscriptions: NewSubscriptionsClient(client),
		system: NewSystemClient(client),
		userSubscriptionRequestHistory: NewUserSubscriptionRequestHistoryClient(client),
		users: NewUsersClient(client),
		usersBulkActions: NewUsersBulkActionsClient(client),
		usersStats: NewUsersStatsClient(client),
	}
}

// ApiTokens returns the ApiTokensClient.
func (ce *ClientExt) ApiTokens() *ApiTokensClient {
	return ce.apiTokens
}

// Auth returns the AuthClient.
func (ce *ClientExt) Auth() *AuthClient {
	return ce.auth
}

// ConfigProfile returns the ConfigProfileClient.
func (ce *ClientExt) ConfigProfile() *ConfigProfileClient {
	return ce.configProfile
}

// ExternalSquad returns the ExternalSquadClient.
func (ce *ClientExt) ExternalSquad() *ExternalSquadClient {
	return ce.externalSquad
}

// Hosts returns the HostsClient.
func (ce *ClientExt) Hosts() *HostsClient {
	return ce.hosts
}

// HostsBulkActions returns the HostsBulkActionsClient.
func (ce *ClientExt) HostsBulkActions() *HostsBulkActionsClient {
	return ce.hostsBulkActions
}

// HwidUserDevices returns the HwidUserDevicesClient.
func (ce *ClientExt) HwidUserDevices() *HwidUserDevicesClient {
	return ce.hwidUserDevices
}

// InfraBilling returns the InfraBillingClient.
func (ce *ClientExt) InfraBilling() *InfraBillingClient {
	return ce.infraBilling
}

// InternalSquad returns the InternalSquadClient.
func (ce *ClientExt) InternalSquad() *InternalSquadClient {
	return ce.internalSquad
}

// Keygen returns the KeygenClient.
func (ce *ClientExt) Keygen() *KeygenClient {
	return ce.keygen
}

// Nodes returns the NodesClient.
func (ce *ClientExt) Nodes() *NodesClient {
	return ce.nodes
}

// NodesUsageHistory returns the NodesUsageHistoryClient.
func (ce *ClientExt) NodesUsageHistory() *NodesUsageHistoryClient {
	return ce.nodesUsageHistory
}

// NodesUserUsageHistory returns the NodesUserUsageHistoryClient.
func (ce *ClientExt) NodesUserUsageHistory() *NodesUserUsageHistoryClient {
	return ce.nodesUserUsageHistory
}

// Passkey returns the PasskeyClient.
func (ce *ClientExt) Passkey() *PasskeyClient {
	return ce.passkey
}

// RemnawaveSettings returns the RemnawaveSettingsClient.
func (ce *ClientExt) RemnawaveSettings() *RemnawaveSettingsClient {
	return ce.remnawaveSettings
}

// Snippets returns the SnippetsClient.
func (ce *ClientExt) Snippets() *SnippetsClient {
	return ce.snippets
}

// Subscription returns the SubscriptionClient.
func (ce *ClientExt) Subscription() *SubscriptionClient {
	return ce.subscription
}

// SubscriptionSettings returns the SubscriptionSettingsClient.
func (ce *ClientExt) SubscriptionSettings() *SubscriptionSettingsClient {
	return ce.subscriptionSettings
}

// SubscriptionTemplate returns the SubscriptionTemplateClient.
func (ce *ClientExt) SubscriptionTemplate() *SubscriptionTemplateClient {
	return ce.subscriptionTemplate
}

// Subscriptions returns the SubscriptionsClient.
func (ce *ClientExt) Subscriptions() *SubscriptionsClient {
	return ce.subscriptions
}

// System returns the SystemClient.
func (ce *ClientExt) System() *SystemClient {
	return ce.system
}

// UserSubscriptionRequestHistory returns the UserSubscriptionRequestHistoryClient.
func (ce *ClientExt) UserSubscriptionRequestHistory() *UserSubscriptionRequestHistoryClient {
	return ce.userSubscriptionRequestHistory
}

// Users returns the UsersClient.
func (ce *ClientExt) Users() *UsersClient {
	return ce.users
}

// UsersBulkActions returns the UsersBulkActionsClient.
func (ce *ClientExt) UsersBulkActions() *UsersBulkActionsClient {
	return ce.usersBulkActions
}

// UsersStats returns the UsersStatsClient.
func (ce *ClientExt) UsersStats() *UsersStatsClient {
	return ce.usersStats
}

// ApiTokensClient provides ApiTokens operations.
type ApiTokensClient struct {
	client *Client
}

// NewApiTokensClient creates a new ApiTokensClient.
func NewApiTokensClient(client *Client) *ApiTokensClient {
	return &ApiTokensClient{client: client}
}

// Create calls ApiTokensController_create.
func (sc *ApiTokensClient) Create(ctx context.Context, request *CreateApiTokenRequestDto) (ApiTokensControllerCreateRes, error) {
	return sc.client.ApiTokensControllerCreate(ctx, request)
}

// Delete calls ApiTokensController_delete.
func (sc *ApiTokensClient) Delete(ctx context.Context, params ApiTokensControllerDeleteParams) (ApiTokensControllerDeleteRes, error) {
	return sc.client.ApiTokensControllerDelete(ctx, params)
}

// FindAll calls ApiTokensController_findAll.
func (sc *ApiTokensClient) FindAll(ctx context.Context) (ApiTokensControllerFindAllRes, error) {
	return sc.client.ApiTokensControllerFindAll(ctx)
}

// AuthClient provides Auth operations.
type AuthClient struct {
	client *Client
}

// NewAuthClient creates a new AuthClient.
func NewAuthClient(client *Client) *AuthClient {
	return &AuthClient{client: client}
}

// GetStatus calls AuthController_getStatus.
func (sc *AuthClient) GetStatus(ctx context.Context) (AuthControllerGetStatusRes, error) {
	return sc.client.AuthControllerGetStatus(ctx)
}

// Login calls AuthController_login.
func (sc *AuthClient) Login(ctx context.Context, request *LoginRequestDto) (AuthControllerLoginRes, error) {
	return sc.client.AuthControllerLogin(ctx, request)
}

// Oauth2Authorize calls AuthController_oauth2Authorize.
func (sc *AuthClient) Oauth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequestDto) (AuthControllerOauth2AuthorizeRes, error) {
	return sc.client.AuthControllerOauth2Authorize(ctx, request)
}

// Oauth2Callback calls AuthController_oauth2Callback.
func (sc *AuthClient) Oauth2Callback(ctx context.Context, request *OAuth2CallbackRequestDto) (AuthControllerOauth2CallbackRes, error) {
	return sc.client.AuthControllerOauth2Callback(ctx, request)
}

// PasskeyAuthenticationOptions calls AuthController_passkeyAuthenticationOptions.
func (sc *AuthClient) PasskeyAuthenticationOptions(ctx context.Context) (AuthControllerPasskeyAuthenticationOptionsRes, error) {
	return sc.client.AuthControllerPasskeyAuthenticationOptions(ctx)
}

// PasskeyAuthenticationVerify calls AuthController_passkeyAuthenticationVerify.
func (sc *AuthClient) PasskeyAuthenticationVerify(ctx context.Context, request *VerifyPasskeyAuthenticationRequestDto) (AuthControllerPasskeyAuthenticationVerifyRes, error) {
	return sc.client.AuthControllerPasskeyAuthenticationVerify(ctx, request)
}

// Register calls AuthController_register.
func (sc *AuthClient) Register(ctx context.Context, request *RegisterRequestDto) (AuthControllerRegisterRes, error) {
	return sc.client.AuthControllerRegister(ctx, request)
}

// TelegramCallback calls AuthController_telegramCallback.
func (sc *AuthClient) TelegramCallback(ctx context.Context, request *TelegramCallbackRequestDto) (AuthControllerTelegramCallbackRes, error) {
	return sc.client.AuthControllerTelegramCallback(ctx, request)
}

// ConfigProfileClient provides ConfigProfile operations.
type ConfigProfileClient struct {
	client *Client
}

// NewConfigProfileClient creates a new ConfigProfileClient.
func NewConfigProfileClient(client *Client) *ConfigProfileClient {
	return &ConfigProfileClient{client: client}
}

// CreateConfigProfile calls ConfigProfileController_createConfigProfile.
func (sc *ConfigProfileClient) CreateConfigProfile(ctx context.Context, request *CreateConfigProfileRequestDto) (ConfigProfileControllerCreateConfigProfileRes, error) {
	return sc.client.ConfigProfileControllerCreateConfigProfile(ctx, request)
}

// DeleteConfigProfileByUuid calls ConfigProfileController_deleteConfigProfileByUuid.
func (sc *ConfigProfileClient) DeleteConfigProfileByUuid(ctx context.Context, params ConfigProfileControllerDeleteConfigProfileByUuidParams) (ConfigProfileControllerDeleteConfigProfileByUuidRes, error) {
	return sc.client.ConfigProfileControllerDeleteConfigProfileByUuid(ctx, params)
}

// GetAllInbounds calls ConfigProfileController_getAllInbounds.
func (sc *ConfigProfileClient) GetAllInbounds(ctx context.Context) (ConfigProfileControllerGetAllInboundsRes, error) {
	return sc.client.ConfigProfileControllerGetAllInbounds(ctx)
}

// GetConfigProfileByUuid calls ConfigProfileController_getConfigProfileByUuid.
func (sc *ConfigProfileClient) GetConfigProfileByUuid(ctx context.Context, params ConfigProfileControllerGetConfigProfileByUuidParams) (ConfigProfileControllerGetConfigProfileByUuidRes, error) {
	return sc.client.ConfigProfileControllerGetConfigProfileByUuid(ctx, params)
}

// GetConfigProfiles calls ConfigProfileController_getConfigProfiles.
func (sc *ConfigProfileClient) GetConfigProfiles(ctx context.Context) (ConfigProfileControllerGetConfigProfilesRes, error) {
	return sc.client.ConfigProfileControllerGetConfigProfiles(ctx)
}

// GetInboundsByProfileUuid calls ConfigProfileController_getInboundsByProfileUuid.
func (sc *ConfigProfileClient) GetInboundsByProfileUuid(ctx context.Context, params ConfigProfileControllerGetInboundsByProfileUuidParams) (ConfigProfileControllerGetInboundsByProfileUuidRes, error) {
	return sc.client.ConfigProfileControllerGetInboundsByProfileUuid(ctx, params)
}

// UpdateConfigProfile calls ConfigProfileController_updateConfigProfile.
func (sc *ConfigProfileClient) UpdateConfigProfile(ctx context.Context, request *UpdateConfigProfileRequestDto) (ConfigProfileControllerUpdateConfigProfileRes, error) {
	return sc.client.ConfigProfileControllerUpdateConfigProfile(ctx, request)
}

// ExternalSquadClient provides ExternalSquad operations.
type ExternalSquadClient struct {
	client *Client
}

// NewExternalSquadClient creates a new ExternalSquadClient.
func NewExternalSquadClient(client *Client) *ExternalSquadClient {
	return &ExternalSquadClient{client: client}
}

// AddUsersToExternalSquad calls ExternalSquadController_addUsersToExternalSquad.
func (sc *ExternalSquadClient) AddUsersToExternalSquad(ctx context.Context, params ExternalSquadControllerAddUsersToExternalSquadParams) (ExternalSquadControllerAddUsersToExternalSquadRes, error) {
	return sc.client.ExternalSquadControllerAddUsersToExternalSquad(ctx, params)
}

// CreateExternalSquad calls ExternalSquadController_createExternalSquad.
func (sc *ExternalSquadClient) CreateExternalSquad(ctx context.Context, request *CreateExternalSquadRequestDto) (ExternalSquadControllerCreateExternalSquadRes, error) {
	return sc.client.ExternalSquadControllerCreateExternalSquad(ctx, request)
}

// DeleteExternalSquad calls ExternalSquadController_deleteExternalSquad.
func (sc *ExternalSquadClient) DeleteExternalSquad(ctx context.Context, params ExternalSquadControllerDeleteExternalSquadParams) (ExternalSquadControllerDeleteExternalSquadRes, error) {
	return sc.client.ExternalSquadControllerDeleteExternalSquad(ctx, params)
}

// GetExternalSquadByUuid calls ExternalSquadController_getExternalSquadByUuid.
func (sc *ExternalSquadClient) GetExternalSquadByUuid(ctx context.Context, params ExternalSquadControllerGetExternalSquadByUuidParams) (ExternalSquadControllerGetExternalSquadByUuidRes, error) {
	return sc.client.ExternalSquadControllerGetExternalSquadByUuid(ctx, params)
}

// GetExternalSquads calls ExternalSquadController_getExternalSquads.
func (sc *ExternalSquadClient) GetExternalSquads(ctx context.Context) (ExternalSquadControllerGetExternalSquadsRes, error) {
	return sc.client.ExternalSquadControllerGetExternalSquads(ctx)
}

// RemoveUsersFromExternalSquad calls ExternalSquadController_removeUsersFromExternalSquad.
func (sc *ExternalSquadClient) RemoveUsersFromExternalSquad(ctx context.Context, params ExternalSquadControllerRemoveUsersFromExternalSquadParams) (ExternalSquadControllerRemoveUsersFromExternalSquadRes, error) {
	return sc.client.ExternalSquadControllerRemoveUsersFromExternalSquad(ctx, params)
}

// UpdateExternalSquad calls ExternalSquadController_updateExternalSquad.
func (sc *ExternalSquadClient) UpdateExternalSquad(ctx context.Context, request *UpdateExternalSquadRequestDto) (ExternalSquadControllerUpdateExternalSquadRes, error) {
	return sc.client.ExternalSquadControllerUpdateExternalSquad(ctx, request)
}

// HostsClient provides Hosts operations.
type HostsClient struct {
	client *Client
}

// NewHostsClient creates a new HostsClient.
func NewHostsClient(client *Client) *HostsClient {
	return &HostsClient{client: client}
}

// CreateHost calls HostsController_createHost.
func (sc *HostsClient) CreateHost(ctx context.Context, request *CreateHostRequestDto) (HostsControllerCreateHostRes, error) {
	return sc.client.HostsControllerCreateHost(ctx, request)
}

// DeleteHost calls HostsController_deleteHost.
func (sc *HostsClient) DeleteHost(ctx context.Context, params HostsControllerDeleteHostParams) (HostsControllerDeleteHostRes, error) {
	return sc.client.HostsControllerDeleteHost(ctx, params)
}

// GetAllHostTags calls HostsController_getAllHostTags.
func (sc *HostsClient) GetAllHostTags(ctx context.Context) (HostsControllerGetAllHostTagsRes, error) {
	return sc.client.HostsControllerGetAllHostTags(ctx)
}

// GetAllHosts calls HostsController_getAllHosts.
func (sc *HostsClient) GetAllHosts(ctx context.Context) (HostsControllerGetAllHostsRes, error) {
	return sc.client.HostsControllerGetAllHosts(ctx)
}

// GetOneHost calls HostsController_getOneHost.
func (sc *HostsClient) GetOneHost(ctx context.Context, params HostsControllerGetOneHostParams) (HostsControllerGetOneHostRes, error) {
	return sc.client.HostsControllerGetOneHost(ctx, params)
}

// ReorderHosts calls HostsController_reorderHosts.
func (sc *HostsClient) ReorderHosts(ctx context.Context, request *ReorderHostRequestDto) (HostsControllerReorderHostsRes, error) {
	return sc.client.HostsControllerReorderHosts(ctx, request)
}

// UpdateHost calls HostsController_updateHost.
func (sc *HostsClient) UpdateHost(ctx context.Context, request *UpdateHostRequestDto) (HostsControllerUpdateHostRes, error) {
	return sc.client.HostsControllerUpdateHost(ctx, request)
}

// HostsBulkActionsClient provides HostsBulkActions operations.
type HostsBulkActionsClient struct {
	client *Client
}

// NewHostsBulkActionsClient creates a new HostsBulkActionsClient.
func NewHostsBulkActionsClient(client *Client) *HostsBulkActionsClient {
	return &HostsBulkActionsClient{client: client}
}

// DeleteHosts calls HostsBulkActionsController_deleteHosts.
func (sc *HostsBulkActionsClient) DeleteHosts(ctx context.Context, request *BulkDeleteHostsRequestDto) (HostsBulkActionsControllerDeleteHostsRes, error) {
	return sc.client.HostsBulkActionsControllerDeleteHosts(ctx, request)
}

// DisableHosts calls HostsBulkActionsController_disableHosts.
func (sc *HostsBulkActionsClient) DisableHosts(ctx context.Context, request *BulkDisableHostsRequestDto) (HostsBulkActionsControllerDisableHostsRes, error) {
	return sc.client.HostsBulkActionsControllerDisableHosts(ctx, request)
}

// EnableHosts calls HostsBulkActionsController_enableHosts.
func (sc *HostsBulkActionsClient) EnableHosts(ctx context.Context, request *BulkEnableHostsRequestDto) (HostsBulkActionsControllerEnableHostsRes, error) {
	return sc.client.HostsBulkActionsControllerEnableHosts(ctx, request)
}

// SetInboundToHosts calls HostsBulkActionsController_setInboundToHosts.
func (sc *HostsBulkActionsClient) SetInboundToHosts(ctx context.Context, request *SetInboundToManyHostsRequestDto) (HostsBulkActionsControllerSetInboundToHostsRes, error) {
	return sc.client.HostsBulkActionsControllerSetInboundToHosts(ctx, request)
}

// SetPortToHosts calls HostsBulkActionsController_setPortToHosts.
func (sc *HostsBulkActionsClient) SetPortToHosts(ctx context.Context, request *SetPortToManyHostsRequestDto) (HostsBulkActionsControllerSetPortToHostsRes, error) {
	return sc.client.HostsBulkActionsControllerSetPortToHosts(ctx, request)
}

// HwidUserDevicesClient provides HwidUserDevices operations.
type HwidUserDevicesClient struct {
	client *Client
}

// NewHwidUserDevicesClient creates a new HwidUserDevicesClient.
func NewHwidUserDevicesClient(client *Client) *HwidUserDevicesClient {
	return &HwidUserDevicesClient{client: client}
}

// CreateUserHwidDevice calls HwidUserDevicesController_createUserHwidDevice.
func (sc *HwidUserDevicesClient) CreateUserHwidDevice(ctx context.Context, request *CreateUserHwidDeviceRequestDto) (HwidUserDevicesControllerCreateUserHwidDeviceRes, error) {
	return sc.client.HwidUserDevicesControllerCreateUserHwidDevice(ctx, request)
}

// DeleteAllUserHwidDevices calls HwidUserDevicesController_deleteAllUserHwidDevices.
func (sc *HwidUserDevicesClient) DeleteAllUserHwidDevices(ctx context.Context, request *DeleteAllUserHwidDevicesRequestDto) (HwidUserDevicesControllerDeleteAllUserHwidDevicesRes, error) {
	return sc.client.HwidUserDevicesControllerDeleteAllUserHwidDevices(ctx, request)
}

// DeleteUserHwidDevice calls HwidUserDevicesController_deleteUserHwidDevice.
func (sc *HwidUserDevicesClient) DeleteUserHwidDevice(ctx context.Context, request *DeleteUserHwidDeviceRequestDto) (HwidUserDevicesControllerDeleteUserHwidDeviceRes, error) {
	return sc.client.HwidUserDevicesControllerDeleteUserHwidDevice(ctx, request)
}

// GetAllUsers calls HwidUserDevicesController_getAllUsers.
func (sc *HwidUserDevicesClient) GetAllUsers(ctx context.Context, params HwidUserDevicesControllerGetAllUsersParams) (HwidUserDevicesControllerGetAllUsersRes, error) {
	return sc.client.HwidUserDevicesControllerGetAllUsers(ctx, params)
}

// GetHwidDevicesStats calls HwidUserDevicesController_getHwidDevicesStats.
func (sc *HwidUserDevicesClient) GetHwidDevicesStats(ctx context.Context) (HwidUserDevicesControllerGetHwidDevicesStatsRes, error) {
	return sc.client.HwidUserDevicesControllerGetHwidDevicesStats(ctx)
}

// GetUserHwidDevices calls HwidUserDevicesController_getUserHwidDevices.
func (sc *HwidUserDevicesClient) GetUserHwidDevices(ctx context.Context, params HwidUserDevicesControllerGetUserHwidDevicesParams) (HwidUserDevicesControllerGetUserHwidDevicesRes, error) {
	return sc.client.HwidUserDevicesControllerGetUserHwidDevices(ctx, params)
}

// InfraBillingClient provides InfraBilling operations.
type InfraBillingClient struct {
	client *Client
}

// NewInfraBillingClient creates a new InfraBillingClient.
func NewInfraBillingClient(client *Client) *InfraBillingClient {
	return &InfraBillingClient{client: client}
}

// CreateInfraBillingHistoryRecord calls InfraBillingController_createInfraBillingHistoryRecord.
func (sc *InfraBillingClient) CreateInfraBillingHistoryRecord(ctx context.Context, request *CreateInfraBillingHistoryRecordRequestDto) (InfraBillingControllerCreateInfraBillingHistoryRecordRes, error) {
	return sc.client.InfraBillingControllerCreateInfraBillingHistoryRecord(ctx, request)
}

// CreateInfraBillingNode calls InfraBillingController_createInfraBillingNode.
func (sc *InfraBillingClient) CreateInfraBillingNode(ctx context.Context, request *CreateInfraBillingNodeRequestDto) (InfraBillingControllerCreateInfraBillingNodeRes, error) {
	return sc.client.InfraBillingControllerCreateInfraBillingNode(ctx, request)
}

// CreateInfraProvider calls InfraBillingController_createInfraProvider.
func (sc *InfraBillingClient) CreateInfraProvider(ctx context.Context, request *CreateInfraProviderRequestDto) (InfraBillingControllerCreateInfraProviderRes, error) {
	return sc.client.InfraBillingControllerCreateInfraProvider(ctx, request)
}

// DeleteInfraBillingHistoryRecordByUuid calls InfraBillingController_deleteInfraBillingHistoryRecordByUuid.
func (sc *InfraBillingClient) DeleteInfraBillingHistoryRecordByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidParams) (InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidRes, error) {
	return sc.client.InfraBillingControllerDeleteInfraBillingHistoryRecordByUuid(ctx, params)
}

// DeleteInfraBillingNodeByUuid calls InfraBillingController_deleteInfraBillingNodeByUuid.
func (sc *InfraBillingClient) DeleteInfraBillingNodeByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraBillingNodeByUuidParams) (InfraBillingControllerDeleteInfraBillingNodeByUuidRes, error) {
	return sc.client.InfraBillingControllerDeleteInfraBillingNodeByUuid(ctx, params)
}

// DeleteInfraProviderByUuid calls InfraBillingController_deleteInfraProviderByUuid.
func (sc *InfraBillingClient) DeleteInfraProviderByUuid(ctx context.Context, params InfraBillingControllerDeleteInfraProviderByUuidParams) (InfraBillingControllerDeleteInfraProviderByUuidRes, error) {
	return sc.client.InfraBillingControllerDeleteInfraProviderByUuid(ctx, params)
}

// GetBillingNodes calls InfraBillingController_getBillingNodes.
func (sc *InfraBillingClient) GetBillingNodes(ctx context.Context) (InfraBillingControllerGetBillingNodesRes, error) {
	return sc.client.InfraBillingControllerGetBillingNodes(ctx)
}

// GetInfraBillingHistoryRecords calls InfraBillingController_getInfraBillingHistoryRecords.
func (sc *InfraBillingClient) GetInfraBillingHistoryRecords(ctx context.Context) (InfraBillingControllerGetInfraBillingHistoryRecordsRes, error) {
	return sc.client.InfraBillingControllerGetInfraBillingHistoryRecords(ctx)
}

// GetInfraProviderByUuid calls InfraBillingController_getInfraProviderByUuid.
func (sc *InfraBillingClient) GetInfraProviderByUuid(ctx context.Context, params InfraBillingControllerGetInfraProviderByUuidParams) (InfraBillingControllerGetInfraProviderByUuidRes, error) {
	return sc.client.InfraBillingControllerGetInfraProviderByUuid(ctx, params)
}

// GetInfraProviders calls InfraBillingController_getInfraProviders.
func (sc *InfraBillingClient) GetInfraProviders(ctx context.Context) (InfraBillingControllerGetInfraProvidersRes, error) {
	return sc.client.InfraBillingControllerGetInfraProviders(ctx)
}

// UpdateInfraBillingNode calls InfraBillingController_updateInfraBillingNode.
func (sc *InfraBillingClient) UpdateInfraBillingNode(ctx context.Context, request *UpdateInfraBillingNodeRequestDto) (InfraBillingControllerUpdateInfraBillingNodeRes, error) {
	return sc.client.InfraBillingControllerUpdateInfraBillingNode(ctx, request)
}

// UpdateInfraProvider calls InfraBillingController_updateInfraProvider.
func (sc *InfraBillingClient) UpdateInfraProvider(ctx context.Context, request *UpdateInfraProviderRequestDto) (InfraBillingControllerUpdateInfraProviderRes, error) {
	return sc.client.InfraBillingControllerUpdateInfraProvider(ctx, request)
}

// InternalSquadClient provides InternalSquad operations.
type InternalSquadClient struct {
	client *Client
}

// NewInternalSquadClient creates a new InternalSquadClient.
func NewInternalSquadClient(client *Client) *InternalSquadClient {
	return &InternalSquadClient{client: client}
}

// AddUsersToInternalSquad calls InternalSquadController_addUsersToInternalSquad.
func (sc *InternalSquadClient) AddUsersToInternalSquad(ctx context.Context, params InternalSquadControllerAddUsersToInternalSquadParams) (InternalSquadControllerAddUsersToInternalSquadRes, error) {
	return sc.client.InternalSquadControllerAddUsersToInternalSquad(ctx, params)
}

// CreateInternalSquad calls InternalSquadController_createInternalSquad.
func (sc *InternalSquadClient) CreateInternalSquad(ctx context.Context, request *CreateInternalSquadRequestDto) (InternalSquadControllerCreateInternalSquadRes, error) {
	return sc.client.InternalSquadControllerCreateInternalSquad(ctx, request)
}

// DeleteInternalSquad calls InternalSquadController_deleteInternalSquad.
func (sc *InternalSquadClient) DeleteInternalSquad(ctx context.Context, params InternalSquadControllerDeleteInternalSquadParams) (InternalSquadControllerDeleteInternalSquadRes, error) {
	return sc.client.InternalSquadControllerDeleteInternalSquad(ctx, params)
}

// GetInternalSquadAccessibleNodes calls InternalSquadController_getInternalSquadAccessibleNodes.
func (sc *InternalSquadClient) GetInternalSquadAccessibleNodes(ctx context.Context, params InternalSquadControllerGetInternalSquadAccessibleNodesParams) (InternalSquadControllerGetInternalSquadAccessibleNodesRes, error) {
	return sc.client.InternalSquadControllerGetInternalSquadAccessibleNodes(ctx, params)
}

// GetInternalSquadByUuid calls InternalSquadController_getInternalSquadByUuid.
func (sc *InternalSquadClient) GetInternalSquadByUuid(ctx context.Context, params InternalSquadControllerGetInternalSquadByUuidParams) (InternalSquadControllerGetInternalSquadByUuidRes, error) {
	return sc.client.InternalSquadControllerGetInternalSquadByUuid(ctx, params)
}

// GetInternalSquads calls InternalSquadController_getInternalSquads.
func (sc *InternalSquadClient) GetInternalSquads(ctx context.Context) (InternalSquadControllerGetInternalSquadsRes, error) {
	return sc.client.InternalSquadControllerGetInternalSquads(ctx)
}

// RemoveUsersFromInternalSquad calls InternalSquadController_removeUsersFromInternalSquad.
func (sc *InternalSquadClient) RemoveUsersFromInternalSquad(ctx context.Context, params InternalSquadControllerRemoveUsersFromInternalSquadParams) (InternalSquadControllerRemoveUsersFromInternalSquadRes, error) {
	return sc.client.InternalSquadControllerRemoveUsersFromInternalSquad(ctx, params)
}

// UpdateInternalSquad calls InternalSquadController_updateInternalSquad.
func (sc *InternalSquadClient) UpdateInternalSquad(ctx context.Context, request *UpdateInternalSquadRequestDto) (InternalSquadControllerUpdateInternalSquadRes, error) {
	return sc.client.InternalSquadControllerUpdateInternalSquad(ctx, request)
}

// KeygenClient provides Keygen operations.
type KeygenClient struct {
	client *Client
}

// NewKeygenClient creates a new KeygenClient.
func NewKeygenClient(client *Client) *KeygenClient {
	return &KeygenClient{client: client}
}

// GenerateKey calls KeygenController_generateKey.
func (sc *KeygenClient) GenerateKey(ctx context.Context) (KeygenControllerGenerateKeyRes, error) {
	return sc.client.KeygenControllerGenerateKey(ctx)
}

// NodesClient provides Nodes operations.
type NodesClient struct {
	client *Client
}

// NewNodesClient creates a new NodesClient.
func NewNodesClient(client *Client) *NodesClient {
	return &NodesClient{client: client}
}

// CreateNode calls NodesController_createNode.
func (sc *NodesClient) CreateNode(ctx context.Context, request *CreateNodeRequestDto) (NodesControllerCreateNodeRes, error) {
	return sc.client.NodesControllerCreateNode(ctx, request)
}

// DeleteNode calls NodesController_deleteNode.
func (sc *NodesClient) DeleteNode(ctx context.Context, params NodesControllerDeleteNodeParams) (NodesControllerDeleteNodeRes, error) {
	return sc.client.NodesControllerDeleteNode(ctx, params)
}

// DisableNode calls NodesController_disableNode.
func (sc *NodesClient) DisableNode(ctx context.Context, params NodesControllerDisableNodeParams) (NodesControllerDisableNodeRes, error) {
	return sc.client.NodesControllerDisableNode(ctx, params)
}

// EnableNode calls NodesController_enableNode.
func (sc *NodesClient) EnableNode(ctx context.Context, params NodesControllerEnableNodeParams) (NodesControllerEnableNodeRes, error) {
	return sc.client.NodesControllerEnableNode(ctx, params)
}

// GetAllNodes calls NodesController_getAllNodes.
func (sc *NodesClient) GetAllNodes(ctx context.Context) (NodesControllerGetAllNodesRes, error) {
	return sc.client.NodesControllerGetAllNodes(ctx)
}

// GetOneNode calls NodesController_getOneNode.
func (sc *NodesClient) GetOneNode(ctx context.Context, params NodesControllerGetOneNodeParams) (NodesControllerGetOneNodeRes, error) {
	return sc.client.NodesControllerGetOneNode(ctx, params)
}

// ReorderNodes calls NodesController_reorderNodes.
func (sc *NodesClient) ReorderNodes(ctx context.Context, request *ReorderNodeRequestDto) (NodesControllerReorderNodesRes, error) {
	return sc.client.NodesControllerReorderNodes(ctx, request)
}

// RestartAllNodes calls NodesController_restartAllNodes.
func (sc *NodesClient) RestartAllNodes(ctx context.Context, request *RestartAllNodesRequestBodyDto) (NodesControllerRestartAllNodesRes, error) {
	return sc.client.NodesControllerRestartAllNodes(ctx, request)
}

// RestartNode calls NodesController_restartNode.
func (sc *NodesClient) RestartNode(ctx context.Context, params NodesControllerRestartNodeParams) (NodesControllerRestartNodeRes, error) {
	return sc.client.NodesControllerRestartNode(ctx, params)
}

// UpdateNode calls NodesController_updateNode.
func (sc *NodesClient) UpdateNode(ctx context.Context, request *UpdateNodeRequestDto) (NodesControllerUpdateNodeRes, error) {
	return sc.client.NodesControllerUpdateNode(ctx, request)
}

// NodesUsageHistoryClient provides NodesUsageHistory operations.
type NodesUsageHistoryClient struct {
	client *Client
}

// NewNodesUsageHistoryClient creates a new NodesUsageHistoryClient.
func NewNodesUsageHistoryClient(client *Client) *NodesUsageHistoryClient {
	return &NodesUsageHistoryClient{client: client}
}

// GetNodesUsageByRange calls NodesUsageHistoryController_getNodesUsageByRange.
func (sc *NodesUsageHistoryClient) GetNodesUsageByRange(ctx context.Context, params NodesUsageHistoryControllerGetNodesUsageByRangeParams) (NodesUsageHistoryControllerGetNodesUsageByRangeRes, error) {
	return sc.client.NodesUsageHistoryControllerGetNodesUsageByRange(ctx, params)
}

// NodesUserUsageHistoryClient provides NodesUserUsageHistory operations.
type NodesUserUsageHistoryClient struct {
	client *Client
}

// NewNodesUserUsageHistoryClient creates a new NodesUserUsageHistoryClient.
func NewNodesUserUsageHistoryClient(client *Client) *NodesUserUsageHistoryClient {
	return &NodesUserUsageHistoryClient{client: client}
}

// GetNodeUserUsage calls NodesUserUsageHistoryController_getNodeUserUsage.
func (sc *NodesUserUsageHistoryClient) GetNodeUserUsage(ctx context.Context, params NodesUserUsageHistoryControllerGetNodeUserUsageParams) (NodesUserUsageHistoryControllerGetNodeUserUsageRes, error) {
	return sc.client.NodesUserUsageHistoryControllerGetNodeUserUsage(ctx, params)
}

// GetNodesRealtimeUsage calls NodesUserUsageHistoryController_getNodesRealtimeUsage.
func (sc *NodesUserUsageHistoryClient) GetNodesRealtimeUsage(ctx context.Context) (NodesUserUsageHistoryControllerGetNodesRealtimeUsageRes, error) {
	return sc.client.NodesUserUsageHistoryControllerGetNodesRealtimeUsage(ctx)
}

// PasskeyClient provides Passkey operations.
type PasskeyClient struct {
	client *Client
}

// NewPasskeyClient creates a new PasskeyClient.
func NewPasskeyClient(client *Client) *PasskeyClient {
	return &PasskeyClient{client: client}
}

// DeletePasskey calls PasskeyController_deletePasskey.
func (sc *PasskeyClient) DeletePasskey(ctx context.Context, request *DeletePasskeyRequestDto) (PasskeyControllerDeletePasskeyRes, error) {
	return sc.client.PasskeyControllerDeletePasskey(ctx, request)
}

// GetActivePasskeys calls PasskeyController_getActivePasskeys.
func (sc *PasskeyClient) GetActivePasskeys(ctx context.Context) (PasskeyControllerGetActivePasskeysRes, error) {
	return sc.client.PasskeyControllerGetActivePasskeys(ctx)
}

// PasskeyRegistrationOptions calls PasskeyController_passkeyRegistrationOptions.
func (sc *PasskeyClient) PasskeyRegistrationOptions(ctx context.Context) (PasskeyControllerPasskeyRegistrationOptionsRes, error) {
	return sc.client.PasskeyControllerPasskeyRegistrationOptions(ctx)
}

// PasskeyRegistrationVerify calls PasskeyController_passkeyRegistrationVerify.
func (sc *PasskeyClient) PasskeyRegistrationVerify(ctx context.Context, request *VerifyPasskeyRegistrationRequestDto) (PasskeyControllerPasskeyRegistrationVerifyRes, error) {
	return sc.client.PasskeyControllerPasskeyRegistrationVerify(ctx, request)
}

// RemnawaveSettingsClient provides RemnawaveSettings operations.
type RemnawaveSettingsClient struct {
	client *Client
}

// NewRemnawaveSettingsClient creates a new RemnawaveSettingsClient.
func NewRemnawaveSettingsClient(client *Client) *RemnawaveSettingsClient {
	return &RemnawaveSettingsClient{client: client}
}

// GetSettings calls RemnawaveSettingsController_getSettings.
func (sc *RemnawaveSettingsClient) GetSettings(ctx context.Context) (RemnawaveSettingsControllerGetSettingsRes, error) {
	return sc.client.RemnawaveSettingsControllerGetSettings(ctx)
}

// UpdateSettings calls RemnawaveSettingsController_updateSettings.
func (sc *RemnawaveSettingsClient) UpdateSettings(ctx context.Context, request *UpdateRemnawaveSettingsRequestDto) (RemnawaveSettingsControllerUpdateSettingsRes, error) {
	return sc.client.RemnawaveSettingsControllerUpdateSettings(ctx, request)
}

// SnippetsClient provides Snippets operations.
type SnippetsClient struct {
	client *Client
}

// NewSnippetsClient creates a new SnippetsClient.
func NewSnippetsClient(client *Client) *SnippetsClient {
	return &SnippetsClient{client: client}
}

// CreateSnippet calls SnippetsController_createSnippet.
func (sc *SnippetsClient) CreateSnippet(ctx context.Context, request *CreateSnippetRequestDto) (SnippetsControllerCreateSnippetRes, error) {
	return sc.client.SnippetsControllerCreateSnippet(ctx, request)
}

// DeleteSnippetByName calls SnippetsController_deleteSnippetByName.
func (sc *SnippetsClient) DeleteSnippetByName(ctx context.Context, request *DeleteSnippetRequestDto) (SnippetsControllerDeleteSnippetByNameRes, error) {
	return sc.client.SnippetsControllerDeleteSnippetByName(ctx, request)
}

// GetSnippets calls SnippetsController_getSnippets.
func (sc *SnippetsClient) GetSnippets(ctx context.Context) (SnippetsControllerGetSnippetsRes, error) {
	return sc.client.SnippetsControllerGetSnippets(ctx)
}

// UpdateSnippet calls SnippetsController_updateSnippet.
func (sc *SnippetsClient) UpdateSnippet(ctx context.Context, request *UpdateSnippetRequestDto) (SnippetsControllerUpdateSnippetRes, error) {
	return sc.client.SnippetsControllerUpdateSnippet(ctx, request)
}

// SubscriptionClient provides Subscription operations.
type SubscriptionClient struct {
	client *Client
}

// NewSubscriptionClient creates a new SubscriptionClient.
func NewSubscriptionClient(client *Client) *SubscriptionClient {
	return &SubscriptionClient{client: client}
}

// GetSubscriptionInfoByShortUuid calls SubscriptionController_getSubscriptionInfoByShortUuid.
func (sc *SubscriptionClient) GetSubscriptionInfoByShortUuid(ctx context.Context, params SubscriptionControllerGetSubscriptionInfoByShortUuidParams) (SubscriptionControllerGetSubscriptionInfoByShortUuidRes, error) {
	return sc.client.SubscriptionControllerGetSubscriptionInfoByShortUuid(ctx, params)
}

// SubscriptionSettingsClient provides SubscriptionSettings operations.
type SubscriptionSettingsClient struct {
	client *Client
}

// NewSubscriptionSettingsClient creates a new SubscriptionSettingsClient.
func NewSubscriptionSettingsClient(client *Client) *SubscriptionSettingsClient {
	return &SubscriptionSettingsClient{client: client}
}

// GetSettings calls SubscriptionSettingsController_getSettings.
func (sc *SubscriptionSettingsClient) GetSettings(ctx context.Context) (SubscriptionSettingsControllerGetSettingsRes, error) {
	return sc.client.SubscriptionSettingsControllerGetSettings(ctx)
}

// UpdateSettings calls SubscriptionSettingsController_updateSettings.
func (sc *SubscriptionSettingsClient) UpdateSettings(ctx context.Context, request *UpdateSubscriptionSettingsRequestDto) (SubscriptionSettingsControllerUpdateSettingsRes, error) {
	return sc.client.SubscriptionSettingsControllerUpdateSettings(ctx, request)
}

// SubscriptionTemplateClient provides SubscriptionTemplate operations.
type SubscriptionTemplateClient struct {
	client *Client
}

// NewSubscriptionTemplateClient creates a new SubscriptionTemplateClient.
func NewSubscriptionTemplateClient(client *Client) *SubscriptionTemplateClient {
	return &SubscriptionTemplateClient{client: client}
}

// CreateTemplate calls SubscriptionTemplateController_createTemplate.
func (sc *SubscriptionTemplateClient) CreateTemplate(ctx context.Context, request *CreateSubscriptionTemplateRequestDto) (SubscriptionTemplateControllerCreateTemplateRes, error) {
	return sc.client.SubscriptionTemplateControllerCreateTemplate(ctx, request)
}

// DeleteTemplate calls SubscriptionTemplateController_deleteTemplate.
func (sc *SubscriptionTemplateClient) DeleteTemplate(ctx context.Context, params SubscriptionTemplateControllerDeleteTemplateParams) (SubscriptionTemplateControllerDeleteTemplateRes, error) {
	return sc.client.SubscriptionTemplateControllerDeleteTemplate(ctx, params)
}

// GetAllTemplates calls SubscriptionTemplateController_getAllTemplates.
func (sc *SubscriptionTemplateClient) GetAllTemplates(ctx context.Context) (SubscriptionTemplateControllerGetAllTemplatesRes, error) {
	return sc.client.SubscriptionTemplateControllerGetAllTemplates(ctx)
}

// GetTemplateByUuid calls SubscriptionTemplateController_getTemplateByUuid.
func (sc *SubscriptionTemplateClient) GetTemplateByUuid(ctx context.Context, params SubscriptionTemplateControllerGetTemplateByUuidParams) (SubscriptionTemplateControllerGetTemplateByUuidRes, error) {
	return sc.client.SubscriptionTemplateControllerGetTemplateByUuid(ctx, params)
}

// UpdateTemplate calls SubscriptionTemplateController_updateTemplate.
func (sc *SubscriptionTemplateClient) UpdateTemplate(ctx context.Context, request *UpdateTemplateRequestDto) (SubscriptionTemplateControllerUpdateTemplateRes, error) {
	return sc.client.SubscriptionTemplateControllerUpdateTemplate(ctx, request)
}

// SubscriptionsClient provides Subscriptions operations.
type SubscriptionsClient struct {
	client *Client
}

// NewSubscriptionsClient creates a new SubscriptionsClient.
func NewSubscriptionsClient(client *Client) *SubscriptionsClient {
	return &SubscriptionsClient{client: client}
}

// GetAllSubscriptions calls SubscriptionsController_getAllSubscriptions.
func (sc *SubscriptionsClient) GetAllSubscriptions(ctx context.Context, params SubscriptionsControllerGetAllSubscriptionsParams) (SubscriptionsControllerGetAllSubscriptionsRes, error) {
	return sc.client.SubscriptionsControllerGetAllSubscriptions(ctx, params)
}

// GetRawSubscriptionByShortUuid calls SubscriptionsController_getRawSubscriptionByShortUuid.
func (sc *SubscriptionsClient) GetRawSubscriptionByShortUuid(ctx context.Context, params SubscriptionsControllerGetRawSubscriptionByShortUuidParams) (SubscriptionsControllerGetRawSubscriptionByShortUuidRes, error) {
	return sc.client.SubscriptionsControllerGetRawSubscriptionByShortUuid(ctx, params)
}

// GetSubscriptionByShortUuidProtected calls SubscriptionsController_getSubscriptionByShortUuidProtected.
func (sc *SubscriptionsClient) GetSubscriptionByShortUuidProtected(ctx context.Context, params SubscriptionsControllerGetSubscriptionByShortUuidProtectedParams) (SubscriptionsControllerGetSubscriptionByShortUuidProtectedRes, error) {
	return sc.client.SubscriptionsControllerGetSubscriptionByShortUuidProtected(ctx, params)
}

// GetSubscriptionByUsername calls SubscriptionsController_getSubscriptionByUsername.
func (sc *SubscriptionsClient) GetSubscriptionByUsername(ctx context.Context, params SubscriptionsControllerGetSubscriptionByUsernameParams) (SubscriptionsControllerGetSubscriptionByUsernameRes, error) {
	return sc.client.SubscriptionsControllerGetSubscriptionByUsername(ctx, params)
}

// GetSubscriptionByUuid calls SubscriptionsController_getSubscriptionByUuid.
func (sc *SubscriptionsClient) GetSubscriptionByUuid(ctx context.Context, params SubscriptionsControllerGetSubscriptionByUuidParams) (SubscriptionsControllerGetSubscriptionByUuidRes, error) {
	return sc.client.SubscriptionsControllerGetSubscriptionByUuid(ctx, params)
}

// SystemClient provides System operations.
type SystemClient struct {
	client *Client
}

// NewSystemClient creates a new SystemClient.
func NewSystemClient(client *Client) *SystemClient {
	return &SystemClient{client: client}
}

// DebugSrrMatcher calls SystemController_debugSrrMatcher.
func (sc *SystemClient) DebugSrrMatcher(ctx context.Context, request *DebugSrrMatcherRequestDto) (SystemControllerDebugSrrMatcherRes, error) {
	return sc.client.SystemControllerDebugSrrMatcher(ctx, request)
}

// EncryptHappCryptoLink calls SystemController_encryptHappCryptoLink.
func (sc *SystemClient) EncryptHappCryptoLink(ctx context.Context, request *EncryptHappCryptoLinkRequestDto) (SystemControllerEncryptHappCryptoLinkRes, error) {
	return sc.client.SystemControllerEncryptHappCryptoLink(ctx, request)
}

// GetBandwidthStats calls SystemController_getBandwidthStats.
func (sc *SystemClient) GetBandwidthStats(ctx context.Context) (SystemControllerGetBandwidthStatsRes, error) {
	return sc.client.SystemControllerGetBandwidthStats(ctx)
}

// GetNodesMetrics calls SystemController_getNodesMetrics.
func (sc *SystemClient) GetNodesMetrics(ctx context.Context) (SystemControllerGetNodesMetricsRes, error) {
	return sc.client.SystemControllerGetNodesMetrics(ctx)
}

// GetNodesStatistics calls SystemController_getNodesStatistics.
func (sc *SystemClient) GetNodesStatistics(ctx context.Context) (SystemControllerGetNodesStatisticsRes, error) {
	return sc.client.SystemControllerGetNodesStatistics(ctx)
}

// GetRemnawaveHealth calls SystemController_getRemnawaveHealth.
func (sc *SystemClient) GetRemnawaveHealth(ctx context.Context) (SystemControllerGetRemnawaveHealthRes, error) {
	return sc.client.SystemControllerGetRemnawaveHealth(ctx)
}

// GetStats calls SystemController_getStats.
func (sc *SystemClient) GetStats(ctx context.Context) (SystemControllerGetStatsRes, error) {
	return sc.client.SystemControllerGetStats(ctx)
}

// GetX25519Keypairs calls SystemController_getX25519Keypairs.
func (sc *SystemClient) GetX25519Keypairs(ctx context.Context) (SystemControllerGetX25519KeypairsRes, error) {
	return sc.client.SystemControllerGetX25519Keypairs(ctx)
}

// UserSubscriptionRequestHistoryClient provides UserSubscriptionRequestHistory operations.
type UserSubscriptionRequestHistoryClient struct {
	client *Client
}

// NewUserSubscriptionRequestHistoryClient creates a new UserSubscriptionRequestHistoryClient.
func NewUserSubscriptionRequestHistoryClient(client *Client) *UserSubscriptionRequestHistoryClient {
	return &UserSubscriptionRequestHistoryClient{client: client}
}

// GetSubscriptionRequestHistory calls UserSubscriptionRequestHistoryController_getSubscriptionRequestHistory.
func (sc *UserSubscriptionRequestHistoryClient) GetSubscriptionRequestHistory(ctx context.Context, params UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryParams) (UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryRes, error) {
	return sc.client.UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistory(ctx, params)
}

// GetSubscriptionRequestHistoryStats calls UserSubscriptionRequestHistoryController_getSubscriptionRequestHistoryStats.
func (sc *UserSubscriptionRequestHistoryClient) GetSubscriptionRequestHistoryStats(ctx context.Context) (UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsRes, error) {
	return sc.client.UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStats(ctx)
}

// UsersClient provides Users operations.
type UsersClient struct {
	client *Client
}

// NewUsersClient creates a new UsersClient.
func NewUsersClient(client *Client) *UsersClient {
	return &UsersClient{client: client}
}

// CreateUser calls UsersController_createUser.
func (sc *UsersClient) CreateUser(ctx context.Context, request *CreateUserRequestDto) (UsersControllerCreateUserRes, error) {
	return sc.client.UsersControllerCreateUser(ctx, request)
}

// DeleteUser calls UsersController_deleteUser.
func (sc *UsersClient) DeleteUser(ctx context.Context, params UsersControllerDeleteUserParams) (UsersControllerDeleteUserRes, error) {
	return sc.client.UsersControllerDeleteUser(ctx, params)
}

// DisableUser calls UsersController_disableUser.
func (sc *UsersClient) DisableUser(ctx context.Context, params UsersControllerDisableUserParams) (UsersControllerDisableUserRes, error) {
	return sc.client.UsersControllerDisableUser(ctx, params)
}

// EnableUser calls UsersController_enableUser.
func (sc *UsersClient) EnableUser(ctx context.Context, params UsersControllerEnableUserParams) (UsersControllerEnableUserRes, error) {
	return sc.client.UsersControllerEnableUser(ctx, params)
}

// GetAllTags calls UsersController_getAllTags.
func (sc *UsersClient) GetAllTags(ctx context.Context) (UsersControllerGetAllTagsRes, error) {
	return sc.client.UsersControllerGetAllTags(ctx)
}

// GetAllUsers calls UsersController_getAllUsers.
func (sc *UsersClient) GetAllUsers(ctx context.Context, params UsersControllerGetAllUsersParams) (UsersControllerGetAllUsersRes, error) {
	return sc.client.UsersControllerGetAllUsers(ctx, params)
}

// GetUserAccessibleNodes calls UsersController_getUserAccessibleNodes.
func (sc *UsersClient) GetUserAccessibleNodes(ctx context.Context, params UsersControllerGetUserAccessibleNodesParams) (UsersControllerGetUserAccessibleNodesRes, error) {
	return sc.client.UsersControllerGetUserAccessibleNodes(ctx, params)
}

// GetUserByShortUuid calls UsersController_getUserByShortUuid.
func (sc *UsersClient) GetUserByShortUuid(ctx context.Context, params UsersControllerGetUserByShortUuidParams) (UsersControllerGetUserByShortUuidRes, error) {
	return sc.client.UsersControllerGetUserByShortUuid(ctx, params)
}

// GetUserByTelegramId calls UsersController_getUserByTelegramId.
func (sc *UsersClient) GetUserByTelegramId(ctx context.Context, params UsersControllerGetUserByTelegramIdParams) (UsersControllerGetUserByTelegramIdRes, error) {
	return sc.client.UsersControllerGetUserByTelegramId(ctx, params)
}

// GetUserByUsername calls UsersController_getUserByUsername.
func (sc *UsersClient) GetUserByUsername(ctx context.Context, params UsersControllerGetUserByUsernameParams) (UsersControllerGetUserByUsernameRes, error) {
	return sc.client.UsersControllerGetUserByUsername(ctx, params)
}

// GetUserByUuid calls UsersController_getUserByUuid.
func (sc *UsersClient) GetUserByUuid(ctx context.Context, params UsersControllerGetUserByUuidParams) (UsersControllerGetUserByUuidRes, error) {
	return sc.client.UsersControllerGetUserByUuid(ctx, params)
}

// GetUserSubscriptionRequestHistory calls UsersController_getUserSubscriptionRequestHistory.
func (sc *UsersClient) GetUserSubscriptionRequestHistory(ctx context.Context, params UsersControllerGetUserSubscriptionRequestHistoryParams) (UsersControllerGetUserSubscriptionRequestHistoryRes, error) {
	return sc.client.UsersControllerGetUserSubscriptionRequestHistory(ctx, params)
}

// GetUsersByEmail calls UsersController_getUsersByEmail.
func (sc *UsersClient) GetUsersByEmail(ctx context.Context, params UsersControllerGetUsersByEmailParams) (UsersControllerGetUsersByEmailRes, error) {
	return sc.client.UsersControllerGetUsersByEmail(ctx, params)
}

// GetUsersByTag calls UsersController_getUsersByTag.
func (sc *UsersClient) GetUsersByTag(ctx context.Context, params UsersControllerGetUsersByTagParams) (UsersControllerGetUsersByTagRes, error) {
	return sc.client.UsersControllerGetUsersByTag(ctx, params)
}

// ResetUserTraffic calls UsersController_resetUserTraffic.
func (sc *UsersClient) ResetUserTraffic(ctx context.Context, params UsersControllerResetUserTrafficParams) (UsersControllerResetUserTrafficRes, error) {
	return sc.client.UsersControllerResetUserTraffic(ctx, params)
}

// RevokeUserSubscription calls UsersController_revokeUserSubscription.
func (sc *UsersClient) RevokeUserSubscription(ctx context.Context, request *RevokeUserSubscriptionBodyDto, params UsersControllerRevokeUserSubscriptionParams) (UsersControllerRevokeUserSubscriptionRes, error) {
	return sc.client.UsersControllerRevokeUserSubscription(ctx, request, params)
}

// UpdateUser calls UsersController_updateUser.
func (sc *UsersClient) UpdateUser(ctx context.Context, request *UpdateUserRequestDto) (UsersControllerUpdateUserRes, error) {
	return sc.client.UsersControllerUpdateUser(ctx, request)
}

// UsersBulkActionsClient provides UsersBulkActions operations.
type UsersBulkActionsClient struct {
	client *Client
}

// NewUsersBulkActionsClient creates a new UsersBulkActionsClient.
func NewUsersBulkActionsClient(client *Client) *UsersBulkActionsClient {
	return &UsersBulkActionsClient{client: client}
}

// BulkAllResetUserTraffic calls UsersBulkActionsController_bulkAllResetUserTraffic.
func (sc *UsersBulkActionsClient) BulkAllResetUserTraffic(ctx context.Context) (UsersBulkActionsControllerBulkAllResetUserTrafficRes, error) {
	return sc.client.UsersBulkActionsControllerBulkAllResetUserTraffic(ctx)
}

// BulkDeleteUsers calls UsersBulkActionsController_bulkDeleteUsers.
func (sc *UsersBulkActionsClient) BulkDeleteUsers(ctx context.Context, request *BulkDeleteUsersRequestDto) (UsersBulkActionsControllerBulkDeleteUsersRes, error) {
	return sc.client.UsersBulkActionsControllerBulkDeleteUsers(ctx, request)
}

// BulkDeleteUsersByStatus calls UsersBulkActionsController_bulkDeleteUsersByStatus.
func (sc *UsersBulkActionsClient) BulkDeleteUsersByStatus(ctx context.Context, request *BulkDeleteUsersByStatusRequestDto) (UsersBulkActionsControllerBulkDeleteUsersByStatusRes, error) {
	return sc.client.UsersBulkActionsControllerBulkDeleteUsersByStatus(ctx, request)
}

// BulkResetUserTraffic calls UsersBulkActionsController_bulkResetUserTraffic.
func (sc *UsersBulkActionsClient) BulkResetUserTraffic(ctx context.Context, request *BulkResetTrafficUsersRequestDto) (UsersBulkActionsControllerBulkResetUserTrafficRes, error) {
	return sc.client.UsersBulkActionsControllerBulkResetUserTraffic(ctx, request)
}

// BulkRevokeUsersSubscription calls UsersBulkActionsController_bulkRevokeUsersSubscription.
func (sc *UsersBulkActionsClient) BulkRevokeUsersSubscription(ctx context.Context, request *BulkRevokeUsersSubscriptionRequestDto) (UsersBulkActionsControllerBulkRevokeUsersSubscriptionRes, error) {
	return sc.client.UsersBulkActionsControllerBulkRevokeUsersSubscription(ctx, request)
}

// BulkUpdateAllUsers calls UsersBulkActionsController_bulkUpdateAllUsers.
func (sc *UsersBulkActionsClient) BulkUpdateAllUsers(ctx context.Context, request *BulkAllUpdateUsersRequestDto) (UsersBulkActionsControllerBulkUpdateAllUsersRes, error) {
	return sc.client.UsersBulkActionsControllerBulkUpdateAllUsers(ctx, request)
}

// BulkUpdateUsers calls UsersBulkActionsController_bulkUpdateUsers.
func (sc *UsersBulkActionsClient) BulkUpdateUsers(ctx context.Context, request *BulkUpdateUsersRequestDto) (UsersBulkActionsControllerBulkUpdateUsersRes, error) {
	return sc.client.UsersBulkActionsControllerBulkUpdateUsers(ctx, request)
}

// BulkUpdateUsersInternalSquads calls UsersBulkActionsController_bulkUpdateUsersInternalSquads.
func (sc *UsersBulkActionsClient) BulkUpdateUsersInternalSquads(ctx context.Context, request *BulkUpdateUsersSquadsRequestDto) (UsersBulkActionsControllerBulkUpdateUsersInternalSquadsRes, error) {
	return sc.client.UsersBulkActionsControllerBulkUpdateUsersInternalSquads(ctx, request)
}

// UsersStatsClient provides UsersStats operations.
type UsersStatsClient struct {
	client *Client
}

// NewUsersStatsClient creates a new UsersStatsClient.
func NewUsersStatsClient(client *Client) *UsersStatsClient {
	return &UsersStatsClient{client: client}
}

// GetUserUsageByRange calls UsersStatsController_getUserUsageByRange.
func (sc *UsersStatsClient) GetUserUsageByRange(ctx context.Context, params UsersStatsControllerGetUserUsageByRangeParams) (UsersStatsControllerGetUserUsageByRangeRes, error) {
	return sc.client.UsersStatsControllerGetUserUsageByRange(ctx, params)
}

