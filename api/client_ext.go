// Code generated by sub-client generator. DO NOT EDIT manually.
// This file extends the base Client with organized sub-client access patterns.
// See examples below for usage.

package api

import "context"

// ClientExt wraps the base Client and adds organized sub-client methods.
// This provides better method organization and discoverability.
//
// Instead of using flat methods like:
//   client.UsersControllerCreateUser(ctx, req)
//
// You can now use organized sub-clients:
//   client.Users().Create(ctx, req)
//
// This makes code more readable and helps with IDE discovery.
type ClientExt struct {
	*Client

	// Sub-client instances
	users       *UsersClient
	nodes       *NodesClient
	hosts       *HostsClient
	auth        *AuthClient
	system      *SystemClient
}

// NewClientExt wraps an existing Client with sub-client access.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client:      client,
		users:       NewUsersClient(client),
		nodes:       NewNodesClient(client),
		hosts:       NewHostsClient(client),
		auth:        NewAuthClient(client),
		system:      NewSystemClient(client),
	}
}

// Users returns the users sub-client for all user-related operations.
// Example: client.Users().GetAll(ctx)
func (c *ClientExt) Users() *UsersClient {
	return c.users
}

// Nodes returns the nodes sub-client for all node-related operations.
// Example: client.Nodes().GetAll(ctx)
func (c *ClientExt) Nodes() *NodesClient {
	return c.nodes
}

// Hosts returns the hosts sub-client for all host-related operations.
// Example: client.Hosts().GetAll(ctx)
func (c *ClientExt) Hosts() *HostsClient {
	return c.hosts
}

// Auth returns the auth sub-client for authentication operations.
// Example: client.Auth().Login(ctx, req)
func (c *ClientExt) Auth() *AuthClient {
	return c.auth
}

// System returns the system sub-client for system operations.
// Example: client.System().GetHealth(ctx)
func (c *ClientExt) System() *SystemClient {
	return c.system
}

// ---

// UsersClient provides organized access to user-related operations.
type UsersClient struct {
	client *Client
}

// NewUsersClient creates a new UsersClient.
func NewUsersClient(client *Client) *UsersClient {
	return &UsersClient{client: client}
}

// GetAll retrieves all users with pagination support.
func (uc *UsersClient) GetAll(ctx context.Context, opts ...RequestOption) (UsersControllerGetAllUsersRes, error) {
	return uc.client.UsersControllerGetAllUsers(ctx, UsersControllerGetAllUsersParams{}, opts...)
}

// Create creates a new user.
func (uc *UsersClient) Create(ctx context.Context, request *CreateUserRequestDto, opts ...RequestOption) (UsersControllerCreateUserRes, error) {
	return uc.client.UsersControllerCreateUser(ctx, request, opts...)
}

// Update updates an existing user by UUID or username.
func (uc *UsersClient) Update(ctx context.Context, request *UpdateUserRequestDto, opts ...RequestOption) (UsersControllerUpdateUserRes, error) {
	return uc.client.UsersControllerUpdateUser(ctx, request, opts...)
}

// GetByID retrieves a user by UUID.
func (uc *UsersClient) GetByID(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerGetUserByUuidRes, error) {
	return uc.client.UsersControllerGetUserByUuid(ctx, UsersControllerGetUserByUuidParams{UUID: uuid}, opts...)
}

// Delete deletes a user by UUID.
func (uc *UsersClient) Delete(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerDeleteUserRes, error) {
	return uc.client.UsersControllerDeleteUser(ctx, UsersControllerDeleteUserParams{UUID: uuid}, opts...)
}

// GetByUsername retrieves a user by username.
func (uc *UsersClient) GetByUsername(ctx context.Context, username string, opts ...RequestOption) (UsersControllerGetUserByUsernameRes, error) {
	return uc.client.UsersControllerGetUserByUsername(ctx, UsersControllerGetUserByUsernameParams{Username: username}, opts...)
}

// GetByEmail retrieves a user by email.
func (uc *UsersClient) GetByEmail(ctx context.Context, email string, opts ...RequestOption) (UsersControllerGetUsersByEmailRes, error) {
	return uc.client.UsersControllerGetUsersByEmail(ctx, UsersControllerGetUsersByEmailParams{Email: email}, opts...)
}

// GetByShortUUID retrieves a user by short UUID.
func (uc *UsersClient) GetByShortUUID(ctx context.Context, shortUUID string, opts ...RequestOption) (UsersControllerGetUserByShortUuidRes, error) {
	return uc.client.UsersControllerGetUserByShortUuid(ctx, UsersControllerGetUserByShortUuidParams{ShortUuid: shortUUID}, opts...)
}

// GetByTelegramID retrieves a user by Telegram ID.
func (uc *UsersClient) GetByTelegramID(ctx context.Context, telegramID string, opts ...RequestOption) (UsersControllerGetUserByTelegramIdRes, error) {
	return uc.client.UsersControllerGetUserByTelegramId(ctx, UsersControllerGetUserByTelegramIdParams{TelegramId: telegramID}, opts...)
}

// GetTags retrieves all existing user tags.
func (uc *UsersClient) GetTags(ctx context.Context, opts ...RequestOption) (UsersControllerGetAllTagsRes, error) {
	return uc.client.UsersControllerGetAllTags(ctx, opts...)
}

// GetByTag retrieves users by tag.
func (uc *UsersClient) GetByTag(ctx context.Context, tag string, opts ...RequestOption) (UsersControllerGetUsersByTagRes, error) {
	return uc.client.UsersControllerGetUsersByTag(ctx, UsersControllerGetUsersByTagParams{Tag: tag}, opts...)
}

// GetAccessibleNodes retrieves nodes accessible to a user.
func (uc *UsersClient) GetAccessibleNodes(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerGetUserAccessibleNodesRes, error) {
	return uc.client.UsersControllerGetUserAccessibleNodes(ctx, UsersControllerGetUserAccessibleNodesParams{UUID: uuid}, opts...)
}

// GetSubscriptionRequestHistory retrieves subscription request history for a user.
func (uc *UsersClient) GetSubscriptionRequestHistory(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerGetUserSubscriptionRequestHistoryRes, error) {
	return uc.client.UsersControllerGetUserSubscriptionRequestHistory(ctx, UsersControllerGetUserSubscriptionRequestHistoryParams{UUID: uuid}, opts...)
}

// Enable enables a user.
func (uc *UsersClient) Enable(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerEnableUserRes, error) {
	return uc.client.UsersControllerEnableUser(ctx, UsersControllerEnableUserParams{UUID: uuid}, opts...)
}

// Disable disables a user.
func (uc *UsersClient) Disable(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerDisableUserRes, error) {
	return uc.client.UsersControllerDisableUser(ctx, UsersControllerDisableUserParams{UUID: uuid}, opts...)
}

// ResetTraffic resets the traffic statistics for a user.
func (uc *UsersClient) ResetTraffic(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerResetUserTrafficRes, error) {
	return uc.client.UsersControllerResetUserTraffic(ctx, UsersControllerResetUserTrafficParams{UUID: uuid}, opts...)
}

// RevokeSubscription revokes a user's subscription.
func (uc *UsersClient) RevokeSubscription(ctx context.Context, uuid string, opts ...RequestOption) (UsersControllerRevokeUserSubscriptionRes, error) {
	return uc.client.UsersControllerRevokeUserSubscription(ctx, &RevokeUserSubscriptionBodyDto{}, UsersControllerRevokeUserSubscriptionParams{UUID: uuid}, opts...)
}

// ---

// NodesClient provides organized access to node-related operations.
type NodesClient struct {
	client *Client
}

// NewNodesClient creates a new NodesClient.
func NewNodesClient(client *Client) *NodesClient {
	return &NodesClient{client: client}
}

// GetAll retrieves all nodes.
func (nc *NodesClient) GetAll(ctx context.Context, opts ...RequestOption) (NodesControllerGetAllNodesRes, error) {
	return nc.client.NodesControllerGetAllNodes(ctx, opts...)
}

// Create creates a new node.
func (nc *NodesClient) Create(ctx context.Context, request *CreateNodeRequestDto, opts ...RequestOption) (NodesControllerCreateNodeRes, error) {
	return nc.client.NodesControllerCreateNode(ctx, request, opts...)
}

// Update updates an existing node.
func (nc *NodesClient) Update(ctx context.Context, request *UpdateNodeRequestDto, opts ...RequestOption) (NodesControllerUpdateNodeRes, error) {
	return nc.client.NodesControllerUpdateNode(ctx, request, opts...)
}

// GetByID retrieves a node by UUID.
func (nc *NodesClient) GetByID(ctx context.Context, uuid string, opts ...RequestOption) (NodesControllerGetOneNodeRes, error) {
	return nc.client.NodesControllerGetOneNode(ctx, NodesControllerGetOneNodeParams{UUID: uuid}, opts...)
}

// Delete deletes a node by UUID.
func (nc *NodesClient) Delete(ctx context.Context, uuid string, opts ...RequestOption) (NodesControllerDeleteNodeRes, error) {
	return nc.client.NodesControllerDeleteNode(ctx, NodesControllerDeleteNodeParams{UUID: uuid}, opts...)
}

// Enable enables a node.
func (nc *NodesClient) Enable(ctx context.Context, uuid string, opts ...RequestOption) (NodesControllerEnableNodeRes, error) {
	return nc.client.NodesControllerEnableNode(ctx, NodesControllerEnableNodeParams{UUID: uuid}, opts...)
}

// Disable disables a node.
func (nc *NodesClient) Disable(ctx context.Context, uuid string, opts ...RequestOption) (NodesControllerDisableNodeRes, error) {
	return nc.client.NodesControllerDisableNode(ctx, NodesControllerDisableNodeParams{UUID: uuid}, opts...)
}

// Restart restarts a node.
func (nc *NodesClient) Restart(ctx context.Context, uuid string, opts ...RequestOption) (NodesControllerRestartNodeRes, error) {
	return nc.client.NodesControllerRestartNode(ctx, NodesControllerRestartNodeParams{UUID: uuid}, opts...)
}

// RestartAll restarts all nodes.
func (nc *NodesClient) RestartAll(ctx context.Context, opts ...RequestOption) (NodesControllerRestartAllNodesRes, error) {
	return nc.client.NodesControllerRestartAllNodes(ctx, &RestartAllNodesRequestBodyDto{}, opts...)
}

// Reorder reorders nodes.
func (nc *NodesClient) Reorder(ctx context.Context, request *ReorderNodeRequestDto, opts ...RequestOption) (NodesControllerReorderNodesRes, error) {
	return nc.client.NodesControllerReorderNodes(ctx, request, opts...)
}

// ---

// HostsClient provides organized access to host-related operations.
type HostsClient struct {
	client *Client
}

// NewHostsClient creates a new HostsClient.
func NewHostsClient(client *Client) *HostsClient {
	return &HostsClient{client: client}
}

// GetAll retrieves all hosts.
func (hc *HostsClient) GetAll(ctx context.Context, opts ...RequestOption) (HostsControllerGetAllHostsRes, error) {
	return hc.client.HostsControllerGetAllHosts(ctx, opts...)
}

// Create creates a new host.
func (hc *HostsClient) Create(ctx context.Context, request *CreateHostRequestDto, opts ...RequestOption) (HostsControllerCreateHostRes, error) {
	return hc.client.HostsControllerCreateHost(ctx, request, opts...)
}

// Update updates an existing host.
func (hc *HostsClient) Update(ctx context.Context, request *UpdateHostRequestDto, opts ...RequestOption) (HostsControllerUpdateHostRes, error) {
	return hc.client.HostsControllerUpdateHost(ctx, request, opts...)
}

// GetByID retrieves a host by UUID.
func (hc *HostsClient) GetByID(ctx context.Context, uuid string, opts ...RequestOption) (HostsControllerGetOneHostRes, error) {
	return hc.client.HostsControllerGetOneHost(ctx, HostsControllerGetOneHostParams{UUID: uuid}, opts...)
}

// Delete deletes a host by UUID.
func (hc *HostsClient) Delete(ctx context.Context, uuid string, opts ...RequestOption) (HostsControllerDeleteHostRes, error) {
	return hc.client.HostsControllerDeleteHost(ctx, HostsControllerDeleteHostParams{UUID: uuid}, opts...)
}

// GetTags retrieves all host tags.
func (hc *HostsClient) GetTags(ctx context.Context, opts ...RequestOption) (HostsControllerGetAllHostTagsRes, error) {
	return hc.client.HostsControllerGetAllHostTags(ctx, opts...)
}

// Reorder reorders hosts.
func (hc *HostsClient) Reorder(ctx context.Context, request *ReorderHostRequestDto, opts ...RequestOption) (HostsControllerReorderHostsRes, error) {
	return hc.client.HostsControllerReorderHosts(ctx, request, opts...)
}

// ---

// AuthClient provides organized access to authentication operations.
type AuthClient struct {
	client *Client
}

// NewAuthClient creates a new AuthClient.
func NewAuthClient(client *Client) *AuthClient {
	return &AuthClient{client: client}
}

// Login authenticates a user.
func (ac *AuthClient) Login(ctx context.Context, request *LoginRequestDto, opts ...RequestOption) (AuthControllerLoginRes, error) {
	return ac.client.AuthControllerLogin(ctx, request, opts...)
}

// Register registers a new user.
func (ac *AuthClient) Register(ctx context.Context, request *RegisterRequestDto, opts ...RequestOption) (AuthControllerRegisterRes, error) {
	return ac.client.AuthControllerRegister(ctx, request, opts...)
}

// GetStatus gets the authentication status.
func (ac *AuthClient) GetStatus(ctx context.Context, opts ...RequestOption) (AuthControllerGetStatusRes, error) {
	return ac.client.AuthControllerGetStatus(ctx, opts...)
}

// OAuth2Authorize initiates OAuth2 authorization.
func (ac *AuthClient) OAuth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequestDto, opts ...RequestOption) (AuthControllerOauth2AuthorizeRes, error) {
	return ac.client.AuthControllerOauth2Authorize(ctx, request, opts...)
}

// OAuth2Callback handles OAuth2 callback.
func (ac *AuthClient) OAuth2Callback(ctx context.Context, request *OAuth2CallbackRequestDto, opts ...RequestOption) (AuthControllerOauth2CallbackRes, error) {
	return ac.client.AuthControllerOauth2Callback(ctx, request, opts...)
}

// TelegramCallback handles Telegram OAuth2 callback.
func (ac *AuthClient) TelegramCallback(ctx context.Context, request *TelegramCallbackRequestDto, opts ...RequestOption) (AuthControllerTelegramCallbackRes, error) {
	return ac.client.AuthControllerTelegramCallback(ctx, request, opts...)
}

// PasskeyAuthenticationOptions gets passkey authentication options.
func (ac *AuthClient) PasskeyAuthenticationOptions(ctx context.Context, opts ...RequestOption) (AuthControllerPasskeyAuthenticationOptionsRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationOptions(ctx, opts...)
}

// PasskeyAuthenticationVerify verifies passkey authentication.
func (ac *AuthClient) PasskeyAuthenticationVerify(ctx context.Context, request *VerifyPasskeyAuthenticationRequestDto, opts ...RequestOption) (AuthControllerPasskeyAuthenticationVerifyRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationVerify(ctx, request, opts...)
}

// ---

// SystemClient provides organized access to system operations.
type SystemClient struct {
	client *Client
}

// NewSystemClient creates a new SystemClient.
func NewSystemClient(client *Client) *SystemClient {
	return &SystemClient{client: client}
}

// GetHealth gets system health status.
func (sc *SystemClient) GetHealth(ctx context.Context, opts ...RequestOption) (SystemControllerGetRemnawaveHealthRes, error) {
	return sc.client.SystemControllerGetRemnawaveHealth(ctx, opts...)
}

// GetStats gets system statistics.
func (sc *SystemClient) GetStats(ctx context.Context, opts ...RequestOption) (SystemControllerGetStatsRes, error) {
	return sc.client.SystemControllerGetStats(ctx, opts...)
}

// GetBandwidthStats gets bandwidth statistics.
func (sc *SystemClient) GetBandwidthStats(ctx context.Context, opts ...RequestOption) (SystemControllerGetBandwidthStatsRes, error) {
	return sc.client.SystemControllerGetBandwidthStats(ctx, opts...)
}

// GetNodesStatistics gets nodes statistics.
func (sc *SystemClient) GetNodesStatistics(ctx context.Context, opts ...RequestOption) (SystemControllerGetNodesStatisticsRes, error) {
	return sc.client.SystemControllerGetNodesStatistics(ctx, opts...)
}

// GetNodesMetrics gets nodes metrics.
func (sc *SystemClient) GetNodesMetrics(ctx context.Context, opts ...RequestOption) (SystemControllerGetNodesMetricsRes, error) {
	return sc.client.SystemControllerGetNodesMetrics(ctx, opts...)
}
