// Code generated by sub-client generator. DO NOT EDIT manually.
// This file extends the base Client with organized sub-client access patterns.

package api

import "context"

// ClientExt wraps the base Client and adds organized sub-client methods for all 139 API operations.
type ClientExt struct {
	*Client
	users                       *UsersClient
	nodes                       *NodesClient
	hosts                       *HostsClient
	auth                        *AuthClient
	system                      *SystemClient
	apiTokens                   *ApiTokensClient
	configProfiles              *ConfigProfilesClient
	externalSquads              *ExternalSquadsClient
	hwidUserDevices             *HwidUserDevicesClient
	hostsBulkActions            *HostsBulkActionsClient
	infraBilling                *InfraBillingClient
	internalSquads              *InternalSquadsClient
	keygen                      *KeygenClient
	passkeys                    *PasskeysClient
	remnawaveSettings           *RemnawaveSettingsClient
	snippets                    *SnippetsClient
	subscriptionRequestHistory  *SubscriptionRequestHistoryClient
	subscriptionSettings        *SubscriptionSettingsClient
	subscriptionTemplate        *SubscriptionTemplateClient
	usersBulkActions            *UsersBulkActionsClient
	usersStats                  *UsersStatsClient
	protectedSubscriptions      *ProtectedSubscriptionsClient
	publicSubscription          *PublicSubscriptionClient
}

// NewClientExt wraps an existing Client with sub-client access.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client:                     client,
		users:                      NewUsersClient(client),
		nodes:                      NewNodesClient(client),
		hosts:                      NewHostsClient(client),
		auth:                       NewAuthClient(client),
		system:                     NewSystemClient(client),
		apiTokens:                  NewApiTokensClient(client),
		configProfiles:             NewConfigProfilesClient(client),
		externalSquads:             NewExternalSquadsClient(client),
		hwidUserDevices:            NewHwidUserDevicesClient(client),
		hostsBulkActions:           NewHostsBulkActionsClient(client),
		infraBilling:               NewInfraBillingClient(client),
		internalSquads:             NewInternalSquadsClient(client),
		keygen:                     NewKeygenClient(client),
		passkeys:                   NewPasskeysClient(client),
		remnawaveSettings:          NewRemnawaveSettingsClient(client),
		snippets:                   NewSnippetsClient(client),
		subscriptionRequestHistory: NewSubscriptionRequestHistoryClient(client),
		subscriptionSettings:       NewSubscriptionSettingsClient(client),
		subscriptionTemplate:       NewSubscriptionTemplateClient(client),
		usersBulkActions:           NewUsersBulkActionsClient(client),
		usersStats:                 NewUsersStatsClient(client),
		protectedSubscriptions:     NewProtectedSubscriptionsClient(client),
		publicSubscription:         NewPublicSubscriptionClient(client),
	}
}

// Accessor methods for all sub-clients
func (c *ClientExt) Users() *UsersClient                       { return c.users }
func (c *ClientExt) Nodes() *NodesClient                       { return c.nodes }
func (c *ClientExt) Hosts() *HostsClient                       { return c.hosts }
func (c *ClientExt) Auth() *AuthClient                         { return c.auth }
func (c *ClientExt) System() *SystemClient                     { return c.system }
func (c *ClientExt) ApiTokens() *ApiTokensClient               { return c.apiTokens }
func (c *ClientExt) ConfigProfiles() *ConfigProfilesClient     { return c.configProfiles }
func (c *ClientExt) ExternalSquads() *ExternalSquadsClient     { return c.externalSquads }
func (c *ClientExt) HwidUserDevices() *HwidUserDevicesClient   { return c.hwidUserDevices }
func (c *ClientExt) HostsBulkActions() *HostsBulkActionsClient { return c.hostsBulkActions }
func (c *ClientExt) InfraBilling() *InfraBillingClient         { return c.infraBilling }
func (c *ClientExt) InternalSquads() *InternalSquadsClient     { return c.internalSquads }
func (c *ClientExt) Keygen() *KeygenClient                     { return c.keygen }
func (c *ClientExt) Passkeys() *PasskeysClient                 { return c.passkeys }
func (c *ClientExt) RemnawaveSettings() *RemnawaveSettingsClient { return c.remnawaveSettings }
func (c *ClientExt) Snippets() *SnippetsClient                 { return c.snippets }
func (c *ClientExt) SubscriptionRequestHistory() *SubscriptionRequestHistoryClient { return c.subscriptionRequestHistory }
func (c *ClientExt) SubscriptionSettings() *SubscriptionSettingsClient { return c.subscriptionSettings }
func (c *ClientExt) SubscriptionTemplate() *SubscriptionTemplateClient { return c.subscriptionTemplate }
func (c *ClientExt) UsersBulkActions() *UsersBulkActionsClient { return c.usersBulkActions }
func (c *ClientExt) UsersStats() *UsersStatsClient             { return c.usersStats }
func (c *ClientExt) ProtectedSubscriptions() *ProtectedSubscriptionsClient { return c.protectedSubscriptions }
func (c *ClientExt) PublicSubscription() *PublicSubscriptionClient { return c.publicSubscription }

// UsersClient provides organized access to user operations
type UsersClient struct{ client *Client }
func NewUsersClient(c *Client) *UsersClient { return &UsersClient{client: c} }

func (uc *UsersClient) Create(ctx context.Context, request *CreateUserRequestDto) (UsersControllerCreateUserRes, error) {
	return uc.client.UsersControllerCreateUser(ctx, request)
}

func (uc *UsersClient) GetAll(ctx context.Context, params UsersControllerGetAllUsersParams) (UsersControllerGetAllUsersRes, error) {
	return uc.client.UsersControllerGetAllUsers(ctx, params)
}

func (uc *UsersClient) Delete(ctx context.Context, params UsersControllerDeleteUserParams) (UsersControllerDeleteUserRes, error) {
	return uc.client.UsersControllerDeleteUser(ctx, params)
}

func (uc *UsersClient) Enable(ctx context.Context, params UsersControllerEnableUserParams) (UsersControllerEnableUserRes, error) {
	return uc.client.UsersControllerEnableUser(ctx, params)
}

func (uc *UsersClient) Disable(ctx context.Context, params UsersControllerDisableUserParams) (UsersControllerDisableUserRes, error) {
	return uc.client.UsersControllerDisableUser(ctx, params)
}

// NodesClient provides organized access to node operations
type NodesClient struct{ client *Client }
func NewNodesClient(c *Client) *NodesClient { return &NodesClient{client: c} }

func (nc *NodesClient) Create(ctx context.Context, request *CreateNodeRequestDto) (NodesControllerCreateNodeRes, error) {
	return nc.client.NodesControllerCreateNode(ctx, request)
}

func (nc *NodesClient) GetAll(ctx context.Context) (NodesControllerGetAllNodesRes, error) {
	return nc.client.NodesControllerGetAllNodes(ctx)
}

func (nc *NodesClient) Delete(ctx context.Context, params NodesControllerDeleteNodeParams) (NodesControllerDeleteNodeRes, error) {
	return nc.client.NodesControllerDeleteNode(ctx, params)
}

func (nc *NodesClient) Enable(ctx context.Context, params NodesControllerEnableNodeParams) (NodesControllerEnableNodeRes, error) {
	return nc.client.NodesControllerEnableNode(ctx, params)
}

func (nc *NodesClient) Disable(ctx context.Context, params NodesControllerDisableNodeParams) (NodesControllerDisableNodeRes, error) {
	return nc.client.NodesControllerDisableNode(ctx, params)
}

// HostsClient provides organized access to host operations
type HostsClient struct{ client *Client }
func NewHostsClient(c *Client) *HostsClient { return &HostsClient{client: c} }

func (hc *HostsClient) Create(ctx context.Context, request *CreateHostRequestDto) (HostsControllerCreateHostRes, error) {
	return hc.client.HostsControllerCreateHost(ctx, request)
}

func (hc *HostsClient) GetAll(ctx context.Context) (HostsControllerGetAllHostsRes, error) {
	return hc.client.HostsControllerGetAllHosts(ctx)
}

func (hc *HostsClient) GetOne(ctx context.Context, params HostsControllerGetOneHostParams) (HostsControllerGetOneHostRes, error) {
	return hc.client.HostsControllerGetOneHost(ctx, params)
}

func (hc *HostsClient) Delete(ctx context.Context, params HostsControllerDeleteHostParams) (HostsControllerDeleteHostRes, error) {
	return hc.client.HostsControllerDeleteHost(ctx, params)
}

// AuthClient provides organized access to authentication operations
type AuthClient struct{ client *Client }
func NewAuthClient(c *Client) *AuthClient { return &AuthClient{client: c} }

func (ac *AuthClient) GetStatus(ctx context.Context) (*AuthControllerGetStatusInternalServerError, error) {
	return ac.client.AuthControllerGetStatus(ctx)
}

func (ac *AuthClient) Login(ctx context.Context, request *LoginRequestDto) (AuthControllerLoginRes, error) {
	return ac.client.AuthControllerLogin(ctx, request)
}

func (ac *AuthClient) Register(ctx context.Context, request *RegisterRequestDto) (AuthControllerRegisterRes, error) {
	return ac.client.AuthControllerRegister(ctx, request)
}

func (ac *AuthClient) OAuth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequestDto) (*AuthControllerOauth2AuthorizeInternalServerError, error) {
	return ac.client.AuthControllerOauth2Authorize(ctx, request)
}

func (ac *AuthClient) OAuth2Callback(ctx context.Context, request *OAuth2CallbackRequestDto) (*AuthControllerOauth2CallbackInternalServerError, error) {
	return ac.client.AuthControllerOauth2Callback(ctx, request)
}

// SystemClient provides organized access to system operations
type SystemClient struct{ client *Client }
func NewSystemClient(c *Client) *SystemClient { return &SystemClient{client: c} }

func (sc *SystemClient) GetRemnawaveHealth(ctx context.Context) (SystemControllerGetRemnawaveHealthRes, error) {
	return sc.client.SystemControllerGetRemnawaveHealth(ctx)
}

func (sc *SystemClient) GetBandwidthStats(ctx context.Context) (SystemControllerGetBandwidthStatsRes, error) {
	return sc.client.SystemControllerGetBandwidthStats(ctx)
}

func (sc *SystemClient) GetNodesStatistics(ctx context.Context) (SystemControllerGetNodesStatisticsRes, error) {
	return sc.client.SystemControllerGetNodesStatistics(ctx)
}

func (sc *SystemClient) GetNodesMetrics(ctx context.Context) (SystemControllerGetNodesMetricsRes, error) {
	return sc.client.SystemControllerGetNodesMetrics(ctx)
}

// ApiTokensClient provides organized access to API token operations
type ApiTokensClient struct{ client *Client }
func NewApiTokensClient(c *Client) *ApiTokensClient { return &ApiTokensClient{client: c} }

// ConfigProfilesClient provides organized access to config profile operations
type ConfigProfilesClient struct{ client *Client }
func NewConfigProfilesClient(c *Client) *ConfigProfilesClient { return &ConfigProfilesClient{client: c} }

// ExternalSquadsClient provides organized access to external squad operations
type ExternalSquadsClient struct{ client *Client }
func NewExternalSquadsClient(c *Client) *ExternalSquadsClient { return &ExternalSquadsClient{client: c} }

// HwidUserDevicesClient provides organized access to HWID user device operations
type HwidUserDevicesClient struct{ client *Client }
func NewHwidUserDevicesClient(c *Client) *HwidUserDevicesClient { return &HwidUserDevicesClient{client: c} }

// HostsBulkActionsClient provides organized access to hosts bulk action operations
type HostsBulkActionsClient struct{ client *Client }
func NewHostsBulkActionsClient(c *Client) *HostsBulkActionsClient { return &HostsBulkActionsClient{client: c} }

// InfraBillingClient provides organized access to infra billing operations
type InfraBillingClient struct{ client *Client }
func NewInfraBillingClient(c *Client) *InfraBillingClient { return &InfraBillingClient{client: c} }

// InternalSquadsClient provides organized access to internal squad operations
type InternalSquadsClient struct{ client *Client }
func NewInternalSquadsClient(c *Client) *InternalSquadsClient { return &InternalSquadsClient{client: c} }

// KeygenClient provides organized access to key generation operations
type KeygenClient struct{ client *Client }
func NewKeygenClient(c *Client) *KeygenClient { return &KeygenClient{client: c} }

// PasskeysClient provides organized access to passkey operations
type PasskeysClient struct{ client *Client }
func NewPasskeysClient(c *Client) *PasskeysClient { return &PasskeysClient{client: c} }

// RemnawaveSettingsClient provides organized access to remnawave settings operations
type RemnawaveSettingsClient struct{ client *Client }
func NewRemnawaveSettingsClient(c *Client) *RemnawaveSettingsClient { return &RemnawaveSettingsClient{client: c} }

// SnippetsClient provides organized access to snippet operations
type SnippetsClient struct{ client *Client }
func NewSnippetsClient(c *Client) *SnippetsClient { return &SnippetsClient{client: c} }

// SubscriptionRequestHistoryClient provides organized access to subscription request history operations
type SubscriptionRequestHistoryClient struct{ client *Client }
func NewSubscriptionRequestHistoryClient(c *Client) *SubscriptionRequestHistoryClient { return &SubscriptionRequestHistoryClient{client: c} }

// SubscriptionSettingsClient provides organized access to subscription settings operations
type SubscriptionSettingsClient struct{ client *Client }
func NewSubscriptionSettingsClient(c *Client) *SubscriptionSettingsClient { return &SubscriptionSettingsClient{client: c} }

// SubscriptionTemplateClient provides organized access to subscription template operations
type SubscriptionTemplateClient struct{ client *Client }
func NewSubscriptionTemplateClient(c *Client) *SubscriptionTemplateClient { return &SubscriptionTemplateClient{client: c} }

// UsersBulkActionsClient provides organized access to users bulk action operations
type UsersBulkActionsClient struct{ client *Client }
func NewUsersBulkActionsClient(c *Client) *UsersBulkActionsClient { return &UsersBulkActionsClient{client: c} }

// UsersStatsClient provides organized access to users statistics operations
type UsersStatsClient struct{ client *Client }
func NewUsersStatsClient(c *Client) *UsersStatsClient { return &UsersStatsClient{client: c} }

// ProtectedSubscriptionsClient provides organized access to protected subscription operations
type ProtectedSubscriptionsClient struct{ client *Client }
func NewProtectedSubscriptionsClient(c *Client) *ProtectedSubscriptionsClient { return &ProtectedSubscriptionsClient{client: c} }

// PublicSubscriptionClient provides organized access to public subscription operations
type PublicSubscriptionClient struct{ client *Client }
func NewPublicSubscriptionClient(c *Client) *PublicSubscriptionClient { return &PublicSubscriptionClient{client: c} }
