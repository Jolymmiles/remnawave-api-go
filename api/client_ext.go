// Code generated by sub-client generator. DO NOT EDIT manually.
// This file extends the base Client with organized sub-client access patterns.

package api

import "context"

// ClientExt wraps the base Client and adds organized sub-client methods.
type ClientExt struct {
	*Client
	users   *UsersClient
	nodes   *NodesClient
	hosts   *HostsClient
	auth    *AuthClient
	system  *SystemClient
}

// NewClientExt wraps an existing Client with sub-client access.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client: client,
		users:  NewUsersClient(client),
		nodes:  NewNodesClient(client),
		hosts:  NewHostsClient(client),
		auth:   NewAuthClient(client),
		system: NewSystemClient(client),
	}
}

func (c *ClientExt) Users() *UsersClient     { return c.users }
func (c *ClientExt) Nodes() *NodesClient     { return c.nodes }
func (c *ClientExt) Hosts() *HostsClient     { return c.hosts }
func (c *ClientExt) Auth() *AuthClient       { return c.auth }
func (c *ClientExt) System() *SystemClient   { return c.system }

// UsersClient provides organized access to user operations
type UsersClient struct{ client *Client }
func NewUsersClient(c *Client) *UsersClient { return &UsersClient{client: c} }
func (uc *UsersClient) GetAll(ctx context.Context) (UsersControllerGetAllUsersRes, error) {
	return uc.client.UsersControllerGetAllUsers(ctx, UsersControllerGetAllUsersParams{})
}
func (uc *UsersClient) NewPaginationHelper(pageSize int) *PaginationHelper {
	return NewPaginationHelper(pageSize)
}
func (uc *UsersClient) Create(ctx context.Context, request *CreateUserRequestDto, ) (UsersControllerCreateUserRes, error) {
	return uc.client.UsersControllerCreateUser(ctx, request)
}
func (uc *UsersClient) Update(ctx context.Context, request *UpdateUserRequestDto, ) (UsersControllerUpdateUserRes, error) {
	return uc.client.UsersControllerUpdateUser(ctx, request)
}
func (uc *UsersClient) GetByID(ctx context.Context, uuid string, ) (UsersControllerGetUserByUuidRes, error) {
	return uc.client.UsersControllerGetUserByUuid(ctx, UsersControllerGetUserByUuidParams{UUID: uuid})
}
func (uc *UsersClient) Delete(ctx context.Context, uuid string, ) (UsersControllerDeleteUserRes, error) {
	return uc.client.UsersControllerDeleteUser(ctx, UsersControllerDeleteUserParams{UUID: uuid})
}
func (uc *UsersClient) GetByUsername(ctx context.Context, username string, ) (UsersControllerGetUserByUsernameRes, error) {
	return uc.client.UsersControllerGetUserByUsername(ctx, UsersControllerGetUserByUsernameParams{Username: username})
}
func (uc *UsersClient) GetByEmail(ctx context.Context, email string, ) (UsersControllerGetUsersByEmailRes, error) {
	return uc.client.UsersControllerGetUsersByEmail(ctx, UsersControllerGetUsersByEmailParams{Email: email})
}
func (uc *UsersClient) GetByShortUUID(ctx context.Context, shortUUID string, ) (UsersControllerGetUserByShortUuidRes, error) {
	return uc.client.UsersControllerGetUserByShortUuid(ctx, UsersControllerGetUserByShortUuidParams{ShortUuid: shortUUID})
}
func (uc *UsersClient) GetByTelegramID(ctx context.Context, telegramID string, ) (UsersControllerGetUserByTelegramIdRes, error) {
	return uc.client.UsersControllerGetUserByTelegramId(ctx, UsersControllerGetUserByTelegramIdParams{TelegramId: telegramID})
}
func (uc *UsersClient) GetTags(ctx context.Context, ) (UsersControllerGetAllTagsRes, error) {
	return uc.client.UsersControllerGetAllTags(ctx)
}
func (uc *UsersClient) GetByTag(ctx context.Context, tag string, ) (UsersControllerGetUsersByTagRes, error) {
	return uc.client.UsersControllerGetUsersByTag(ctx, UsersControllerGetUsersByTagParams{Tag: tag})
}
func (uc *UsersClient) GetAccessibleNodes(ctx context.Context, uuid string, ) (UsersControllerGetUserAccessibleNodesRes, error) {
	return uc.client.UsersControllerGetUserAccessibleNodes(ctx, UsersControllerGetUserAccessibleNodesParams{UUID: uuid})
}
func (uc *UsersClient) GetSubscriptionRequestHistory(ctx context.Context, uuid string, ) (UsersControllerGetUserSubscriptionRequestHistoryRes, error) {
	return uc.client.UsersControllerGetUserSubscriptionRequestHistory(ctx, UsersControllerGetUserSubscriptionRequestHistoryParams{UUID: uuid})
}
func (uc *UsersClient) Enable(ctx context.Context, uuid string, ) (UsersControllerEnableUserRes, error) {
	return uc.client.UsersControllerEnableUser(ctx, UsersControllerEnableUserParams{UUID: uuid})
}
func (uc *UsersClient) Disable(ctx context.Context, uuid string, ) (UsersControllerDisableUserRes, error) {
	return uc.client.UsersControllerDisableUser(ctx, UsersControllerDisableUserParams{UUID: uuid})
}
func (uc *UsersClient) ResetTraffic(ctx context.Context, uuid string, ) (UsersControllerResetUserTrafficRes, error) {
	return uc.client.UsersControllerResetUserTraffic(ctx, UsersControllerResetUserTrafficParams{UUID: uuid})
}
func (uc *UsersClient) RevokeSubscription(ctx context.Context, uuid string, ) (UsersControllerRevokeUserSubscriptionRes, error) {
	return uc.client.UsersControllerRevokeUserSubscription(ctx, &RevokeUserSubscriptionBodyDto{}, UsersControllerRevokeUserSubscriptionParams{UUID: uuid})
}

// NodesClient provides organized access to node operations
type NodesClient struct{ client *Client }
func NewNodesClient(c *Client) *NodesClient { return &NodesClient{client: c} }
func (nc *NodesClient) GetAll(ctx context.Context, ) (NodesControllerGetAllNodesRes, error) {
	return nc.client.NodesControllerGetAllNodes(ctx)
}
func (nc *NodesClient) NewPaginationHelper(pageSize int) *PaginationHelper {
	return NewPaginationHelper(pageSize)
}
func (nc *NodesClient) Create(ctx context.Context, request *CreateNodeRequestDto, ) (NodesControllerCreateNodeRes, error) {
	return nc.client.NodesControllerCreateNode(ctx, request)
}
func (nc *NodesClient) Update(ctx context.Context, request *UpdateNodeRequestDto, ) (NodesControllerUpdateNodeRes, error) {
	return nc.client.NodesControllerUpdateNode(ctx, request)
}
func (nc *NodesClient) GetByID(ctx context.Context, uuid string, ) (NodesControllerGetOneNodeRes, error) {
	return nc.client.NodesControllerGetOneNode(ctx, NodesControllerGetOneNodeParams{UUID: uuid})
}
func (nc *NodesClient) Delete(ctx context.Context, uuid string, ) (NodesControllerDeleteNodeRes, error) {
	return nc.client.NodesControllerDeleteNode(ctx, NodesControllerDeleteNodeParams{UUID: uuid})
}
func (nc *NodesClient) Enable(ctx context.Context, uuid string, ) (NodesControllerEnableNodeRes, error) {
	return nc.client.NodesControllerEnableNode(ctx, NodesControllerEnableNodeParams{UUID: uuid})
}
func (nc *NodesClient) Disable(ctx context.Context, uuid string, ) (NodesControllerDisableNodeRes, error) {
	return nc.client.NodesControllerDisableNode(ctx, NodesControllerDisableNodeParams{UUID: uuid})
}
func (nc *NodesClient) Restart(ctx context.Context, uuid string, ) (NodesControllerRestartNodeRes, error) {
	return nc.client.NodesControllerRestartNode(ctx, NodesControllerRestartNodeParams{UUID: uuid})
}
func (nc *NodesClient) RestartAll(ctx context.Context, ) (NodesControllerRestartAllNodesRes, error) {
	return nc.client.NodesControllerRestartAllNodes(ctx, &RestartAllNodesRequestBodyDto{})
}
func (nc *NodesClient) Reorder(ctx context.Context, request *ReorderNodeRequestDto, ) (NodesControllerReorderNodesRes, error) {
	return nc.client.NodesControllerReorderNodes(ctx, request)
}

// HostsClient provides organized access to host operations
type HostsClient struct{ client *Client }
func NewHostsClient(c *Client) *HostsClient { return &HostsClient{client: c} }
func (hc *HostsClient) GetAll(ctx context.Context, ) (HostsControllerGetAllHostsRes, error) {
	return hc.client.HostsControllerGetAllHosts(ctx)
}
func (hc *HostsClient) NewPaginationHelper(pageSize int) *PaginationHelper {
	return NewPaginationHelper(pageSize)
}
func (hc *HostsClient) Create(ctx context.Context, request *CreateHostRequestDto, ) (HostsControllerCreateHostRes, error) {
	return hc.client.HostsControllerCreateHost(ctx, request)
}
func (hc *HostsClient) Update(ctx context.Context, request *UpdateHostRequestDto, ) (HostsControllerUpdateHostRes, error) {
	return hc.client.HostsControllerUpdateHost(ctx, request)
}
func (hc *HostsClient) GetByID(ctx context.Context, uuid string, ) (HostsControllerGetOneHostRes, error) {
	return hc.client.HostsControllerGetOneHost(ctx, HostsControllerGetOneHostParams{UUID: uuid})
}
func (hc *HostsClient) Delete(ctx context.Context, uuid string, ) (HostsControllerDeleteHostRes, error) {
	return hc.client.HostsControllerDeleteHost(ctx, HostsControllerDeleteHostParams{UUID: uuid})
}
func (hc *HostsClient) GetTags(ctx context.Context, ) (HostsControllerGetAllHostTagsRes, error) {
	return hc.client.HostsControllerGetAllHostTags(ctx)
}
func (hc *HostsClient) Reorder(ctx context.Context, request *ReorderHostRequestDto, ) (HostsControllerReorderHostsRes, error) {
	return hc.client.HostsControllerReorderHosts(ctx, request)
}

// AuthClient provides organized access to authentication operations
type AuthClient struct{ client *Client }
func NewAuthClient(c *Client) *AuthClient { return &AuthClient{client: c} }
func (ac *AuthClient) Login(ctx context.Context, request *LoginRequestDto, ) (AuthControllerLoginRes, error) {
	return ac.client.AuthControllerLogin(ctx, request)
}
func (ac *AuthClient) Register(ctx context.Context, request *RegisterRequestDto, ) (AuthControllerRegisterRes, error) {
	return ac.client.AuthControllerRegister(ctx, request)
}
func (ac *AuthClient) GetStatus(ctx context.Context, ) (AuthControllerGetStatusRes, error) {
	return ac.client.AuthControllerGetStatus(ctx)
}
func (ac *AuthClient) OAuth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequestDto, ) (AuthControllerOauth2AuthorizeRes, error) {
	return ac.client.AuthControllerOauth2Authorize(ctx, request)
}
func (ac *AuthClient) OAuth2Callback(ctx context.Context, request *OAuth2CallbackRequestDto, ) (AuthControllerOauth2CallbackRes, error) {
	return ac.client.AuthControllerOauth2Callback(ctx, request)
}
func (ac *AuthClient) TelegramCallback(ctx context.Context, request *TelegramCallbackRequestDto, ) (AuthControllerTelegramCallbackRes, error) {
	return ac.client.AuthControllerTelegramCallback(ctx, request)
}
func (ac *AuthClient) PasskeyAuthenticationOptions(ctx context.Context, ) (AuthControllerPasskeyAuthenticationOptionsRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationOptions(ctx)
}
func (ac *AuthClient) PasskeyAuthenticationVerify(ctx context.Context, request *VerifyPasskeyAuthenticationRequestDto, ) (AuthControllerPasskeyAuthenticationVerifyRes, error) {
	return ac.client.AuthControllerPasskeyAuthenticationVerify(ctx, request)
}

// SystemClient provides organized access to system operations
type SystemClient struct{ client *Client }
func NewSystemClient(c *Client) *SystemClient { return &SystemClient{client: c} }
func (sc *SystemClient) GetHealth(ctx context.Context, ) (SystemControllerGetRemnawaveHealthRes, error) {
	return sc.client.SystemControllerGetRemnawaveHealth(ctx)
}
func (sc *SystemClient) GetStats(ctx context.Context, ) (SystemControllerGetStatsRes, error) {
	return sc.client.SystemControllerGetStats(ctx)
}
func (sc *SystemClient) GetBandwidthStats(ctx context.Context, ) (SystemControllerGetBandwidthStatsRes, error) {
	return sc.client.SystemControllerGetBandwidthStats(ctx)
}
func (sc *SystemClient) GetNodesStatistics(ctx context.Context, ) (SystemControllerGetNodesStatisticsRes, error) {
	return sc.client.SystemControllerGetNodesStatistics(ctx)
}
func (sc *SystemClient) GetNodesMetrics(ctx context.Context, ) (SystemControllerGetNodesMetricsRes, error) {
	return sc.client.SystemControllerGetNodesMetrics(ctx)
}
