// Code generated by sub-client generator. DO NOT EDIT manually.
// This file extends the base Client with organized sub-client access patterns.

package api

import "context"

// ClientExt wraps the base Client and adds organized sub-client methods.
type ClientExt struct {
	*Client
	users   *UsersClient
	nodes   *NodesClient
	hosts   *HostsClient
	auth    *AuthClient
	system  *SystemClient
}

// NewClientExt wraps an existing Client with sub-client access.
func NewClientExt(client *Client) *ClientExt {
	return &ClientExt{
		Client: client,
		users:  NewUsersClient(client),
		nodes:  NewNodesClient(client),
		hosts:  NewHostsClient(client),
		auth:   NewAuthClient(client),
		system: NewSystemClient(client),
	}
}

func (c *ClientExt) Users() *UsersClient     { return c.users }
func (c *ClientExt) Nodes() *NodesClient     { return c.nodes }
func (c *ClientExt) Hosts() *HostsClient     { return c.hosts }
func (c *ClientExt) Auth() *AuthClient       { return c.auth }
func (c *ClientExt) System() *SystemClient   { return c.system }

// UsersClient provides organized access to user operations
type UsersClient struct{ client *Client }
func NewUsersClient(c *Client) *UsersClient { return &UsersClient{client: c} }

func (uc *UsersClient) Create(ctx context.Context, request *CreateUserRequestDto) (UsersControllerCreateUserRes, error) {
	return uc.client.UsersControllerCreateUser(ctx, request)
}

func (uc *UsersClient) GetAll(ctx context.Context, params UsersControllerGetAllUsersParams) (UsersControllerGetAllUsersRes, error) {
	return uc.client.UsersControllerGetAllUsers(ctx, params)
}

func (uc *UsersClient) Delete(ctx context.Context, params UsersControllerDeleteUserParams) (UsersControllerDeleteUserRes, error) {
	return uc.client.UsersControllerDeleteUser(ctx, params)
}

func (uc *UsersClient) Enable(ctx context.Context, params UsersControllerEnableUserParams) (UsersControllerEnableUserRes, error) {
	return uc.client.UsersControllerEnableUser(ctx, params)
}

func (uc *UsersClient) Disable(ctx context.Context, params UsersControllerDisableUserParams) (UsersControllerDisableUserRes, error) {
	return uc.client.UsersControllerDisableUser(ctx, params)
}

// NodesClient provides organized access to node operations
type NodesClient struct{ client *Client }
func NewNodesClient(c *Client) *NodesClient { return &NodesClient{client: c} }

func (nc *NodesClient) Create(ctx context.Context, request *CreateNodeRequestDto) (NodesControllerCreateNodeRes, error) {
	return nc.client.NodesControllerCreateNode(ctx, request)
}

func (nc *NodesClient) GetAll(ctx context.Context) (NodesControllerGetAllNodesRes, error) {
	return nc.client.NodesControllerGetAllNodes(ctx)
}

func (nc *NodesClient) Delete(ctx context.Context, params NodesControllerDeleteNodeParams) (NodesControllerDeleteNodeRes, error) {
	return nc.client.NodesControllerDeleteNode(ctx, params)
}

func (nc *NodesClient) Enable(ctx context.Context, params NodesControllerEnableNodeParams) (NodesControllerEnableNodeRes, error) {
	return nc.client.NodesControllerEnableNode(ctx, params)
}

func (nc *NodesClient) Disable(ctx context.Context, params NodesControllerDisableNodeParams) (NodesControllerDisableNodeRes, error) {
	return nc.client.NodesControllerDisableNode(ctx, params)
}

// HostsClient provides organized access to host operations
type HostsClient struct{ client *Client }
func NewHostsClient(c *Client) *HostsClient { return &HostsClient{client: c} }

func (hc *HostsClient) Create(ctx context.Context, request *CreateHostRequestDto) (HostsControllerCreateHostRes, error) {
	return hc.client.HostsControllerCreateHost(ctx, request)
}

func (hc *HostsClient) GetAll(ctx context.Context) (HostsControllerGetAllHostsRes, error) {
	return hc.client.HostsControllerGetAllHosts(ctx)
}

func (hc *HostsClient) GetOne(ctx context.Context, params HostsControllerGetOneHostParams) (HostsControllerGetOneHostRes, error) {
	return hc.client.HostsControllerGetOneHost(ctx, params)
}

func (hc *HostsClient) Delete(ctx context.Context, params HostsControllerDeleteHostParams) (HostsControllerDeleteHostRes, error) {
	return hc.client.HostsControllerDeleteHost(ctx, params)
}

// AuthClient provides organized access to authentication operations
type AuthClient struct{ client *Client }
func NewAuthClient(c *Client) *AuthClient { return &AuthClient{client: c} }

func (ac *AuthClient) GetStatus(ctx context.Context) (*AuthControllerGetStatusInternalServerError, error) {
	return ac.client.AuthControllerGetStatus(ctx)
}

func (ac *AuthClient) Login(ctx context.Context, request *LoginRequestDto) (AuthControllerLoginRes, error) {
	return ac.client.AuthControllerLogin(ctx, request)
}

func (ac *AuthClient) Register(ctx context.Context, request *RegisterRequestDto) (AuthControllerRegisterRes, error) {
	return ac.client.AuthControllerRegister(ctx, request)
}

func (ac *AuthClient) OAuth2Authorize(ctx context.Context, request *OAuth2AuthorizeRequestDto) (*AuthControllerOauth2AuthorizeInternalServerError, error) {
	return ac.client.AuthControllerOauth2Authorize(ctx, request)
}

func (ac *AuthClient) OAuth2Callback(ctx context.Context, request *OAuth2CallbackRequestDto) (*AuthControllerOauth2CallbackInternalServerError, error) {
	return ac.client.AuthControllerOauth2Callback(ctx, request)
}

// SystemClient provides organized access to system operations
type SystemClient struct{ client *Client }
func NewSystemClient(c *Client) *SystemClient { return &SystemClient{client: c} }

func (sc *SystemClient) GetRemnawaveHealth(ctx context.Context) (SystemControllerGetRemnawaveHealthRes, error) {
	return sc.client.SystemControllerGetRemnawaveHealth(ctx)
}

func (sc *SystemClient) GetBandwidthStats(ctx context.Context) (SystemControllerGetBandwidthStatsRes, error) {
	return sc.client.SystemControllerGetBandwidthStats(ctx)
}

func (sc *SystemClient) GetNodesStatistics(ctx context.Context) (SystemControllerGetNodesStatisticsRes, error) {
	return sc.client.SystemControllerGetNodesStatistics(ctx)
}

func (sc *SystemClient) GetNodesMetrics(ctx context.Context) (SystemControllerGetNodesMetricsRes, error) {
	return sc.client.SystemControllerGetNodesMetrics(ctx)
}
