// Code generated by ogen, DO NOT EDIT.

package api

// setDefaults set default value of fields.
func (s *BulkAllUpdateUsersRequestDto) setDefaults() {
	{
		val := BulkAllUpdateUsersRequestDtoStatus("ACTIVE")
		s.Status.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *BulkDeleteUsersByStatusRequestDto) setDefaults() {
	{
		val := BulkDeleteUsersByStatusRequestDtoStatus("ACTIVE")
		s.Status.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *BulkUpdateUsersRequestDtoFields) setDefaults() {
	{
		val := BulkUpdateUsersRequestDtoFieldsStatus("ACTIVE")
		s.Status.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *CreateHostRequestDto) setDefaults() {
	{
		val := bool(false)
		s.IsDisabled.SetTo(val)
	}
	{
		val := CreateHostRequestDtoSecurityLayer("DEFAULT")
		s.SecurityLayer.SetTo(val)
	}
	{
		val := bool(false)
		s.IsHidden.SetTo(val)
	}
	{
		val := bool(false)
		s.OverrideSniFromAddress.SetTo(val)
	}
	{
		val := bool(false)
		s.AllowInsecure.SetTo(val)
	}
	{
		val := bool(false)
		s.ShuffleHost.SetTo(val)
	}
	{
		val := bool(false)
		s.MihomoX25519.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *CreateNodeRequestDto) setDefaults() {
	{
		val := bool(false)
		s.IsTrafficTrackingActive.SetTo(val)
	}
	{
		val := string("XX")
		s.CountryCode.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *CreateUserRequestDto) setDefaults() {
	{
		val := CreateUserRequestDtoStatus("ACTIVE")
		s.Status.SetTo(val)
	}
	{
		val := CreateUserRequestDtoTrafficLimitStrategy("NO_RESET")
		s.TrafficLimitStrategy.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *GetAllUsersResponseDtoResponseUsersItem) setDefaults() {
	{
		val := GetAllUsersResponseDtoResponseUsersItemStatus("ACTIVE")
		s.Status.SetTo(val)
	}
	{
		val := int(0)
		s.TrafficLimitBytes.SetTo(val)
	}
	{
		val := GetAllUsersResponseDtoResponseUsersItemTrafficLimitStrategy("NO_RESET")
		s.TrafficLimitStrategy.SetTo(val)
	}
	{
		val := int(0)
		s.LastTriggeredThreshold.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *GetRawSubscriptionByShortUuidResponseDtoResponseUser) setDefaults() {
	{
		val := GetRawSubscriptionByShortUuidResponseDtoResponseUserStatus("ACTIVE")
		s.Status.SetTo(val)
	}
	{
		val := int(0)
		s.TrafficLimitBytes.SetTo(val)
	}
	{
		val := GetRawSubscriptionByShortUuidResponseDtoResponseUserTrafficLimitStrategy("NO_RESET")
		s.TrafficLimitStrategy.SetTo(val)
	}
	{
		val := int(0)
		s.LastTriggeredThreshold.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *HostListResponseResponseItem) setDefaults() {
	{
		val := bool(false)
		s.IsDisabled.SetTo(val)
	}
	{
		val := HostListResponseResponseItemSecurityLayer("DEFAULT")
		s.SecurityLayer.SetTo(val)
	}
	{
		val := bool(false)
		s.IsHidden.SetTo(val)
	}
	{
		val := bool(false)
		s.OverrideSniFromAddress.SetTo(val)
	}
	{
		val := bool(false)
		s.AllowInsecure.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *HostResponseResponse) setDefaults() {
	{
		val := bool(false)
		s.IsDisabled.SetTo(val)
	}
	{
		val := HostResponseResponseSecurityLayer("DEFAULT")
		s.SecurityLayer.SetTo(val)
	}
	{
		val := bool(false)
		s.IsHidden.SetTo(val)
	}
	{
		val := bool(false)
		s.OverrideSniFromAddress.SetTo(val)
	}
	{
		val := bool(false)
		s.AllowInsecure.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *UpdateUserRequestDto) setDefaults() {
	{
		val := UpdateUserRequestDtoTrafficLimitStrategy("NO_RESET")
		s.TrafficLimitStrategy.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *UserResponseResponse) setDefaults() {
	{
		val := UserResponseResponseStatus("ACTIVE")
		s.Status.SetTo(val)
	}
	{
		val := int(0)
		s.TrafficLimitBytes.SetTo(val)
	}
	{
		val := UserResponseResponseTrafficLimitStrategy("NO_RESET")
		s.TrafficLimitStrategy.SetTo(val)
	}
	{
		val := int(0)
		s.LastTriggeredThreshold.SetTo(val)
	}
}

// setDefaults set default value of fields.
func (s *UsersResponseResponseItem) setDefaults() {
	{
		val := UsersResponseResponseItemStatus("ACTIVE")
		s.Status.SetTo(val)
	}
	{
		val := int(0)
		s.TrafficLimitBytes.SetTo(val)
	}
	{
		val := UsersResponseResponseItemTrafficLimitStrategy("NO_RESET")
		s.TrafficLimitStrategy.SetTo(val)
	}
	{
		val := int(0)
		s.LastTriggeredThreshold.SetTo(val)
	}
}
