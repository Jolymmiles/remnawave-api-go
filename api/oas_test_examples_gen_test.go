// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestApiTokensControllerCreateBadRequest_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerCreateBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerCreateBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerCreateBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerCreateBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerCreateBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerCreateInternalServerError_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerCreateInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerCreateInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerDeleteBadRequest_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerDeleteBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerDeleteBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerDeleteBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerDeleteBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerDeleteBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerDeleteInternalServerError_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerDeleteInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerDeleteInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerFindAllBadRequest_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerFindAllBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerFindAllBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerFindAllBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerFindAllBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerFindAllBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerFindAllInternalServerError_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerFindAllInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerFindAllInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerGetStatusBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerGetStatusBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerGetStatusBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerGetStatusBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerGetStatusBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerGetStatusBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerGetStatusInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerGetStatusInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerGetStatusInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerLoginBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerLoginBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerLoginBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerLoginBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerLoginBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerLoginBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerLoginInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerLoginInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerLoginInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerLoginUnauthorized_EncodeDecode(t *testing.T) {
	var typ AuthControllerLoginUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerLoginUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2AuthorizeBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2AuthorizeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2AuthorizeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2AuthorizeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2AuthorizeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2AuthorizeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2AuthorizeInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2AuthorizeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2AuthorizeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2CallbackBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2CallbackBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2CallbackBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2CallbackBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2CallbackBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2CallbackBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2CallbackInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2CallbackInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2CallbackInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerPasskeyAuthenticationOptionsBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerPasskeyAuthenticationOptionsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerPasskeyAuthenticationOptionsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerPasskeyAuthenticationOptionsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerPasskeyAuthenticationOptionsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerPasskeyAuthenticationOptionsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerPasskeyAuthenticationOptionsInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerPasskeyAuthenticationOptionsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerPasskeyAuthenticationOptionsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerPasskeyAuthenticationVerifyBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerPasskeyAuthenticationVerifyBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerPasskeyAuthenticationVerifyBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerPasskeyAuthenticationVerifyBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerPasskeyAuthenticationVerifyBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerPasskeyAuthenticationVerifyBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerPasskeyAuthenticationVerifyInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerPasskeyAuthenticationVerifyInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerPasskeyAuthenticationVerifyInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerRegisterBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerRegisterBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerRegisterBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerRegisterBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerRegisterBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerRegisterBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerRegisterForbidden_EncodeDecode(t *testing.T) {
	var typ AuthControllerRegisterForbidden
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerRegisterForbidden
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerRegisterInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerRegisterInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerRegisterInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerTelegramCallbackBadRequest_EncodeDecode(t *testing.T) {
	var typ AuthControllerTelegramCallbackBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerTelegramCallbackBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerTelegramCallbackBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ AuthControllerTelegramCallbackBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerTelegramCallbackBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerTelegramCallbackInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerTelegramCallbackInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerTelegramCallbackInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingHistoryResponse_EncodeDecode(t *testing.T) {
	var typ BillingHistoryResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingHistoryResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingHistoryResponseResponse_EncodeDecode(t *testing.T) {
	var typ BillingHistoryResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingHistoryResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingHistoryResponseResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ BillingHistoryResponseResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingHistoryResponseResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingHistoryResponseResponseRecordsItemProvider_EncodeDecode(t *testing.T) {
	var typ BillingHistoryResponseResponseRecordsItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingHistoryResponseResponseRecordsItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingNodesResponse_EncodeDecode(t *testing.T) {
	var typ BillingNodesResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingNodesResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingNodesResponseResponse_EncodeDecode(t *testing.T) {
	var typ BillingNodesResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingNodesResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingNodesResponseResponseAvailableBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ BillingNodesResponseResponseAvailableBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingNodesResponseResponseAvailableBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingNodesResponseResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ BillingNodesResponseResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingNodesResponseResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingNodesResponseResponseBillingNodesItemNode_EncodeDecode(t *testing.T) {
	var typ BillingNodesResponseResponseBillingNodesItemNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingNodesResponseResponseBillingNodesItemNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingNodesResponseResponseBillingNodesItemProvider_EncodeDecode(t *testing.T) {
	var typ BillingNodesResponseResponseBillingNodesItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingNodesResponseResponseBillingNodesItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBillingNodesResponseResponseStats_EncodeDecode(t *testing.T) {
	var typ BillingNodesResponseResponseStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BillingNodesResponseResponseStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkActionResponse_EncodeDecode(t *testing.T) {
	var typ BulkActionResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkActionResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkActionResponseResponse_EncodeDecode(t *testing.T) {
	var typ BulkActionResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkActionResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersRequestDtoTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersRequestDtoTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersRequestDtoTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersByStatusRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersByStatusRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersByStatusRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersByStatusRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersByStatusRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersByStatusRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDtoFields_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDtoFields
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDtoFields
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDtoFieldsStatus_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDtoFieldsStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDtoFieldsStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDtoFieldsTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDtoFieldsTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDtoFieldsTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersSquadsRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersSquadsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersSquadsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUuidsRequest_EncodeDecode(t *testing.T) {
	var typ BulkUuidsRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUuidsRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerCreateConfigProfileBadRequest_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerCreateConfigProfileBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerCreateConfigProfileBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerCreateConfigProfileBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerCreateConfigProfileBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerCreateConfigProfileBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerCreateConfigProfileInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerCreateConfigProfileInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerCreateConfigProfileInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerDeleteConfigProfileByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerDeleteConfigProfileByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerDeleteConfigProfileByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerDeleteConfigProfileByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerDeleteConfigProfileByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerDeleteConfigProfileByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerDeleteConfigProfileByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerDeleteConfigProfileByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerDeleteConfigProfileByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetAllInboundsBadRequest_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetAllInboundsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetAllInboundsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetAllInboundsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetAllInboundsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetAllInboundsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetAllInboundsInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetAllInboundsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetAllInboundsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfileByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfileByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfileByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfileByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfileByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfileByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfileByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfileByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfileByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfilesBadRequest_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfilesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfilesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfilesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfilesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfilesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfilesInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfilesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfilesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetInboundsByProfileUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetInboundsByProfileUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetInboundsByProfileUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetInboundsByProfileUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetInboundsByProfileUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetInboundsByProfileUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetInboundsByProfileUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetInboundsByProfileUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetInboundsByProfileUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerUpdateConfigProfileBadRequest_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerUpdateConfigProfileBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerUpdateConfigProfileBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerUpdateConfigProfileBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerUpdateConfigProfileBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerUpdateConfigProfileBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerUpdateConfigProfileInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerUpdateConfigProfileInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerUpdateConfigProfileInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileResponse_EncodeDecode(t *testing.T) {
	var typ ConfigProfileResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileResponseResponse_EncodeDecode(t *testing.T) {
	var typ ConfigProfileResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileResponseResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileResponseResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileResponseResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileResponseResponseNodesItem_EncodeDecode(t *testing.T) {
	var typ ConfigProfileResponseResponseNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileResponseResponseNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateApiTokenRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateApiTokenRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateApiTokenRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateApiTokenResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateApiTokenResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateApiTokenResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateApiTokenResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateApiTokenResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateApiTokenResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileRequestDtoConfig_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileRequestDtoConfig
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileRequestDtoConfig
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateExternalSquadRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateExternalSquadRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateExternalSquadRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoAlpn_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoAlpn
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoAlpn
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoFingerprint_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoFingerprint
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoFingerprint
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoInbound_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoSecurityLayer_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingHistoryRecordRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingHistoryRecordRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingHistoryRecordRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraProviderRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraProviderRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraProviderRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInternalSquadRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInternalSquadRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInternalSquadRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeRequestDtoConfigProfile_EncodeDecode(t *testing.T) {
	var typ CreateNodeRequestDtoConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeRequestDtoConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateSubscriptionTemplateRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateSubscriptionTemplateRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateSubscriptionTemplateRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateSubscriptionTemplateRequestDtoTemplateType_EncodeDecode(t *testing.T) {
	var typ CreateSubscriptionTemplateRequestDtoTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateSubscriptionTemplateRequestDtoTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserHwidDeviceRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateUserHwidDeviceRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserHwidDeviceRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateUserRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ CreateUserRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserRequestDtoTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ CreateUserRequestDtoTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserRequestDtoTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDto_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRules_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRules
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRules
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesRulesItem_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesRulesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesRulesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesRulesItemConditionsItem_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesRulesItemConditionsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesRulesItemConditionsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesRulesItemConditionsItemOperator_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesRulesItemConditionsItemOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesRulesItemConditionsItemOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesRulesItemOperator_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesRulesItemOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesRulesItemOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesRulesItemResponseModifications_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesRulesItemResponseModifications
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesRulesItemResponseModifications
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesRulesItemResponseModificationsHeadersItem_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesRulesItemResponseModificationsHeadersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesRulesItemResponseModificationsHeadersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesRulesItemResponseType_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesRulesItemResponseType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesRulesItemResponseType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherRequestDtoResponseRulesVersion_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherRequestDtoResponseRulesVersion
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherRequestDtoResponseRulesVersion
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDto_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseInputHeaders_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseInputHeaders
	typ = make(DebugSrrMatcherResponseDtoResponseInputHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseInputHeaders
	typ2 = make(DebugSrrMatcherResponseDtoResponseInputHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseMatchedRule_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseMatchedRule
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseMatchedRule
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseMatchedRuleConditionsItem_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseMatchedRuleConditionsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseMatchedRuleConditionsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseMatchedRuleConditionsItemOperator_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseMatchedRuleConditionsItemOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseMatchedRuleConditionsItemOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseMatchedRuleOperator_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseMatchedRuleOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseMatchedRuleOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseMatchedRuleResponseModifications_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseMatchedRuleResponseModifications
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseMatchedRuleResponseModifications
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseMatchedRuleResponseModificationsHeadersItem_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseMatchedRuleResponseModificationsHeadersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseMatchedRuleResponseModificationsHeadersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseMatchedRuleResponseType_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseMatchedRuleResponseType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseMatchedRuleResponseType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseOutputHeaders_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseOutputHeaders
	typ = make(DebugSrrMatcherResponseDtoResponseOutputHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseOutputHeaders
	typ2 = make(DebugSrrMatcherResponseDtoResponseOutputHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDebugSrrMatcherResponseDtoResponseResponseType_EncodeDecode(t *testing.T) {
	var typ DebugSrrMatcherResponseDtoResponseResponseType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DebugSrrMatcherResponseDtoResponseResponseType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteAllUserHwidDevicesRequestDto_EncodeDecode(t *testing.T) {
	var typ DeleteAllUserHwidDevicesRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteAllUserHwidDevicesRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteApiTokenResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteApiTokenResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteApiTokenResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeletePasskeyRequestDto_EncodeDecode(t *testing.T) {
	var typ DeletePasskeyRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeletePasskeyRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteResponse_EncodeDecode(t *testing.T) {
	var typ DeleteResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteResponseResponse_EncodeDecode(t *testing.T) {
	var typ DeleteResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteSnippetRequestDto_EncodeDecode(t *testing.T) {
	var typ DeleteSnippetRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteSnippetRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteUserHwidDeviceRequestDto_EncodeDecode(t *testing.T) {
	var typ DeleteUserHwidDeviceRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteUserHwidDeviceRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEncryptHappCryptoLinkRequestDto_EncodeDecode(t *testing.T) {
	var typ EncryptHappCryptoLinkRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EncryptHappCryptoLinkRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEncryptHappCryptoLinkResponseDto_EncodeDecode(t *testing.T) {
	var typ EncryptHappCryptoLinkResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EncryptHappCryptoLinkResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEncryptHappCryptoLinkResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ EncryptHappCryptoLinkResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EncryptHappCryptoLinkResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEventResponse_EncodeDecode(t *testing.T) {
	var typ EventResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EventResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEventResponseResponse_EncodeDecode(t *testing.T) {
	var typ EventResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EventResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerAddUsersToExternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerAddUsersToExternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerAddUsersToExternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerAddUsersToExternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerAddUsersToExternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerAddUsersToExternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerAddUsersToExternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerAddUsersToExternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerAddUsersToExternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerCreateExternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerCreateExternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerCreateExternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerCreateExternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerCreateExternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerCreateExternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerCreateExternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerCreateExternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerCreateExternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerDeleteExternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerDeleteExternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerDeleteExternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerDeleteExternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerDeleteExternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerDeleteExternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerDeleteExternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerDeleteExternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerDeleteExternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerGetExternalSquadByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerGetExternalSquadByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerGetExternalSquadByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerGetExternalSquadByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerGetExternalSquadByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerGetExternalSquadByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerGetExternalSquadByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerGetExternalSquadByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerGetExternalSquadByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerGetExternalSquadsBadRequest_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerGetExternalSquadsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerGetExternalSquadsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerGetExternalSquadsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerGetExternalSquadsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerGetExternalSquadsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerGetExternalSquadsInternalServerError_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerGetExternalSquadsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerGetExternalSquadsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerRemoveUsersFromExternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerRemoveUsersFromExternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerRemoveUsersFromExternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerRemoveUsersFromExternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerRemoveUsersFromExternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerRemoveUsersFromExternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerRemoveUsersFromExternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerRemoveUsersFromExternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerRemoveUsersFromExternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerUpdateExternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerUpdateExternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerUpdateExternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerUpdateExternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerUpdateExternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerUpdateExternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadControllerUpdateExternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ ExternalSquadControllerUpdateExternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadControllerUpdateExternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadResponse_EncodeDecode(t *testing.T) {
	var typ ExternalSquadResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadResponseResponse_EncodeDecode(t *testing.T) {
	var typ ExternalSquadResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadResponseResponseInfo_EncodeDecode(t *testing.T) {
	var typ ExternalSquadResponseResponseInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadResponseResponseInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadResponseResponseSubscriptionSettings_EncodeDecode(t *testing.T) {
	var typ ExternalSquadResponseResponseSubscriptionSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadResponseResponseSubscriptionSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadResponseResponseTemplatesItem_EncodeDecode(t *testing.T) {
	var typ ExternalSquadResponseResponseTemplatesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadResponseResponseTemplatesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestExternalSquadResponseResponseTemplatesItemTemplateType_EncodeDecode(t *testing.T) {
	var typ ExternalSquadResponseResponseTemplatesItemTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ExternalSquadResponseResponseTemplatesItemTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDto_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDtoResponseApiKeysItem_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDtoResponseApiKeysItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDtoResponseApiKeysItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDtoResponseDocs_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDtoResponseDocs
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDtoResponseDocs
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGenerateX25519ResponseDto_EncodeDecode(t *testing.T) {
	var typ GenerateX25519ResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GenerateX25519ResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGenerateX25519ResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GenerateX25519ResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GenerateX25519ResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGenerateX25519ResponseDtoResponseKeypairsItem_EncodeDecode(t *testing.T) {
	var typ GenerateX25519ResponseDtoResponseKeypairsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GenerateX25519ResponseDtoResponseKeypairsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHwidDevicesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllHwidDevicesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHwidDevicesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHwidDevicesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllHwidDevicesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHwidDevicesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHwidDevicesResponseDtoResponseDevicesItem_EncodeDecode(t *testing.T) {
	var typ GetAllHwidDevicesResponseDtoResponseDevicesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHwidDevicesResponseDtoResponseDevicesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItem_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks
	typ = make(GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks
	typ2 = make(GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemUser_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserUserStatus_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItem_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemHapp_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemStatus_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthCalendarMonth_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthCalendarMonth
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthCalendarMonth
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthCurrentYear_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthCurrentYear
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthCurrentYear
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthLast30Days_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthLast30Days
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthLast30Days
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthLastSevenDays_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthLastSevenDays
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthLastSevenDays
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthLastTwoDays_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthLastTwoDays
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthLastTwoDays
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponseConfigProfilesItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponseConfigProfilesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponseConfigProfilesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponseConfigProfilesItemInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponseConfigProfilesItemInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponseConfigProfilesItemInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponseConfigProfilesItemNodesItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponseConfigProfilesItemNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponseConfigProfilesItemNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetExternalSquadsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetExternalSquadsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetExternalSquadsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetExternalSquadsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetExternalSquadsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetExternalSquadsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetExternalSquadsResponseDtoResponseExternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetExternalSquadsResponseDtoResponseExternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetExternalSquadsResponseDtoResponseExternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetExternalSquadsResponseDtoResponseExternalSquadsItemInfo_EncodeDecode(t *testing.T) {
	var typ GetExternalSquadsResponseDtoResponseExternalSquadsItemInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetExternalSquadsResponseDtoResponseExternalSquadsItemInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetExternalSquadsResponseDtoResponseExternalSquadsItemSubscriptionSettings_EncodeDecode(t *testing.T) {
	var typ GetExternalSquadsResponseDtoResponseExternalSquadsItemSubscriptionSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetExternalSquadsResponseDtoResponseExternalSquadsItemSubscriptionSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetExternalSquadsResponseDtoResponseExternalSquadsItemTemplatesItem_EncodeDecode(t *testing.T) {
	var typ GetExternalSquadsResponseDtoResponseExternalSquadsItemTemplatesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetExternalSquadsResponseDtoResponseExternalSquadsItemTemplatesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetExternalSquadsResponseDtoResponseExternalSquadsItemTemplatesItemTemplateType_EncodeDecode(t *testing.T) {
	var typ GetExternalSquadsResponseDtoResponseExternalSquadsItemTemplatesItemTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetExternalSquadsResponseDtoResponseExternalSquadsItemTemplatesItemTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponseByAppItem_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponseByAppItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponseByAppItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponseByPlatformItem_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponseByPlatformItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponseByPlatformItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponseStats_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponseStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponseStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponseProvidersItem_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponseProvidersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponseProvidersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponseProvidersItemBillingHistory_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponseProvidersItemBillingHistory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponseProvidersItemBillingHistory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponseProvidersItemBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponseProvidersItemBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponseProvidersItemBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadAccessibleNodesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadAccessibleNodesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadAccessibleNodesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadAccessibleNodesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadAccessibleNodesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadAccessibleNodesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadAccessibleNodesResponseDtoResponseAccessibleNodesItem_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadAccessibleNodesResponseDtoResponseAccessibleNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadAccessibleNodesResponseDtoResponseAccessibleNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponseInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponseInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponseInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponseInternalSquadsItemInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponseInternalSquadsItemInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponseInternalSquadsItemInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponseInternalSquadsItemInfo_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponseInternalSquadsItemInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponseInternalSquadsItemInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodeUserUsageByRangeResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodeUserUsageByRangeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodeUserUsageByRangeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodeUserUsageByRangeResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetNodeUserUsageByRangeResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodeUserUsageByRangeResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponseNodesItem_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponseNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponseNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponseNodesItemInboundsStatsItem_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponseNodesItemInboundsStatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponseNodesItemInboundsStatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponseNodesItemOutboundsStatsItem_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponseNodesItemOutboundsStatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponseNodesItemOutboundsStatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesRealtimeUsageResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesRealtimeUsageResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesRealtimeUsageResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesRealtimeUsageResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetNodesRealtimeUsageResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesRealtimeUsageResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesStatisticsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesStatisticsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesStatisticsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesStatisticsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetNodesStatisticsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesStatisticsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesStatisticsResponseDtoResponseLastSevenDaysItem_EncodeDecode(t *testing.T) {
	var typ GetNodesStatisticsResponseDtoResponseLastSevenDaysItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesStatisticsResponseDtoResponseLastSevenDaysItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesUsageByRangeResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesUsageByRangeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesUsageByRangeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesUsageByRangeResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetNodesUsageByRangeResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesUsageByRangeResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetPubKeyResponseDto_EncodeDecode(t *testing.T) {
	var typ GetPubKeyResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetPubKeyResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetPubKeyResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetPubKeyResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetPubKeyResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseConvertedUserInfo_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseConvertedUserInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseConvertedUserInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseHeaders_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseHeaders
	typ = make(GetRawSubscriptionByShortUuidResponseDtoResponseHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseHeaders
	typ2 = make(GetRawSubscriptionByShortUuidResponseDtoResponseHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItem_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemAdditionalParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemAdditionalParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemAdditionalParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbData_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbData
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbData
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbDataRawInbound_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbDataRawInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbDataRawInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemMuxParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemMuxParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemMuxParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemPassword_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemPassword
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemPassword
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptions_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptions
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptions
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptionsSs_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptionsSs
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptionsSs
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemSockoptParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemSockoptParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemSockoptParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemXHttpExtraParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemXHttpExtraParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemXHttpExtraParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUser_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserHapp_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserStatus_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRemnawaveHealthResponseDto_EncodeDecode(t *testing.T) {
	var typ GetRemnawaveHealthResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRemnawaveHealthResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRemnawaveHealthResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetRemnawaveHealthResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRemnawaveHealthResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRemnawaveHealthResponseDtoResponsePm2StatsItem_EncodeDecode(t *testing.T) {
	var typ GetRemnawaveHealthResponseDtoResponsePm2StatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRemnawaveHealthResponseDtoResponsePm2StatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseCPU_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseCPU
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseCPU
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseMemory_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseMemory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseMemory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseNodes_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseNodes
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseNodes
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseOnlineStats_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseOnlineStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseOnlineStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseUsers_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseUsers
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseUsers
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseUsersStatusCounts_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseUsersStatusCounts
	typ = make(GetStatsResponseDtoResponseUsersStatusCounts)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseUsersStatusCounts
	typ2 = make(GetStatsResponseDtoResponseUsersStatusCounts)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDto_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponseAuthentication_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponseAuthentication
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponseAuthentication
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponseAuthenticationOAuth2_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponseAuthenticationOAuth2
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponseAuthenticationOAuth2
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponseAuthenticationOAuth2Providers_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponseAuthenticationOAuth2Providers
	typ = make(GetStatusResponseDtoResponseAuthenticationOAuth2Providers)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponseAuthenticationOAuth2Providers
	typ2 = make(GetStatusResponseDtoResponseAuthenticationOAuth2Providers)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponseAuthenticationPasskey_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponseAuthenticationPasskey
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponseAuthenticationPasskey
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponseAuthenticationPassword_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponseAuthenticationPassword
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponseAuthenticationPassword
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponseAuthenticationTgAuth_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponseAuthenticationTgAuth
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponseAuthenticationTgAuth
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatusResponseDtoResponseBranding_EncodeDecode(t *testing.T) {
	var typ GetStatusResponseDtoResponseBranding
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatusResponseDtoResponseBranding
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryResponseDtoResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDtoResponseByParsedAppItem_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDtoResponseByParsedAppItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDtoResponseByParsedAppItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDtoResponseHourlyRequestStatsItem_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDtoResponseHourlyRequestStatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDtoResponseHourlyRequestStatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetTemplatesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetTemplatesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetTemplatesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetTemplatesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetTemplatesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetTemplatesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetTemplatesResponseDtoResponseTemplatesItem_EncodeDecode(t *testing.T) {
	var typ GetTemplatesResponseDtoResponseTemplatesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetTemplatesResponseDtoResponseTemplatesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetTemplatesResponseDtoResponseTemplatesItemTemplateType_EncodeDecode(t *testing.T) {
	var typ GetTemplatesResponseDtoResponseTemplatesItemTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetTemplatesResponseDtoResponseTemplatesItemTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDtoResponseActiveNodesItem_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDtoResponseActiveNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDtoResponseActiveNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDtoResponseActiveNodesItemActiveSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDtoResponseActiveNodesItemActiveSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDtoResponseActiveNodesItemActiveSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserSubscriptionRequestHistoryResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserSubscriptionRequestHistoryResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserSubscriptionRequestHistoryResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserSubscriptionRequestHistoryResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserSubscriptionRequestHistoryResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserSubscriptionRequestHistoryResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserSubscriptionRequestHistoryResponseDtoResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ GetUserSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserUsageByRangeResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserUsageByRangeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserUsageByRangeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserUsageByRangeResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetUserUsageByRangeResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserUsageByRangeResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostListResponse_EncodeDecode(t *testing.T) {
	var typ HostListResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostListResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostListResponseResponseItem_EncodeDecode(t *testing.T) {
	var typ HostListResponseResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostListResponseResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostListResponseResponseItemInbound_EncodeDecode(t *testing.T) {
	var typ HostListResponseResponseItemInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostListResponseResponseItemInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostListResponseResponseItemSecurityLayer_EncodeDecode(t *testing.T) {
	var typ HostListResponseResponseItemSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostListResponseResponseItemSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostResponse_EncodeDecode(t *testing.T) {
	var typ HostResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostResponseResponse_EncodeDecode(t *testing.T) {
	var typ HostResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostResponseResponseInbound_EncodeDecode(t *testing.T) {
	var typ HostResponseResponseInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostResponseResponseInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostResponseResponseSecurityLayer_EncodeDecode(t *testing.T) {
	var typ HostResponseResponseSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostResponseResponseSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDeleteHostsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDeleteHostsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDeleteHostsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDeleteHostsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDeleteHostsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDeleteHostsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDeleteHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDeleteHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDeleteHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDisableHostsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDisableHostsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDisableHostsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDisableHostsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDisableHostsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDisableHostsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDisableHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDisableHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDisableHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerEnableHostsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerEnableHostsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerEnableHostsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerEnableHostsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerEnableHostsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerEnableHostsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerEnableHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerEnableHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerEnableHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetInboundToHostsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetInboundToHostsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetInboundToHostsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetInboundToHostsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetInboundToHostsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetInboundToHostsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetInboundToHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetInboundToHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetInboundToHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetPortToHostsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetPortToHostsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetPortToHostsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetPortToHostsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetPortToHostsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetPortToHostsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetPortToHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetPortToHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetPortToHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerCreateHostBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsControllerCreateHostBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerCreateHostBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerCreateHostBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsControllerCreateHostBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerCreateHostBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerCreateHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerCreateHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerCreateHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerDeleteHostBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsControllerDeleteHostBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerDeleteHostBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerDeleteHostBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsControllerDeleteHostBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerDeleteHostBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerDeleteHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerDeleteHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerDeleteHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostTagsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostTagsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostTagsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostTagsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostTagsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostTagsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostTagsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostTagsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostTagsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetOneHostBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetOneHostBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetOneHostBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetOneHostBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetOneHostBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetOneHostBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetOneHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetOneHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetOneHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerReorderHostsBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsControllerReorderHostsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerReorderHostsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerReorderHostsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsControllerReorderHostsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerReorderHostsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerReorderHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerReorderHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerReorderHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerUpdateHostBadRequest_EncodeDecode(t *testing.T) {
	var typ HostsControllerUpdateHostBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerUpdateHostBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerUpdateHostBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HostsControllerUpdateHostBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerUpdateHostBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerUpdateHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerUpdateHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerUpdateHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidDevicesResponse_EncodeDecode(t *testing.T) {
	var typ HwidDevicesResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidDevicesResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidDevicesResponseResponse_EncodeDecode(t *testing.T) {
	var typ HwidDevicesResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidDevicesResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidDevicesResponseResponseDevicesItem_EncodeDecode(t *testing.T) {
	var typ HwidDevicesResponseResponseDevicesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidDevicesResponseResponseDevicesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerCreateUserHwidDeviceBadRequest_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerCreateUserHwidDeviceBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerCreateUserHwidDeviceBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerCreateUserHwidDeviceBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerCreateUserHwidDeviceBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerCreateUserHwidDeviceBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerCreateUserHwidDeviceInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerCreateUserHwidDeviceInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerCreateUserHwidDeviceInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteAllUserHwidDevicesBadRequest_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteAllUserHwidDevicesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteAllUserHwidDevicesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteAllUserHwidDevicesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteAllUserHwidDevicesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteAllUserHwidDevicesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteAllUserHwidDevicesInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteAllUserHwidDevicesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteAllUserHwidDevicesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteUserHwidDeviceBadRequest_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteUserHwidDeviceBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteUserHwidDeviceBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteUserHwidDeviceBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteUserHwidDeviceBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteUserHwidDeviceBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteUserHwidDeviceInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteUserHwidDeviceInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteUserHwidDeviceInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetAllUsersBadRequest_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetAllUsersBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetAllUsersBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetAllUsersBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetAllUsersBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetAllUsersBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetAllUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetAllUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetAllUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetHwidDevicesStatsBadRequest_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetHwidDevicesStatsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetHwidDevicesStatsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetHwidDevicesStatsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetHwidDevicesStatsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetHwidDevicesStatsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetHwidDevicesStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetHwidDevicesStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetHwidDevicesStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetUserHwidDevicesBadRequest_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetUserHwidDevicesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetUserHwidDevicesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetUserHwidDevicesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetUserHwidDevicesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetUserHwidDevicesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetUserHwidDevicesInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetUserHwidDevicesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetUserHwidDevicesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInboundsResponse_EncodeDecode(t *testing.T) {
	var typ InboundsResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InboundsResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInboundsResponseResponse_EncodeDecode(t *testing.T) {
	var typ InboundsResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InboundsResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInboundsResponseResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ InboundsResponseResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InboundsResponseResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingHistoryRecordBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingHistoryRecordBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingHistoryRecordBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingHistoryRecordBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingHistoryRecordBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingHistoryRecordBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingHistoryRecordInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingHistoryRecordInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingHistoryRecordInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraProviderBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraProviderBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraProviderBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraProviderBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraProviderBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraProviderBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraProviderInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraProviderInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraProviderInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingHistoryRecordByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingHistoryRecordByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingHistoryRecordByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingNodeByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingNodeByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingNodeByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingNodeByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingNodeByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingNodeByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingNodeByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingNodeByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingNodeByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraProviderByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraProviderByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraProviderByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraProviderByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraProviderByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraProviderByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraProviderByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraProviderByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraProviderByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetBillingNodesBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetBillingNodesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetBillingNodesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetBillingNodesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetBillingNodesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetBillingNodesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetBillingNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetBillingNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetBillingNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraBillingHistoryRecordsBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraBillingHistoryRecordsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraBillingHistoryRecordsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraBillingHistoryRecordsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraBillingHistoryRecordsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraBillingHistoryRecordsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraBillingHistoryRecordsInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraBillingHistoryRecordsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraBillingHistoryRecordsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProviderByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProviderByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProviderByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProviderByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProviderByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProviderByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProviderByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProviderByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProviderByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProvidersBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProvidersBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProvidersBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProvidersBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProvidersBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProvidersBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProvidersInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProvidersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProvidersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraBillingNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraBillingNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraBillingNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraBillingNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraBillingNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraBillingNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraBillingNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraBillingNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraBillingNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraProviderBadRequest_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraProviderBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraProviderBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraProviderBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraProviderBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraProviderBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraProviderInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraProviderInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraProviderInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraProviderResponse_EncodeDecode(t *testing.T) {
	var typ InfraProviderResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraProviderResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraProviderResponseResponse_EncodeDecode(t *testing.T) {
	var typ InfraProviderResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraProviderResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraProviderResponseResponseBillingHistory_EncodeDecode(t *testing.T) {
	var typ InfraProviderResponseResponseBillingHistory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraProviderResponseResponseBillingHistory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraProviderResponseResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ InfraProviderResponseResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraProviderResponseResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerAddUsersToInternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerAddUsersToInternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerAddUsersToInternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerAddUsersToInternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerAddUsersToInternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerAddUsersToInternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerAddUsersToInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerAddUsersToInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerAddUsersToInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerCreateInternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerCreateInternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerCreateInternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerCreateInternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerCreateInternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerCreateInternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerCreateInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerCreateInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerCreateInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerDeleteInternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerDeleteInternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerDeleteInternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerDeleteInternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerDeleteInternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerDeleteInternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerDeleteInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerDeleteInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerDeleteInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadAccessibleNodesBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadAccessibleNodesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadAccessibleNodesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadAccessibleNodesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadAccessibleNodesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadAccessibleNodesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadAccessibleNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadAccessibleNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadAccessibleNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadsBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadsInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerRemoveUsersFromInternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerRemoveUsersFromInternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerRemoveUsersFromInternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerRemoveUsersFromInternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerRemoveUsersFromInternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerRemoveUsersFromInternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerRemoveUsersFromInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerRemoveUsersFromInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerRemoveUsersFromInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerUpdateInternalSquadBadRequest_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerUpdateInternalSquadBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerUpdateInternalSquadBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerUpdateInternalSquadBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerUpdateInternalSquadBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerUpdateInternalSquadBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerUpdateInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerUpdateInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerUpdateInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadResponse_EncodeDecode(t *testing.T) {
	var typ InternalSquadResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadResponseResponse_EncodeDecode(t *testing.T) {
	var typ InternalSquadResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadResponseResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ InternalSquadResponseResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadResponseResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadResponseResponseInfo_EncodeDecode(t *testing.T) {
	var typ InternalSquadResponseResponseInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadResponseResponseInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestKeygenControllerGenerateKeyBadRequest_EncodeDecode(t *testing.T) {
	var typ KeygenControllerGenerateKeyBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 KeygenControllerGenerateKeyBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestKeygenControllerGenerateKeyBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ KeygenControllerGenerateKeyBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 KeygenControllerGenerateKeyBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestKeygenControllerGenerateKeyInternalServerError_EncodeDecode(t *testing.T) {
	var typ KeygenControllerGenerateKeyInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 KeygenControllerGenerateKeyInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginRequestDto_EncodeDecode(t *testing.T) {
	var typ LoginRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodeResponse_EncodeDecode(t *testing.T) {
	var typ NodeResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodeResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodeResponseResponse_EncodeDecode(t *testing.T) {
	var typ NodeResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodeResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodeResponseResponseConfigProfile_EncodeDecode(t *testing.T) {
	var typ NodeResponseResponseConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodeResponseResponseConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodeResponseResponseConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ NodeResponseResponseConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodeResponseResponseConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodeResponseResponseProvider_EncodeDecode(t *testing.T) {
	var typ NodeResponseResponseProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodeResponseResponseProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerCreateNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerCreateNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerCreateNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerCreateNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerCreateNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerCreateNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerCreateNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerCreateNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerCreateNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDeleteNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerDeleteNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDeleteNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDeleteNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerDeleteNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDeleteNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDeleteNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerDeleteNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDeleteNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDisableNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerDisableNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDisableNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDisableNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerDisableNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDisableNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDisableNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerDisableNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDisableNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerEnableNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerEnableNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerEnableNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerEnableNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerEnableNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerEnableNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerEnableNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerEnableNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerEnableNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetAllNodesBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetAllNodesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetAllNodesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetAllNodesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetAllNodesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetAllNodesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetAllNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetAllNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetAllNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetOneNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetOneNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetOneNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetOneNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetOneNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetOneNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetOneNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetOneNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetOneNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerReorderNodesBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerReorderNodesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerReorderNodesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerReorderNodesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerReorderNodesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerReorderNodesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerReorderNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerReorderNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerReorderNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartAllNodesBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartAllNodesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartAllNodesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartAllNodesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartAllNodesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartAllNodesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartAllNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartAllNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartAllNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerUpdateNodeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesControllerUpdateNodeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerUpdateNodeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerUpdateNodeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesControllerUpdateNodeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerUpdateNodeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerUpdateNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerUpdateNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerUpdateNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesResponse_EncodeDecode(t *testing.T) {
	var typ NodesResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesResponseResponseItem_EncodeDecode(t *testing.T) {
	var typ NodesResponseResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesResponseResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesResponseResponseItemConfigProfile_EncodeDecode(t *testing.T) {
	var typ NodesResponseResponseItemConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesResponseResponseItemConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesResponseResponseItemConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ NodesResponseResponseItemConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesResponseResponseItemConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesResponseResponseItemProvider_EncodeDecode(t *testing.T) {
	var typ NodesResponseResponseItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesResponseResponseItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUsageHistoryControllerGetNodesUsageByRangeBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesUsageHistoryControllerGetNodesUsageByRangeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUsageHistoryControllerGetNodesUsageByRangeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUsageHistoryControllerGetNodesUsageByRangeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesUsageHistoryControllerGetNodesUsageByRangeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUsageHistoryControllerGetNodesUsageByRangeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUsageHistoryControllerGetNodesUsageByRangeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesUsageHistoryControllerGetNodesUsageByRangeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUsageHistoryControllerGetNodesUsageByRangeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodeUserUsageBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodeUserUsageBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodeUserUsageBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodeUserUsageBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodeUserUsageBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodeUserUsageBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodeUserUsageInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodeUserUsageInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodeUserUsageInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodesRealtimeUsageBadRequest_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodesRealtimeUsageBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodesRealtimeUsageBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodesRealtimeUsageBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodesRealtimeUsageBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodesRealtimeUsageBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodesRealtimeUsageInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodesRealtimeUsageInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodesRealtimeUsageInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2AuthorizeRequestDto_EncodeDecode(t *testing.T) {
	var typ OAuth2AuthorizeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2AuthorizeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2AuthorizeRequestDtoProvider_EncodeDecode(t *testing.T) {
	var typ OAuth2AuthorizeRequestDtoProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2AuthorizeRequestDtoProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2AuthorizeResponseDto_EncodeDecode(t *testing.T) {
	var typ OAuth2AuthorizeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2AuthorizeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2AuthorizeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ OAuth2AuthorizeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2AuthorizeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2CallbackRequestDto_EncodeDecode(t *testing.T) {
	var typ OAuth2CallbackRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2CallbackRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2CallbackRequestDtoProvider_EncodeDecode(t *testing.T) {
	var typ OAuth2CallbackRequestDtoProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2CallbackRequestDtoProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerDeletePasskeyBadRequest_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerDeletePasskeyBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerDeletePasskeyBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerDeletePasskeyBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerDeletePasskeyBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerDeletePasskeyBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerDeletePasskeyInternalServerError_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerDeletePasskeyInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerDeletePasskeyInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerGetActivePasskeysBadRequest_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerGetActivePasskeysBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerGetActivePasskeysBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerGetActivePasskeysBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerGetActivePasskeysBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerGetActivePasskeysBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerGetActivePasskeysInternalServerError_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerGetActivePasskeysInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerGetActivePasskeysInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerPasskeyRegistrationOptionsBadRequest_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerPasskeyRegistrationOptionsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerPasskeyRegistrationOptionsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerPasskeyRegistrationOptionsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerPasskeyRegistrationOptionsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerPasskeyRegistrationOptionsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerPasskeyRegistrationOptionsInternalServerError_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerPasskeyRegistrationOptionsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerPasskeyRegistrationOptionsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerPasskeyRegistrationVerifyBadRequest_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerPasskeyRegistrationVerifyBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerPasskeyRegistrationVerifyBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerPasskeyRegistrationVerifyBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerPasskeyRegistrationVerifyBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerPasskeyRegistrationVerifyBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyControllerPasskeyRegistrationVerifyInternalServerError_EncodeDecode(t *testing.T) {
	var typ PasskeyControllerPasskeyRegistrationVerifyInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyControllerPasskeyRegistrationVerifyInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeyOptionsResponse_EncodeDecode(t *testing.T) {
	var typ PasskeyOptionsResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeyOptionsResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeysResponse_EncodeDecode(t *testing.T) {
	var typ PasskeysResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeysResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeysResponseResponse_EncodeDecode(t *testing.T) {
	var typ PasskeysResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeysResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestPasskeysResponseResponsePasskeysItem_EncodeDecode(t *testing.T) {
	var typ PasskeysResponseResponsePasskeysItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 PasskeysResponseResponsePasskeysItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRegisterRequestDto_EncodeDecode(t *testing.T) {
	var typ RegisterRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RegisterRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemnawaveSettingsControllerGetSettingsBadRequest_EncodeDecode(t *testing.T) {
	var typ RemnawaveSettingsControllerGetSettingsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemnawaveSettingsControllerGetSettingsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemnawaveSettingsControllerGetSettingsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ RemnawaveSettingsControllerGetSettingsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemnawaveSettingsControllerGetSettingsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemnawaveSettingsControllerGetSettingsInternalServerError_EncodeDecode(t *testing.T) {
	var typ RemnawaveSettingsControllerGetSettingsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemnawaveSettingsControllerGetSettingsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemnawaveSettingsControllerUpdateSettingsBadRequest_EncodeDecode(t *testing.T) {
	var typ RemnawaveSettingsControllerUpdateSettingsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemnawaveSettingsControllerUpdateSettingsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemnawaveSettingsControllerUpdateSettingsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ RemnawaveSettingsControllerUpdateSettingsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemnawaveSettingsControllerUpdateSettingsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemnawaveSettingsControllerUpdateSettingsInternalServerError_EncodeDecode(t *testing.T) {
	var typ RemnawaveSettingsControllerUpdateSettingsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemnawaveSettingsControllerUpdateSettingsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostRequestDto_EncodeDecode(t *testing.T) {
	var typ ReorderHostRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostRequestDtoHostsItem_EncodeDecode(t *testing.T) {
	var typ ReorderHostRequestDtoHostsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostRequestDtoHostsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostResponseDto_EncodeDecode(t *testing.T) {
	var typ ReorderHostResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ ReorderHostResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ ReorderNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeRequestDtoNodesItem_EncodeDecode(t *testing.T) {
	var typ ReorderNodeRequestDtoNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeRequestDtoNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRestartAllNodesRequestBodyDto_EncodeDecode(t *testing.T) {
	var typ RestartAllNodesRequestBodyDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RestartAllNodesRequestBodyDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionBodyDto_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionBodyDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionBodyDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetInboundToManyHostsRequestDto_EncodeDecode(t *testing.T) {
	var typ SetInboundToManyHostsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetInboundToManyHostsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetPortToManyHostsRequestDto_EncodeDecode(t *testing.T) {
	var typ SetPortToManyHostsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetPortToManyHostsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponse_EncodeDecode(t *testing.T) {
	var typ SettingsResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponse_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponseBrandingSettings_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponseBrandingSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponseBrandingSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponseOauth2Settings_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponseOauth2Settings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponseOauth2Settings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponseOauth2SettingsGithub_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponseOauth2SettingsGithub
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponseOauth2SettingsGithub
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponseOauth2SettingsPocketid_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponseOauth2SettingsPocketid
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponseOauth2SettingsPocketid
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponseOauth2SettingsYandex_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponseOauth2SettingsYandex
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponseOauth2SettingsYandex
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponsePasskeySettings_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponsePasskeySettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponsePasskeySettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponsePasswordSettings_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponsePasswordSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponsePasswordSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSettingsResponseResponseTgAuthSettings_EncodeDecode(t *testing.T) {
	var typ SettingsResponseResponseTgAuthSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SettingsResponseResponseTgAuthSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetRequest_EncodeDecode(t *testing.T) {
	var typ SnippetRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetRequestSnippetItem_EncodeDecode(t *testing.T) {
	var typ SnippetRequestSnippetItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetRequestSnippetItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerCreateSnippetBadRequest_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerCreateSnippetBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerCreateSnippetBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerCreateSnippetBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerCreateSnippetBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerCreateSnippetBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerCreateSnippetInternalServerError_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerCreateSnippetInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerCreateSnippetInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerDeleteSnippetByNameBadRequest_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerDeleteSnippetByNameBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerDeleteSnippetByNameBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerDeleteSnippetByNameBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerDeleteSnippetByNameBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerDeleteSnippetByNameBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerDeleteSnippetByNameInternalServerError_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerDeleteSnippetByNameInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerDeleteSnippetByNameInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerGetSnippetsBadRequest_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerGetSnippetsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerGetSnippetsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerGetSnippetsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerGetSnippetsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerGetSnippetsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerGetSnippetsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerGetSnippetsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerGetSnippetsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerUpdateSnippetBadRequest_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerUpdateSnippetBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerUpdateSnippetBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerUpdateSnippetBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerUpdateSnippetBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerUpdateSnippetBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsControllerUpdateSnippetInternalServerError_EncodeDecode(t *testing.T) {
	var typ SnippetsControllerUpdateSnippetInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsControllerUpdateSnippetInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsResponse_EncodeDecode(t *testing.T) {
	var typ SnippetsResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsResponseResponse_EncodeDecode(t *testing.T) {
	var typ SnippetsResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSnippetsResponseResponseSnippetsItem_EncodeDecode(t *testing.T) {
	var typ SnippetsResponseResponseSnippetsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SnippetsResponseResponseSnippetsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionControllerGetSubscriptionInfoByShortUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionControllerGetSubscriptionInfoByShortUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionControllerGetSubscriptionInfoByShortUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionControllerGetSubscriptionInfoByShortUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionControllerGetSubscriptionInfoByShortUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionControllerGetSubscriptionInfoByShortUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionControllerGetSubscriptionInfoByShortUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionControllerGetSubscriptionInfoByShortUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionControllerGetSubscriptionInfoByShortUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionResponse_EncodeDecode(t *testing.T) {
	var typ SubscriptionResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionResponseResponse_EncodeDecode(t *testing.T) {
	var typ SubscriptionResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionResponseResponseHapp_EncodeDecode(t *testing.T) {
	var typ SubscriptionResponseResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionResponseResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionResponseResponseSsConfLinks_EncodeDecode(t *testing.T) {
	var typ SubscriptionResponseResponseSsConfLinks
	typ = make(SubscriptionResponseResponseSsConfLinks)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionResponseResponseSsConfLinks
	typ2 = make(SubscriptionResponseResponseSsConfLinks)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionResponseResponseUser_EncodeDecode(t *testing.T) {
	var typ SubscriptionResponseResponseUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionResponseResponseUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionResponseResponseUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ SubscriptionResponseResponseUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionResponseResponseUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionResponseResponseUserUserStatus_EncodeDecode(t *testing.T) {
	var typ SubscriptionResponseResponseUserUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionResponseResponseUserUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerGetSettingsBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerGetSettingsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerGetSettingsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerGetSettingsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerGetSettingsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerGetSettingsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerGetSettingsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerGetSettingsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerGetSettingsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerUpdateSettingsBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerUpdateSettingsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerUpdateSettingsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerUpdateSettingsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerUpdateSettingsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerUpdateSettingsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerUpdateSettingsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerUpdateSettingsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerUpdateSettingsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponse_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponse_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseCustomResponseHeaders_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseCustomResponseHeaders
	typ = make(SubscriptionSettingsResponseResponseCustomResponseHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseCustomResponseHeaders
	typ2 = make(SubscriptionSettingsResponseResponseCustomResponseHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRules_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRules
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRules
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesRulesItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesRulesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesRulesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesRulesItemConditionsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesRulesItemConditionsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesRulesItemConditionsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesRulesItemConditionsItemOperator_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesRulesItemConditionsItemOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesRulesItemConditionsItemOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesRulesItemOperator_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesRulesItemOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesRulesItemOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesRulesItemResponseModifications_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesRulesItemResponseModifications
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesRulesItemResponseModifications
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesRulesItemResponseModificationsHeadersItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesRulesItemResponseModificationsHeadersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesRulesItemResponseModificationsHeadersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesRulesItemResponseType_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesRulesItemResponseType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesRulesItemResponseType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsResponseResponseResponseRulesVersion_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsResponseResponseResponseRulesVersion
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsResponseResponseResponseRulesVersion
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerCreateTemplateBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerCreateTemplateBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerCreateTemplateBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerCreateTemplateBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerCreateTemplateBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerCreateTemplateBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerCreateTemplateInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerCreateTemplateInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerCreateTemplateInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerDeleteTemplateBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerDeleteTemplateBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerDeleteTemplateBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerDeleteTemplateBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerDeleteTemplateBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerDeleteTemplateBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerDeleteTemplateInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerDeleteTemplateInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerDeleteTemplateInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerGetAllTemplatesBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerGetAllTemplatesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerGetAllTemplatesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerGetAllTemplatesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerGetAllTemplatesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerGetAllTemplatesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerGetAllTemplatesInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerGetAllTemplatesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerGetAllTemplatesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerGetTemplateByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerGetTemplateByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerGetTemplateByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerGetTemplateByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerGetTemplateByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerGetTemplateByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerGetTemplateByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerGetTemplateByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerGetTemplateByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerUpdateTemplateBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerUpdateTemplateBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerUpdateTemplateBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerUpdateTemplateBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerUpdateTemplateBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerUpdateTemplateBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerUpdateTemplateInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerUpdateTemplateInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerUpdateTemplateInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetAllSubscriptionsBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetAllSubscriptionsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetAllSubscriptionsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetAllSubscriptionsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetAllSubscriptionsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetAllSubscriptionsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetAllSubscriptionsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetAllSubscriptionsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetAllSubscriptionsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetRawSubscriptionByShortUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetRawSubscriptionByShortUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetRawSubscriptionByShortUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetRawSubscriptionByShortUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetRawSubscriptionByShortUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetRawSubscriptionByShortUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetRawSubscriptionByShortUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetRawSubscriptionByShortUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetRawSubscriptionByShortUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByShortUuidProtectedBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByShortUuidProtectedBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByShortUuidProtectedBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByShortUuidProtectedBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByShortUuidProtectedBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByShortUuidProtectedBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByShortUuidProtectedInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByShortUuidProtectedInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByShortUuidProtectedInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByShortUuidProtectedNotFound_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByShortUuidProtectedNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByShortUuidProtectedNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUsernameBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUsernameBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUsernameBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUsernameBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUsernameBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUsernameBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUsernameInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUsernameInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUsernameInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUsernameNotFound_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUsernameNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUsernameNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUuidNotFound_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUuidNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUuidNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerDebugSrrMatcherBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerDebugSrrMatcherBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerDebugSrrMatcherBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerDebugSrrMatcherBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerDebugSrrMatcherBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerDebugSrrMatcherBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerDebugSrrMatcherInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerDebugSrrMatcherInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerDebugSrrMatcherInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerEncryptHappCryptoLinkBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerEncryptHappCryptoLinkBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerEncryptHappCryptoLinkBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerEncryptHappCryptoLinkBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerEncryptHappCryptoLinkBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerEncryptHappCryptoLinkBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerEncryptHappCryptoLinkInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerEncryptHappCryptoLinkInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerEncryptHappCryptoLinkInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetBandwidthStatsBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetBandwidthStatsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetBandwidthStatsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetBandwidthStatsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetBandwidthStatsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetBandwidthStatsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetBandwidthStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetBandwidthStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetBandwidthStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesMetricsBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesMetricsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesMetricsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesMetricsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesMetricsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesMetricsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesMetricsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesMetricsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesMetricsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesStatisticsBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesStatisticsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesStatisticsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesStatisticsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesStatisticsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesStatisticsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesStatisticsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesStatisticsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesStatisticsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetRemnawaveHealthBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetRemnawaveHealthBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetRemnawaveHealthBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetRemnawaveHealthBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetRemnawaveHealthBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetRemnawaveHealthBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetRemnawaveHealthInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetRemnawaveHealthInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetRemnawaveHealthInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetStatsBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetStatsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetStatsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetStatsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetStatsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetStatsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetX25519KeypairsBadRequest_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetX25519KeypairsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetX25519KeypairsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetX25519KeypairsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetX25519KeypairsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetX25519KeypairsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetX25519KeypairsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetX25519KeypairsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetX25519KeypairsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTagsResponse_EncodeDecode(t *testing.T) {
	var typ TagsResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TagsResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTagsResponseResponse_EncodeDecode(t *testing.T) {
	var typ TagsResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TagsResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTelegramCallbackRequestDto_EncodeDecode(t *testing.T) {
	var typ TelegramCallbackRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TelegramCallbackRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTemplateResponse_EncodeDecode(t *testing.T) {
	var typ TemplateResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TemplateResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTemplateResponseResponse_EncodeDecode(t *testing.T) {
	var typ TemplateResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TemplateResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTemplateResponseResponseTemplateType_EncodeDecode(t *testing.T) {
	var typ TemplateResponseResponseTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TemplateResponseResponseTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTokenResponse_EncodeDecode(t *testing.T) {
	var typ TokenResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TokenResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTokenResponseResponse_EncodeDecode(t *testing.T) {
	var typ TokenResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TokenResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileRequestDtoConfig_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileRequestDtoConfig
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileRequestDtoConfig
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateExternalSquadRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateExternalSquadRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateExternalSquadRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateExternalSquadRequestDtoSubscriptionSettings_EncodeDecode(t *testing.T) {
	var typ UpdateExternalSquadRequestDtoSubscriptionSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateExternalSquadRequestDtoSubscriptionSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateExternalSquadRequestDtoTemplatesItem_EncodeDecode(t *testing.T) {
	var typ UpdateExternalSquadRequestDtoTemplatesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateExternalSquadRequestDtoTemplatesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateExternalSquadRequestDtoTemplatesItemTemplateType_EncodeDecode(t *testing.T) {
	var typ UpdateExternalSquadRequestDtoTemplatesItemTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateExternalSquadRequestDtoTemplatesItemTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoAlpn_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoAlpn
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoAlpn
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoFingerprint_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoFingerprint
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoFingerprint
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoInbound_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoSecurityLayer_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraProviderRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateInfraProviderRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraProviderRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInternalSquadRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateInternalSquadRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInternalSquadRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeRequestDtoConfigProfile_EncodeDecode(t *testing.T) {
	var typ UpdateNodeRequestDtoConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeRequestDtoConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoBrandingSettings_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoBrandingSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoBrandingSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoOauth2Settings_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoOauth2Settings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoOauth2Settings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoOauth2SettingsGithub_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoOauth2SettingsGithub
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoOauth2SettingsGithub
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoOauth2SettingsPocketid_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoOauth2SettingsPocketid
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoOauth2SettingsPocketid
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoOauth2SettingsYandex_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoOauth2SettingsYandex
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoOauth2SettingsYandex
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoPasskeySettings_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoPasskeySettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoPasskeySettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoPasswordSettings_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoPasswordSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoPasswordSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateRemnawaveSettingsRequestDtoTgAuthSettings_EncodeDecode(t *testing.T) {
	var typ UpdateRemnawaveSettingsRequestDtoTgAuthSettings
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateRemnawaveSettingsRequestDtoTgAuthSettings
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoCustomResponseHeaders_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders
	typ = make(UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders
	typ2 = make(UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRules_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRules
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRules
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesRulesItem_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemConditionsItem_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemConditionsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemConditionsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemConditionsItemOperator_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemConditionsItemOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemConditionsItemOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemOperator_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemOperator
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemOperator
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseModifications_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseModifications
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseModifications
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseModificationsHeadersItem_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseModificationsHeadersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseModificationsHeadersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseType_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesRulesItemResponseType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoResponseRulesVersion_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoResponseRulesVersion
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoResponseRulesVersion
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateRequestDtoTemplateJson_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateRequestDtoTemplateJson
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateRequestDtoTemplateJson
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateUserRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ UpdateUserRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserRequestDtoTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ UpdateUserRequestDtoTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserRequestDtoTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponse_EncodeDecode(t *testing.T) {
	var typ UserResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponseResponse_EncodeDecode(t *testing.T) {
	var typ UserResponseResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponseResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponseResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ UserResponseResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponseResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponseResponseHapp_EncodeDecode(t *testing.T) {
	var typ UserResponseResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponseResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponseResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ UserResponseResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponseResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponseResponseStatus_EncodeDecode(t *testing.T) {
	var typ UserResponseResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponseResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserResponseResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ UserResponseResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserResponseResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryBadRequest_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryInternalServerError_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsBadRequest_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkAllResetUserTrafficBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkAllResetUserTrafficBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkAllResetUserTrafficBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkAllResetUserTrafficBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkAllResetUserTrafficBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkAllResetUserTrafficBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkAllResetUserTrafficInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkAllResetUserTrafficInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkAllResetUserTrafficInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersByStatusBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersByStatusBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersByStatusBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersByStatusBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersByStatusBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersByStatusBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersByStatusInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersByStatusInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersByStatusInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkResetUserTrafficBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkResetUserTrafficBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkResetUserTrafficBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkResetUserTrafficBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkResetUserTrafficBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkResetUserTrafficBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkResetUserTrafficInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkResetUserTrafficInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkResetUserTrafficInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkRevokeUsersSubscriptionBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkRevokeUsersSubscriptionBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkRevokeUsersSubscriptionBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkRevokeUsersSubscriptionBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkRevokeUsersSubscriptionBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkRevokeUsersSubscriptionBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkRevokeUsersSubscriptionInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkRevokeUsersSubscriptionInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkRevokeUsersSubscriptionInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateAllUsersBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateAllUsersBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateAllUsersBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateAllUsersBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateAllUsersBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateAllUsersBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateAllUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateAllUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateAllUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersInternalSquadsBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersInternalSquadsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersInternalSquadsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersInternalSquadsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersInternalSquadsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersInternalSquadsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersInternalSquadsInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersInternalSquadsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersInternalSquadsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerCreateUserBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerCreateUserBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerCreateUserBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerCreateUserBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerCreateUserBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerCreateUserBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerCreateUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerCreateUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerCreateUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDeleteUserBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerDeleteUserBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDeleteUserBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDeleteUserBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerDeleteUserBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDeleteUserBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDeleteUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerDeleteUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDeleteUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDisableUserBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerDisableUserBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDisableUserBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDisableUserBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerDisableUserBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDisableUserBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDisableUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerDisableUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDisableUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerEnableUserBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerEnableUserBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerEnableUserBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerEnableUserBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerEnableUserBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerEnableUserBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerEnableUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerEnableUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerEnableUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllTagsBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllTagsBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllTagsBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllTagsBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllTagsBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllTagsBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllTagsInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllTagsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllTagsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllUsersBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllUsersBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllUsersBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllUsersBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllUsersBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllUsersBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserAccessibleNodesBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserAccessibleNodesBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserAccessibleNodesBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserAccessibleNodesBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserAccessibleNodesBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserAccessibleNodesBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserAccessibleNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserAccessibleNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserAccessibleNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByShortUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByShortUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByShortUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByShortUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByShortUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByShortUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByShortUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByShortUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByShortUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByTelegramIdBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByTelegramIdBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByTelegramIdBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByTelegramIdBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByTelegramIdBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByTelegramIdBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByTelegramIdInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByTelegramIdInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByTelegramIdInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUsernameBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUsernameBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUsernameBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUsernameBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUsernameBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUsernameBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUsernameInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUsernameInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUsernameInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUuidBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUuidBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUuidBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUuidBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUuidBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUuidBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserSubscriptionRequestHistoryBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserSubscriptionRequestHistoryBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserSubscriptionRequestHistoryBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserSubscriptionRequestHistoryBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserSubscriptionRequestHistoryBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserSubscriptionRequestHistoryBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserSubscriptionRequestHistoryInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserSubscriptionRequestHistoryInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserSubscriptionRequestHistoryInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByEmailBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByEmailBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByEmailBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByEmailBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByEmailBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByEmailBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByEmailInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByEmailInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByEmailInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByTagBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByTagBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByTagBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByTagBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByTagBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByTagBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByTagInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByTagInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByTagInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerResetUserTrafficBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerResetUserTrafficBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerResetUserTrafficBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerResetUserTrafficBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerResetUserTrafficBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerResetUserTrafficBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerResetUserTrafficInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerResetUserTrafficInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerResetUserTrafficInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerRevokeUserSubscriptionBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerRevokeUserSubscriptionBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerRevokeUserSubscriptionBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerRevokeUserSubscriptionBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerRevokeUserSubscriptionBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerRevokeUserSubscriptionBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerRevokeUserSubscriptionInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerRevokeUserSubscriptionInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerRevokeUserSubscriptionInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerUpdateUserBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersControllerUpdateUserBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerUpdateUserBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerUpdateUserBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersControllerUpdateUserBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerUpdateUserBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerUpdateUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerUpdateUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerUpdateUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersResponse_EncodeDecode(t *testing.T) {
	var typ UsersResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersResponseResponseItem_EncodeDecode(t *testing.T) {
	var typ UsersResponseResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersResponseResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersResponseResponseItemActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ UsersResponseResponseItemActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersResponseResponseItemActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersResponseResponseItemHapp_EncodeDecode(t *testing.T) {
	var typ UsersResponseResponseItemHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersResponseResponseItemHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersResponseResponseItemLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ UsersResponseResponseItemLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersResponseResponseItemLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersResponseResponseItemStatus_EncodeDecode(t *testing.T) {
	var typ UsersResponseResponseItemStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersResponseResponseItemStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersResponseResponseItemTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ UsersResponseResponseItemTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersResponseResponseItemTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersStatsControllerGetUserUsageByRangeBadRequest_EncodeDecode(t *testing.T) {
	var typ UsersStatsControllerGetUserUsageByRangeBadRequest
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersStatsControllerGetUserUsageByRangeBadRequest
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersStatsControllerGetUserUsageByRangeBadRequestErrorsItem_EncodeDecode(t *testing.T) {
	var typ UsersStatsControllerGetUserUsageByRangeBadRequestErrorsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersStatsControllerGetUserUsageByRangeBadRequestErrorsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersStatsControllerGetUserUsageByRangeInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersStatsControllerGetUserUsageByRangeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersStatsControllerGetUserUsageByRangeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestVerifyPasskeyRegistrationResponseDto_EncodeDecode(t *testing.T) {
	var typ VerifyPasskeyRegistrationResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 VerifyPasskeyRegistrationResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestVerifyPasskeyRegistrationResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ VerifyPasskeyRegistrationResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 VerifyPasskeyRegistrationResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
