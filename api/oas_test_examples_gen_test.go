// Code generated by ogen, DO NOT EDIT.

package api

import (
	"github.com/go-faster/jx"

	std "encoding/json"
	"testing"

	"github.com/stretchr/testify/require"
)

func TestAddUsersToInternalSquadResponseDto_EncodeDecode(t *testing.T) {
	var typ AddUsersToInternalSquadResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AddUsersToInternalSquadResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAddUsersToInternalSquadResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ AddUsersToInternalSquadResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AddUsersToInternalSquadResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerCreateInternalServerError_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerCreateInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerCreateInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerDeleteInternalServerError_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerDeleteInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerDeleteInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestApiTokensControllerFindAllInternalServerError_EncodeDecode(t *testing.T) {
	var typ ApiTokensControllerFindAllInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ApiTokensControllerFindAllInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerGetStatusInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerGetStatusInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerGetStatusInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerLoginInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerLoginInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerLoginInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerLoginUnauthorized_EncodeDecode(t *testing.T) {
	var typ AuthControllerLoginUnauthorized
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerLoginUnauthorized
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2AuthorizeInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2AuthorizeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2AuthorizeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerOauth2CallbackInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerOauth2CallbackInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerOauth2CallbackInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerRegisterForbidden_EncodeDecode(t *testing.T) {
	var typ AuthControllerRegisterForbidden
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerRegisterForbidden
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerRegisterInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerRegisterInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerRegisterInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestAuthControllerTelegramCallbackInternalServerError_EncodeDecode(t *testing.T) {
	var typ AuthControllerTelegramCallbackInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 AuthControllerTelegramCallbackInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllResetTrafficUsersResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkAllResetTrafficUsersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllResetTrafficUsersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllResetTrafficUsersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkAllResetTrafficUsersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllResetTrafficUsersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersRequestDtoTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersRequestDtoTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersRequestDtoTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkAllUpdateUsersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkAllUpdateUsersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkAllUpdateUsersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteHostsRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkDeleteHostsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteHostsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteHostsResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkDeleteHostsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteHostsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteHostsResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ BulkDeleteHostsResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteHostsResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteHostsResponseDtoResponseItemInbound_EncodeDecode(t *testing.T) {
	var typ BulkDeleteHostsResponseDtoResponseItemInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteHostsResponseDtoResponseItemInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteHostsResponseDtoResponseItemSecurityLayer_EncodeDecode(t *testing.T) {
	var typ BulkDeleteHostsResponseDtoResponseItemSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteHostsResponseDtoResponseItemSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersByStatusRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersByStatusRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersByStatusRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersByStatusRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersByStatusRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersByStatusRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersByStatusResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersByStatusResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersByStatusResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersByStatusResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersByStatusResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersByStatusResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDeleteUsersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkDeleteUsersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDeleteUsersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDisableHostsRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkDisableHostsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDisableHostsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDisableHostsResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkDisableHostsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDisableHostsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDisableHostsResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ BulkDisableHostsResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDisableHostsResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDisableHostsResponseDtoResponseItemInbound_EncodeDecode(t *testing.T) {
	var typ BulkDisableHostsResponseDtoResponseItemInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDisableHostsResponseDtoResponseItemInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkDisableHostsResponseDtoResponseItemSecurityLayer_EncodeDecode(t *testing.T) {
	var typ BulkDisableHostsResponseDtoResponseItemSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkDisableHostsResponseDtoResponseItemSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkEnableHostsRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkEnableHostsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkEnableHostsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkEnableHostsResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkEnableHostsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkEnableHostsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkEnableHostsResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ BulkEnableHostsResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkEnableHostsResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkEnableHostsResponseDtoResponseItemInbound_EncodeDecode(t *testing.T) {
	var typ BulkEnableHostsResponseDtoResponseItemInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkEnableHostsResponseDtoResponseItemInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkEnableHostsResponseDtoResponseItemSecurityLayer_EncodeDecode(t *testing.T) {
	var typ BulkEnableHostsResponseDtoResponseItemSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkEnableHostsResponseDtoResponseItemSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkResetTrafficUsersRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkResetTrafficUsersRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkResetTrafficUsersRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkResetTrafficUsersResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkResetTrafficUsersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkResetTrafficUsersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkResetTrafficUsersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkResetTrafficUsersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkResetTrafficUsersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkRevokeUsersSubscriptionRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkRevokeUsersSubscriptionRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkRevokeUsersSubscriptionRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkRevokeUsersSubscriptionResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkRevokeUsersSubscriptionResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkRevokeUsersSubscriptionResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkRevokeUsersSubscriptionResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkRevokeUsersSubscriptionResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkRevokeUsersSubscriptionResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDtoFields_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDtoFields
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDtoFields
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDtoFieldsStatus_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDtoFieldsStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDtoFieldsStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersRequestDtoFieldsTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersRequestDtoFieldsTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersRequestDtoFieldsTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersSquadsRequestDto_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersSquadsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersSquadsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersSquadsResponseDto_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersSquadsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersSquadsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestBulkUpdateUsersSquadsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ BulkUpdateUsersSquadsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 BulkUpdateUsersSquadsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerCreateConfigProfileInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerCreateConfigProfileInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerCreateConfigProfileInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerDeleteConfigProfileByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerDeleteConfigProfileByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerDeleteConfigProfileByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetAllInboundsInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetAllInboundsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetAllInboundsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfileByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfileByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfileByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetConfigProfilesInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetConfigProfilesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetConfigProfilesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerGetInboundsByProfileUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerGetInboundsByProfileUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerGetInboundsByProfileUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestConfigProfileControllerUpdateConfigProfileInternalServerError_EncodeDecode(t *testing.T) {
	var typ ConfigProfileControllerUpdateConfigProfileInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ConfigProfileControllerUpdateConfigProfileInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateApiTokenRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateApiTokenRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateApiTokenRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateApiTokenResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateApiTokenResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateApiTokenResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateApiTokenResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateApiTokenResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateApiTokenResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileRequestDtoConfig_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileRequestDtoConfig
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileRequestDtoConfig
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateConfigProfileResponseDtoResponseNodesItem_EncodeDecode(t *testing.T) {
	var typ CreateConfigProfileResponseDtoResponseNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateConfigProfileResponseDtoResponseNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoAlpn_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoAlpn
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoAlpn
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoFingerprint_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoFingerprint
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoFingerprint
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoInbound_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostRequestDtoSecurityLayer_EncodeDecode(t *testing.T) {
	var typ CreateHostRequestDtoSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostRequestDtoSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateHostResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateHostResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostResponseDtoResponseInbound_EncodeDecode(t *testing.T) {
	var typ CreateHostResponseDtoResponseInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostResponseDtoResponseInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateHostResponseDtoResponseSecurityLayer_EncodeDecode(t *testing.T) {
	var typ CreateHostResponseDtoResponseSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateHostResponseDtoResponseSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingHistoryRecordRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingHistoryRecordRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingHistoryRecordRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingHistoryRecordResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingHistoryRecordResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingHistoryRecordResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingHistoryRecordResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingHistoryRecordResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingHistoryRecordResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingHistoryRecordResponseDtoResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingHistoryRecordResponseDtoResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingHistoryRecordResponseDtoResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingHistoryRecordResponseDtoResponseRecordsItemProvider_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingHistoryRecordResponseDtoResponseRecordsItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingHistoryRecordResponseDtoResponseRecordsItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeResponseDtoResponseAvailableBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeResponseDtoResponseAvailableBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeResponseDtoResponseAvailableBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeResponseDtoResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeResponseDtoResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeResponseDtoResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeResponseDtoResponseBillingNodesItemNode_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeResponseDtoResponseBillingNodesItemNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeResponseDtoResponseBillingNodesItemNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeResponseDtoResponseBillingNodesItemProvider_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeResponseDtoResponseBillingNodesItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeResponseDtoResponseBillingNodesItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraBillingNodeResponseDtoResponseStats_EncodeDecode(t *testing.T) {
	var typ CreateInfraBillingNodeResponseDtoResponseStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraBillingNodeResponseDtoResponseStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraProviderRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraProviderRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraProviderRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraProviderResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateInfraProviderResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraProviderResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraProviderResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateInfraProviderResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraProviderResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraProviderResponseDtoResponseBillingHistory_EncodeDecode(t *testing.T) {
	var typ CreateInfraProviderResponseDtoResponseBillingHistory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraProviderResponseDtoResponseBillingHistory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInfraProviderResponseDtoResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ CreateInfraProviderResponseDtoResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInfraProviderResponseDtoResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInternalSquadRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateInternalSquadRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInternalSquadRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInternalSquadResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateInternalSquadResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInternalSquadResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInternalSquadResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateInternalSquadResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInternalSquadResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInternalSquadResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ CreateInternalSquadResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInternalSquadResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateInternalSquadResponseDtoResponseInfo_EncodeDecode(t *testing.T) {
	var typ CreateInternalSquadResponseDtoResponseInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateInternalSquadResponseDtoResponseInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeRequestDtoConfigProfile_EncodeDecode(t *testing.T) {
	var typ CreateNodeRequestDtoConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeRequestDtoConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeResponseDtoResponseConfigProfile_EncodeDecode(t *testing.T) {
	var typ CreateNodeResponseDtoResponseConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeResponseDtoResponseConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeResponseDtoResponseConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ CreateNodeResponseDtoResponseConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeResponseDtoResponseConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateNodeResponseDtoResponseProvider_EncodeDecode(t *testing.T) {
	var typ CreateNodeResponseDtoResponseProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateNodeResponseDtoResponseProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserHwidDeviceRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateUserHwidDeviceRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserHwidDeviceRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserHwidDeviceResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateUserHwidDeviceResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserHwidDeviceResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserHwidDeviceResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateUserHwidDeviceResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserHwidDeviceResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserHwidDeviceResponseDtoResponseDevicesItem_EncodeDecode(t *testing.T) {
	var typ CreateUserHwidDeviceResponseDtoResponseDevicesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserHwidDeviceResponseDtoResponseDevicesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserRequestDto_EncodeDecode(t *testing.T) {
	var typ CreateUserRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ CreateUserRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserRequestDtoTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ CreateUserRequestDtoTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserRequestDtoTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserResponseDto_EncodeDecode(t *testing.T) {
	var typ CreateUserResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ CreateUserResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ CreateUserResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ CreateUserResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ CreateUserResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ CreateUserResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestCreateUserResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ CreateUserResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 CreateUserResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteAllUserHwidDevicesRequestDto_EncodeDecode(t *testing.T) {
	var typ DeleteAllUserHwidDevicesRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteAllUserHwidDevicesRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteAllUserHwidDevicesResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteAllUserHwidDevicesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteAllUserHwidDevicesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteAllUserHwidDevicesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteAllUserHwidDevicesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteAllUserHwidDevicesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteAllUserHwidDevicesResponseDtoResponseDevicesItem_EncodeDecode(t *testing.T) {
	var typ DeleteAllUserHwidDevicesResponseDtoResponseDevicesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteAllUserHwidDevicesResponseDtoResponseDevicesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteApiTokenResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteApiTokenResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteApiTokenResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteConfigProfileResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteConfigProfileResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteConfigProfileResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteConfigProfileResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteConfigProfileResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteConfigProfileResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteHostResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteHostResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteHostResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteHostResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteHostResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteHostResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingHistoryRecordByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingHistoryRecordByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingHistoryRecordByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingHistoryRecordByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingHistoryRecordByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingHistoryRecordByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingHistoryRecordByUuidResponseDtoResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingHistoryRecordByUuidResponseDtoResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingHistoryRecordByUuidResponseDtoResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingHistoryRecordByUuidResponseDtoResponseRecordsItemProvider_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingHistoryRecordByUuidResponseDtoResponseRecordsItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingHistoryRecordByUuidResponseDtoResponseRecordsItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingNodeByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingNodeByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingNodeByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingNodeByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingNodeByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingNodeByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingNodeByUuidResponseDtoResponseAvailableBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingNodeByUuidResponseDtoResponseAvailableBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingNodeByUuidResponseDtoResponseAvailableBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItemNode_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItemNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItemNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItemProvider_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingNodeByUuidResponseDtoResponseBillingNodesItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraBillingNodeByUuidResponseDtoResponseStats_EncodeDecode(t *testing.T) {
	var typ DeleteInfraBillingNodeByUuidResponseDtoResponseStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraBillingNodeByUuidResponseDtoResponseStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraProviderByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteInfraProviderByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraProviderByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInfraProviderByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteInfraProviderByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInfraProviderByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInternalSquadResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteInternalSquadResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInternalSquadResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteInternalSquadResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteInternalSquadResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteInternalSquadResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteUserHwidDeviceRequestDto_EncodeDecode(t *testing.T) {
	var typ DeleteUserHwidDeviceRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteUserHwidDeviceRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteUserHwidDeviceResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteUserHwidDeviceResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteUserHwidDeviceResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteUserHwidDeviceResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteUserHwidDeviceResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteUserHwidDeviceResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteUserHwidDeviceResponseDtoResponseDevicesItem_EncodeDecode(t *testing.T) {
	var typ DeleteUserHwidDeviceResponseDtoResponseDevicesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteUserHwidDeviceResponseDtoResponseDevicesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteUserResponseDto_EncodeDecode(t *testing.T) {
	var typ DeleteUserResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteUserResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDeleteUserResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DeleteUserResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DeleteUserResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ DisableNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DisableNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableNodeResponseDtoResponseConfigProfile_EncodeDecode(t *testing.T) {
	var typ DisableNodeResponseDtoResponseConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableNodeResponseDtoResponseConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableNodeResponseDtoResponseConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ DisableNodeResponseDtoResponseConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableNodeResponseDtoResponseConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableNodeResponseDtoResponseProvider_EncodeDecode(t *testing.T) {
	var typ DisableNodeResponseDtoResponseProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableNodeResponseDtoResponseProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableUserResponseDto_EncodeDecode(t *testing.T) {
	var typ DisableUserResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableUserResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableUserResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ DisableUserResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableUserResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableUserResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ DisableUserResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableUserResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableUserResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ DisableUserResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableUserResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableUserResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ DisableUserResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableUserResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableUserResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ DisableUserResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableUserResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestDisableUserResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ DisableUserResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 DisableUserResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ EnableNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ EnableNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableNodeResponseDtoResponseConfigProfile_EncodeDecode(t *testing.T) {
	var typ EnableNodeResponseDtoResponseConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableNodeResponseDtoResponseConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableNodeResponseDtoResponseConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ EnableNodeResponseDtoResponseConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableNodeResponseDtoResponseConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableNodeResponseDtoResponseProvider_EncodeDecode(t *testing.T) {
	var typ EnableNodeResponseDtoResponseProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableNodeResponseDtoResponseProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableUserResponseDto_EncodeDecode(t *testing.T) {
	var typ EnableUserResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableUserResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableUserResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ EnableUserResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableUserResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableUserResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ EnableUserResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableUserResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableUserResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ EnableUserResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableUserResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableUserResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ EnableUserResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableUserResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableUserResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ EnableUserResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableUserResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEnableUserResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ EnableUserResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EnableUserResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEncryptHappCryptoLinkRequestDto_EncodeDecode(t *testing.T) {
	var typ EncryptHappCryptoLinkRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EncryptHappCryptoLinkRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEncryptHappCryptoLinkResponseDto_EncodeDecode(t *testing.T) {
	var typ EncryptHappCryptoLinkResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EncryptHappCryptoLinkResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestEncryptHappCryptoLinkResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ EncryptHappCryptoLinkResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 EncryptHappCryptoLinkResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDto_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDtoResponseApiKeysItem_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDtoResponseApiKeysItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDtoResponseApiKeysItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestFindAllApiTokensResponseDtoResponseDocs_EncodeDecode(t *testing.T) {
	var typ FindAllApiTokensResponseDtoResponseDocs
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 FindAllApiTokensResponseDtoResponseDocs
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGenerateX25519ResponseDto_EncodeDecode(t *testing.T) {
	var typ GenerateX25519ResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GenerateX25519ResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGenerateX25519ResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GenerateX25519ResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GenerateX25519ResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGenerateX25519ResponseDtoResponseKeypairsItem_EncodeDecode(t *testing.T) {
	var typ GenerateX25519ResponseDtoResponseKeypairsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GenerateX25519ResponseDtoResponseKeypairsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHostTagsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllHostTagsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHostTagsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHostTagsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllHostTagsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHostTagsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHostsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllHostsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHostsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHostsResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetAllHostsResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHostsResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHostsResponseDtoResponseItemInbound_EncodeDecode(t *testing.T) {
	var typ GetAllHostsResponseDtoResponseItemInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHostsResponseDtoResponseItemInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHostsResponseDtoResponseItemSecurityLayer_EncodeDecode(t *testing.T) {
	var typ GetAllHostsResponseDtoResponseItemSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHostsResponseDtoResponseItemSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHwidDevicesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllHwidDevicesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHwidDevicesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHwidDevicesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllHwidDevicesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHwidDevicesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllHwidDevicesResponseDtoResponseDevicesItem_EncodeDecode(t *testing.T) {
	var typ GetAllHwidDevicesResponseDtoResponseDevicesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllHwidDevicesResponseDtoResponseDevicesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllInboundsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllInboundsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllInboundsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllInboundsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllInboundsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllInboundsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllInboundsResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetAllInboundsResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllInboundsResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllNodesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllNodesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllNodesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllNodesResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetAllNodesResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllNodesResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllNodesResponseDtoResponseItemConfigProfile_EncodeDecode(t *testing.T) {
	var typ GetAllNodesResponseDtoResponseItemConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllNodesResponseDtoResponseItemConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllNodesResponseDtoResponseItemConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetAllNodesResponseDtoResponseItemConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllNodesResponseDtoResponseItemConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllNodesResponseDtoResponseItemProvider_EncodeDecode(t *testing.T) {
	var typ GetAllNodesResponseDtoResponseItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllNodesResponseDtoResponseItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItem_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks
	typ = make(GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks
	typ2 = make(GetAllSubscriptionsResponseDtoResponseSubscriptionsItemSsConfLinks)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemUser_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserUserStatus_EncodeDecode(t *testing.T) {
	var typ GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllSubscriptionsResponseDtoResponseSubscriptionsItemUserUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllTagsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllTagsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllTagsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllTagsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllTagsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllTagsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDto_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItem_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemHapp_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemStatus_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetAllUsersResponseDtoResponseUsersItemTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetAllUsersResponseDtoResponseUsersItemTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetAllUsersResponseDtoResponseUsersItemTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthCalendarMonth_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthCalendarMonth
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthCalendarMonth
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthCurrentYear_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthCurrentYear
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthCurrentYear
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthLast30Days_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthLast30Days
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthLast30Days
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthLastSevenDays_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthLastSevenDays
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthLastSevenDays
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetBandwidthStatsResponseDtoResponseBandwidthLastTwoDays_EncodeDecode(t *testing.T) {
	var typ GetBandwidthStatsResponseDtoResponseBandwidthLastTwoDays
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetBandwidthStatsResponseDtoResponseBandwidthLastTwoDays
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfileByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetConfigProfileByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfileByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfileByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetConfigProfileByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfileByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfileByUuidResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfileByUuidResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfileByUuidResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfileByUuidResponseDtoResponseNodesItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfileByUuidResponseDtoResponseNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfileByUuidResponseDtoResponseNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponseConfigProfilesItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponseConfigProfilesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponseConfigProfilesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponseConfigProfilesItemInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponseConfigProfilesItemInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponseConfigProfilesItemInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetConfigProfilesResponseDtoResponseConfigProfilesItemNodesItem_EncodeDecode(t *testing.T) {
	var typ GetConfigProfilesResponseDtoResponseConfigProfilesItemNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetConfigProfilesResponseDtoResponseConfigProfilesItemNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponseByAppItem_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponseByAppItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponseByAppItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponseByPlatformItem_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponseByPlatformItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponseByPlatformItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetHwidDevicesStatsResponseDtoResponseStats_EncodeDecode(t *testing.T) {
	var typ GetHwidDevicesStatsResponseDtoResponseStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetHwidDevicesStatsResponseDtoResponseStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInboundsByProfileUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInboundsByProfileUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInboundsByProfileUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInboundsByProfileUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInboundsByProfileUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInboundsByProfileUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInboundsByProfileUuidResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetInboundsByProfileUuidResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInboundsByProfileUuidResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingHistoryRecordsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingHistoryRecordsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingHistoryRecordsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingHistoryRecordsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingHistoryRecordsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingHistoryRecordsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingHistoryRecordsResponseDtoResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingHistoryRecordsResponseDtoResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingHistoryRecordsResponseDtoResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingHistoryRecordsResponseDtoResponseRecordsItemProvider_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingHistoryRecordsResponseDtoResponseRecordsItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingHistoryRecordsResponseDtoResponseRecordsItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingNodesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingNodesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingNodesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingNodesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingNodesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingNodesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingNodesResponseDtoResponseAvailableBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingNodesResponseDtoResponseAvailableBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingNodesResponseDtoResponseAvailableBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingNodesResponseDtoResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingNodesResponseDtoResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingNodesResponseDtoResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingNodesResponseDtoResponseBillingNodesItemNode_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingNodesResponseDtoResponseBillingNodesItemNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingNodesResponseDtoResponseBillingNodesItemNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingNodesResponseDtoResponseBillingNodesItemProvider_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingNodesResponseDtoResponseBillingNodesItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingNodesResponseDtoResponseBillingNodesItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraBillingNodesResponseDtoResponseStats_EncodeDecode(t *testing.T) {
	var typ GetInfraBillingNodesResponseDtoResponseStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraBillingNodesResponseDtoResponseStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProviderByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInfraProviderByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProviderByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProviderByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInfraProviderByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProviderByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProviderByUuidResponseDtoResponseBillingHistory_EncodeDecode(t *testing.T) {
	var typ GetInfraProviderByUuidResponseDtoResponseBillingHistory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProviderByUuidResponseDtoResponseBillingHistory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProviderByUuidResponseDtoResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ GetInfraProviderByUuidResponseDtoResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProviderByUuidResponseDtoResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponseProvidersItem_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponseProvidersItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponseProvidersItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponseProvidersItemBillingHistory_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponseProvidersItemBillingHistory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponseProvidersItemBillingHistory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInfraProvidersResponseDtoResponseProvidersItemBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ GetInfraProvidersResponseDtoResponseProvidersItemBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInfraProvidersResponseDtoResponseProvidersItemBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadAccessibleNodesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadAccessibleNodesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadAccessibleNodesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadAccessibleNodesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadAccessibleNodesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadAccessibleNodesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadAccessibleNodesResponseDtoResponseAccessibleNodesItem_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadAccessibleNodesResponseDtoResponseAccessibleNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadAccessibleNodesResponseDtoResponseAccessibleNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadByUuidResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadByUuidResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadByUuidResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadByUuidResponseDtoResponseInfo_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadByUuidResponseDtoResponseInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadByUuidResponseDtoResponseInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponseInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponseInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponseInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponseInternalSquadsItemInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponseInternalSquadsItemInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponseInternalSquadsItemInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetInternalSquadsResponseDtoResponseInternalSquadsItemInfo_EncodeDecode(t *testing.T) {
	var typ GetInternalSquadsResponseDtoResponseInternalSquadsItemInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetInternalSquadsResponseDtoResponseInternalSquadsItemInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodeUserUsageByRangeResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodeUserUsageByRangeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodeUserUsageByRangeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodeUserUsageByRangeResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetNodeUserUsageByRangeResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodeUserUsageByRangeResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponseNodesItem_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponseNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponseNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponseNodesItemInboundsStatsItem_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponseNodesItemInboundsStatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponseNodesItemInboundsStatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesMetricsResponseDtoResponseNodesItemOutboundsStatsItem_EncodeDecode(t *testing.T) {
	var typ GetNodesMetricsResponseDtoResponseNodesItemOutboundsStatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesMetricsResponseDtoResponseNodesItemOutboundsStatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesRealtimeUsageResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesRealtimeUsageResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesRealtimeUsageResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesRealtimeUsageResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetNodesRealtimeUsageResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesRealtimeUsageResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesStatisticsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesStatisticsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesStatisticsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesStatisticsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetNodesStatisticsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesStatisticsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesStatisticsResponseDtoResponseLastSevenDaysItem_EncodeDecode(t *testing.T) {
	var typ GetNodesStatisticsResponseDtoResponseLastSevenDaysItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesStatisticsResponseDtoResponseLastSevenDaysItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesUsageByRangeResponseDto_EncodeDecode(t *testing.T) {
	var typ GetNodesUsageByRangeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesUsageByRangeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetNodesUsageByRangeResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetNodesUsageByRangeResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetNodesUsageByRangeResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneHostResponseDto_EncodeDecode(t *testing.T) {
	var typ GetOneHostResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneHostResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneHostResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetOneHostResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneHostResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneHostResponseDtoResponseInbound_EncodeDecode(t *testing.T) {
	var typ GetOneHostResponseDtoResponseInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneHostResponseDtoResponseInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneHostResponseDtoResponseSecurityLayer_EncodeDecode(t *testing.T) {
	var typ GetOneHostResponseDtoResponseSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneHostResponseDtoResponseSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ GetOneNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetOneNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneNodeResponseDtoResponseConfigProfile_EncodeDecode(t *testing.T) {
	var typ GetOneNodeResponseDtoResponseConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneNodeResponseDtoResponseConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneNodeResponseDtoResponseConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ GetOneNodeResponseDtoResponseConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneNodeResponseDtoResponseConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetOneNodeResponseDtoResponseProvider_EncodeDecode(t *testing.T) {
	var typ GetOneNodeResponseDtoResponseProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetOneNodeResponseDtoResponseProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetPubKeyResponseDto_EncodeDecode(t *testing.T) {
	var typ GetPubKeyResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetPubKeyResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetPubKeyResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetPubKeyResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetPubKeyResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseConvertedUserInfo_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseConvertedUserInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseConvertedUserInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseHeaders_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseHeaders
	typ = make(GetRawSubscriptionByShortUuidResponseDtoResponseHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseHeaders
	typ2 = make(GetRawSubscriptionByShortUuidResponseDtoResponseHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItem_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemAdditionalParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemAdditionalParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemAdditionalParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbData_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbData
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbData
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbDataRawInbound_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbDataRawInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemDbDataRawInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemMuxParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemMuxParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemMuxParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemPassword_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemPassword
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemPassword
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptions_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptions
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptions
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptionsSs_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptionsSs
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemProtocolOptionsSs
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemSockoptParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemSockoptParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemSockoptParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemXHttpExtraParams_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemXHttpExtraParams
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseRawHostsItemXHttpExtraParams
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUser_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserHapp_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserStatus_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRawSubscriptionByShortUuidResponseDtoResponseUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetRawSubscriptionByShortUuidResponseDtoResponseUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRawSubscriptionByShortUuidResponseDtoResponseUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRemnawaveHealthResponseDto_EncodeDecode(t *testing.T) {
	var typ GetRemnawaveHealthResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRemnawaveHealthResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRemnawaveHealthResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetRemnawaveHealthResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRemnawaveHealthResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetRemnawaveHealthResponseDtoResponsePm2StatsItem_EncodeDecode(t *testing.T) {
	var typ GetRemnawaveHealthResponseDtoResponsePm2StatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetRemnawaveHealthResponseDtoResponsePm2StatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseCPU_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseCPU
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseCPU
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseMemory_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseMemory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseMemory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseNodes_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseNodes
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseNodes
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseOnlineStats_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseOnlineStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseOnlineStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseUsers_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseUsers
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseUsers
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetStatsResponseDtoResponseUsersStatusCounts_EncodeDecode(t *testing.T) {
	var typ GetStatsResponseDtoResponseUsersStatusCounts
	typ = make(GetStatsResponseDtoResponseUsersStatusCounts)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetStatsResponseDtoResponseUsersStatusCounts
	typ2 = make(GetStatsResponseDtoResponseUsersStatusCounts)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByShortUuidProtectedResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByShortUuidProtectedResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByShortUuidProtectedResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByShortUuidProtectedResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByShortUuidProtectedResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByShortUuidProtectedResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByShortUuidProtectedResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByShortUuidProtectedResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByShortUuidProtectedResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByShortUuidProtectedResponseDtoResponseSsConfLinks_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByShortUuidProtectedResponseDtoResponseSsConfLinks
	typ = make(GetSubscriptionByShortUuidProtectedResponseDtoResponseSsConfLinks)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByShortUuidProtectedResponseDtoResponseSsConfLinks
	typ2 = make(GetSubscriptionByShortUuidProtectedResponseDtoResponseSsConfLinks)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByShortUuidProtectedResponseDtoResponseUser_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByShortUuidProtectedResponseDtoResponseUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByShortUuidProtectedResponseDtoResponseUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByShortUuidProtectedResponseDtoResponseUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByShortUuidProtectedResponseDtoResponseUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByShortUuidProtectedResponseDtoResponseUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByShortUuidProtectedResponseDtoResponseUserUserStatus_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByShortUuidProtectedResponseDtoResponseUserUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByShortUuidProtectedResponseDtoResponseUserUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUsernameResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUsernameResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUsernameResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUsernameResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUsernameResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUsernameResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUsernameResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUsernameResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUsernameResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUsernameResponseDtoResponseSsConfLinks_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUsernameResponseDtoResponseSsConfLinks
	typ = make(GetSubscriptionByUsernameResponseDtoResponseSsConfLinks)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUsernameResponseDtoResponseSsConfLinks
	typ2 = make(GetSubscriptionByUsernameResponseDtoResponseSsConfLinks)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUsernameResponseDtoResponseUser_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUsernameResponseDtoResponseUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUsernameResponseDtoResponseUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUsernameResponseDtoResponseUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUsernameResponseDtoResponseUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUsernameResponseDtoResponseUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUsernameResponseDtoResponseUserUserStatus_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUsernameResponseDtoResponseUserUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUsernameResponseDtoResponseUserUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUuidResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUuidResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUuidResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUuidResponseDtoResponseSsConfLinks_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUuidResponseDtoResponseSsConfLinks
	typ = make(GetSubscriptionByUuidResponseDtoResponseSsConfLinks)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUuidResponseDtoResponseSsConfLinks
	typ2 = make(GetSubscriptionByUuidResponseDtoResponseSsConfLinks)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUuidResponseDtoResponseUser_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUuidResponseDtoResponseUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUuidResponseDtoResponseUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUuidResponseDtoResponseUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUuidResponseDtoResponseUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUuidResponseDtoResponseUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionByUuidResponseDtoResponseUserUserStatus_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionByUuidResponseDtoResponseUserUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionByUuidResponseDtoResponseUserUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionInfoResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionInfoResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionInfoResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionInfoResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionInfoResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionInfoResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionInfoResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionInfoResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionInfoResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionInfoResponseDtoResponseSsConfLinks_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionInfoResponseDtoResponseSsConfLinks
	typ = make(GetSubscriptionInfoResponseDtoResponseSsConfLinks)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionInfoResponseDtoResponseSsConfLinks
	typ2 = make(GetSubscriptionInfoResponseDtoResponseSsConfLinks)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionInfoResponseDtoResponseUser_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionInfoResponseDtoResponseUser
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionInfoResponseDtoResponseUser
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionInfoResponseDtoResponseUserTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionInfoResponseDtoResponseUserTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionInfoResponseDtoResponseUserTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionInfoResponseDtoResponseUserUserStatus_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionInfoResponseDtoResponseUserUserStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionInfoResponseDtoResponseUserUserStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryResponseDtoResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDtoResponseByParsedAppItem_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDtoResponseByParsedAppItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDtoResponseByParsedAppItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionRequestHistoryStatsResponseDtoResponseHourlyRequestStatsItem_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionRequestHistoryStatsResponseDtoResponseHourlyRequestStatsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionRequestHistoryStatsResponseDtoResponseHourlyRequestStatsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionSettingsResponseDto_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionSettingsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionSettingsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionSettingsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionSettingsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionSettingsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetSubscriptionSettingsResponseDtoResponseCustomResponseHeaders_EncodeDecode(t *testing.T) {
	var typ GetSubscriptionSettingsResponseDtoResponseCustomResponseHeaders
	typ = make(GetSubscriptionSettingsResponseDtoResponseCustomResponseHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetSubscriptionSettingsResponseDtoResponseCustomResponseHeaders
	typ2 = make(GetSubscriptionSettingsResponseDtoResponseCustomResponseHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetTemplateResponseDto_EncodeDecode(t *testing.T) {
	var typ GetTemplateResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetTemplateResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetTemplateResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetTemplateResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetTemplateResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetTemplateResponseDtoResponseTemplateType_EncodeDecode(t *testing.T) {
	var typ GetTemplateResponseDtoResponseTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetTemplateResponseDtoResponseTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDtoResponseActiveNodesItem_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDtoResponseActiveNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDtoResponseActiveNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserAccessibleNodesResponseDtoResponseActiveNodesItemActiveSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserAccessibleNodesResponseDtoResponseActiveNodesItemActiveSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserAccessibleNodesResponseDtoResponseActiveNodesItemActiveSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByEmailResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserByEmailResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByEmailResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByEmailResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetUserByEmailResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByEmailResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByEmailResponseDtoResponseItemActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserByEmailResponseDtoResponseItemActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByEmailResponseDtoResponseItemActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByEmailResponseDtoResponseItemHapp_EncodeDecode(t *testing.T) {
	var typ GetUserByEmailResponseDtoResponseItemHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByEmailResponseDtoResponseItemHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByEmailResponseDtoResponseItemLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetUserByEmailResponseDtoResponseItemLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByEmailResponseDtoResponseItemLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByEmailResponseDtoResponseItemStatus_EncodeDecode(t *testing.T) {
	var typ GetUserByEmailResponseDtoResponseItemStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByEmailResponseDtoResponseItemStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByEmailResponseDtoResponseItemTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetUserByEmailResponseDtoResponseItemTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByEmailResponseDtoResponseItemTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByShortUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserByShortUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByShortUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByShortUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserByShortUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByShortUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByShortUuidResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserByShortUuidResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByShortUuidResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByShortUuidResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ GetUserByShortUuidResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByShortUuidResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByShortUuidResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetUserByShortUuidResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByShortUuidResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByShortUuidResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ GetUserByShortUuidResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByShortUuidResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByShortUuidResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetUserByShortUuidResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByShortUuidResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTagResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserByTagResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTagResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTagResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetUserByTagResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTagResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTagResponseDtoResponseItemActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserByTagResponseDtoResponseItemActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTagResponseDtoResponseItemActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTagResponseDtoResponseItemHapp_EncodeDecode(t *testing.T) {
	var typ GetUserByTagResponseDtoResponseItemHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTagResponseDtoResponseItemHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTagResponseDtoResponseItemLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetUserByTagResponseDtoResponseItemLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTagResponseDtoResponseItemLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTagResponseDtoResponseItemStatus_EncodeDecode(t *testing.T) {
	var typ GetUserByTagResponseDtoResponseItemStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTagResponseDtoResponseItemStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTagResponseDtoResponseItemTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetUserByTagResponseDtoResponseItemTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTagResponseDtoResponseItemTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTelegramIdResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserByTelegramIdResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTelegramIdResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTelegramIdResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetUserByTelegramIdResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTelegramIdResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTelegramIdResponseDtoResponseItemActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserByTelegramIdResponseDtoResponseItemActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTelegramIdResponseDtoResponseItemActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTelegramIdResponseDtoResponseItemHapp_EncodeDecode(t *testing.T) {
	var typ GetUserByTelegramIdResponseDtoResponseItemHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTelegramIdResponseDtoResponseItemHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTelegramIdResponseDtoResponseItemLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetUserByTelegramIdResponseDtoResponseItemLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTelegramIdResponseDtoResponseItemLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTelegramIdResponseDtoResponseItemStatus_EncodeDecode(t *testing.T) {
	var typ GetUserByTelegramIdResponseDtoResponseItemStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTelegramIdResponseDtoResponseItemStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByTelegramIdResponseDtoResponseItemTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetUserByTelegramIdResponseDtoResponseItemTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByTelegramIdResponseDtoResponseItemTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUsernameResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserByUsernameResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUsernameResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUsernameResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserByUsernameResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUsernameResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUsernameResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserByUsernameResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUsernameResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUsernameResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ GetUserByUsernameResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUsernameResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUsernameResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetUserByUsernameResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUsernameResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUsernameResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ GetUserByUsernameResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUsernameResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUsernameResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetUserByUsernameResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUsernameResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUuidResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserByUuidResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUuidResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUuidResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserByUuidResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUuidResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUuidResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ GetUserByUuidResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUuidResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUuidResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ GetUserByUuidResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUuidResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUuidResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ GetUserByUuidResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUuidResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUuidResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ GetUserByUuidResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUuidResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserByUuidResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ GetUserByUuidResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserByUuidResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserHwidDevicesResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserHwidDevicesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserHwidDevicesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserHwidDevicesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserHwidDevicesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserHwidDevicesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserHwidDevicesResponseDtoResponseDevicesItem_EncodeDecode(t *testing.T) {
	var typ GetUserHwidDevicesResponseDtoResponseDevicesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserHwidDevicesResponseDtoResponseDevicesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserSubscriptionRequestHistoryResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserSubscriptionRequestHistoryResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserSubscriptionRequestHistoryResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserSubscriptionRequestHistoryResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ GetUserSubscriptionRequestHistoryResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserSubscriptionRequestHistoryResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserSubscriptionRequestHistoryResponseDtoResponseRecordsItem_EncodeDecode(t *testing.T) {
	var typ GetUserSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserSubscriptionRequestHistoryResponseDtoResponseRecordsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserUsageByRangeResponseDto_EncodeDecode(t *testing.T) {
	var typ GetUserUsageByRangeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserUsageByRangeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestGetUserUsageByRangeResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ GetUserUsageByRangeResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 GetUserUsageByRangeResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDeleteHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDeleteHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDeleteHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerDisableHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerDisableHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerDisableHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerEnableHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerEnableHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerEnableHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetInboundToHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetInboundToHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetInboundToHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsBulkActionsControllerSetPortToHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsBulkActionsControllerSetPortToHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsBulkActionsControllerSetPortToHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerCreateHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerCreateHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerCreateHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerDeleteHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerDeleteHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerDeleteHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostTagsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostTagsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostTagsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetAllHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetAllHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetAllHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerGetOneHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerGetOneHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerGetOneHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerReorderHostsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerReorderHostsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerReorderHostsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHostsControllerUpdateHostInternalServerError_EncodeDecode(t *testing.T) {
	var typ HostsControllerUpdateHostInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HostsControllerUpdateHostInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerCreateUserHwidDeviceInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerCreateUserHwidDeviceInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerCreateUserHwidDeviceInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteAllUserHwidDevicesInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteAllUserHwidDevicesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteAllUserHwidDevicesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerDeleteUserHwidDeviceInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerDeleteUserHwidDeviceInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerDeleteUserHwidDeviceInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetAllUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetAllUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetAllUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetHwidDevicesStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetHwidDevicesStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetHwidDevicesStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestHwidUserDevicesControllerGetUserHwidDevicesInternalServerError_EncodeDecode(t *testing.T) {
	var typ HwidUserDevicesControllerGetUserHwidDevicesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 HwidUserDevicesControllerGetUserHwidDevicesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingHistoryRecordInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingHistoryRecordInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingHistoryRecordInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraBillingNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraBillingNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraBillingNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerCreateInfraProviderInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerCreateInfraProviderInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerCreateInfraProviderInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingHistoryRecordByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingHistoryRecordByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraBillingNodeByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraBillingNodeByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraBillingNodeByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerDeleteInfraProviderByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerDeleteInfraProviderByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerDeleteInfraProviderByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetBillingNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetBillingNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetBillingNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraBillingHistoryRecordsInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraBillingHistoryRecordsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraBillingHistoryRecordsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProviderByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProviderByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProviderByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerGetInfraProvidersInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerGetInfraProvidersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerGetInfraProvidersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraBillingNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraBillingNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraBillingNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInfraBillingControllerUpdateInfraProviderInternalServerError_EncodeDecode(t *testing.T) {
	var typ InfraBillingControllerUpdateInfraProviderInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InfraBillingControllerUpdateInfraProviderInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerAddUsersToInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerAddUsersToInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerAddUsersToInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerCreateInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerCreateInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerCreateInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerDeleteInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerDeleteInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerDeleteInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadAccessibleNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadAccessibleNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadAccessibleNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerGetInternalSquadsInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerGetInternalSquadsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerGetInternalSquadsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerRemoveUsersFromInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerRemoveUsersFromInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerRemoveUsersFromInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestInternalSquadControllerUpdateInternalSquadInternalServerError_EncodeDecode(t *testing.T) {
	var typ InternalSquadControllerUpdateInternalSquadInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 InternalSquadControllerUpdateInternalSquadInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestKeygenControllerGenerateKeyInternalServerError_EncodeDecode(t *testing.T) {
	var typ KeygenControllerGenerateKeyInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 KeygenControllerGenerateKeyInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestLoginRequestDto_EncodeDecode(t *testing.T) {
	var typ LoginRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 LoginRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerCreateNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerCreateNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerCreateNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDeleteNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerDeleteNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDeleteNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerDisableNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerDisableNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerDisableNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerEnableNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerEnableNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerEnableNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetAllNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetAllNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetAllNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerGetOneNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerGetOneNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerGetOneNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerReorderNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerReorderNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerReorderNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartAllNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartAllNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartAllNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerRestartNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerRestartNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerRestartNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesControllerUpdateNodeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesControllerUpdateNodeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesControllerUpdateNodeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUsageHistoryControllerGetNodesUsageByRangeInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesUsageHistoryControllerGetNodesUsageByRangeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUsageHistoryControllerGetNodesUsageByRangeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodeUserUsageInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodeUserUsageInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodeUserUsageInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestNodesUserUsageHistoryControllerGetNodesRealtimeUsageInternalServerError_EncodeDecode(t *testing.T) {
	var typ NodesUserUsageHistoryControllerGetNodesRealtimeUsageInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 NodesUserUsageHistoryControllerGetNodesRealtimeUsageInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2AuthorizeRequestDto_EncodeDecode(t *testing.T) {
	var typ OAuth2AuthorizeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2AuthorizeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2AuthorizeRequestDtoProvider_EncodeDecode(t *testing.T) {
	var typ OAuth2AuthorizeRequestDtoProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2AuthorizeRequestDtoProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2CallbackRequestDto_EncodeDecode(t *testing.T) {
	var typ OAuth2CallbackRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2CallbackRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestOAuth2CallbackRequestDtoProvider_EncodeDecode(t *testing.T) {
	var typ OAuth2CallbackRequestDtoProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 OAuth2CallbackRequestDtoProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRegisterRequestDto_EncodeDecode(t *testing.T) {
	var typ RegisterRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RegisterRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemoveUsersFromInternalSquadResponseDto_EncodeDecode(t *testing.T) {
	var typ RemoveUsersFromInternalSquadResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemoveUsersFromInternalSquadResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRemoveUsersFromInternalSquadResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ RemoveUsersFromInternalSquadResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RemoveUsersFromInternalSquadResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostRequestDto_EncodeDecode(t *testing.T) {
	var typ ReorderHostRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostRequestDtoHostsItem_EncodeDecode(t *testing.T) {
	var typ ReorderHostRequestDtoHostsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostRequestDtoHostsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostResponseDto_EncodeDecode(t *testing.T) {
	var typ ReorderHostResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderHostResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ ReorderHostResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderHostResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ ReorderNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeRequestDtoNodesItem_EncodeDecode(t *testing.T) {
	var typ ReorderNodeRequestDtoNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeRequestDtoNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ ReorderNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ ReorderNodeResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeResponseDtoResponseItemConfigProfile_EncodeDecode(t *testing.T) {
	var typ ReorderNodeResponseDtoResponseItemConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeResponseDtoResponseItemConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeResponseDtoResponseItemConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ ReorderNodeResponseDtoResponseItemConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeResponseDtoResponseItemConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestReorderNodeResponseDtoResponseItemProvider_EncodeDecode(t *testing.T) {
	var typ ReorderNodeResponseDtoResponseItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ReorderNodeResponseDtoResponseItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestResetUserTrafficResponseDto_EncodeDecode(t *testing.T) {
	var typ ResetUserTrafficResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ResetUserTrafficResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestResetUserTrafficResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ ResetUserTrafficResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ResetUserTrafficResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestResetUserTrafficResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ ResetUserTrafficResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ResetUserTrafficResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestResetUserTrafficResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ ResetUserTrafficResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ResetUserTrafficResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestResetUserTrafficResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ ResetUserTrafficResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ResetUserTrafficResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestResetUserTrafficResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ ResetUserTrafficResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ResetUserTrafficResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestResetUserTrafficResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ ResetUserTrafficResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 ResetUserTrafficResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRestartAllNodesRequestBodyDto_EncodeDecode(t *testing.T) {
	var typ RestartAllNodesRequestBodyDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RestartAllNodesRequestBodyDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRestartAllNodesResponseDto_EncodeDecode(t *testing.T) {
	var typ RestartAllNodesResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RestartAllNodesResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRestartAllNodesResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ RestartAllNodesResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RestartAllNodesResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRestartNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ RestartNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RestartNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRestartNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ RestartNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RestartNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionBodyDto_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionBodyDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionBodyDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionResponseDto_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestRevokeUserSubscriptionResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ RevokeUserSubscriptionResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 RevokeUserSubscriptionResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetInboundToManyHostsRequestDto_EncodeDecode(t *testing.T) {
	var typ SetInboundToManyHostsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetInboundToManyHostsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetInboundToManyHostsResponseDto_EncodeDecode(t *testing.T) {
	var typ SetInboundToManyHostsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetInboundToManyHostsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetInboundToManyHostsResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ SetInboundToManyHostsResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetInboundToManyHostsResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetInboundToManyHostsResponseDtoResponseItemInbound_EncodeDecode(t *testing.T) {
	var typ SetInboundToManyHostsResponseDtoResponseItemInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetInboundToManyHostsResponseDtoResponseItemInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetInboundToManyHostsResponseDtoResponseItemSecurityLayer_EncodeDecode(t *testing.T) {
	var typ SetInboundToManyHostsResponseDtoResponseItemSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetInboundToManyHostsResponseDtoResponseItemSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetPortToManyHostsRequestDto_EncodeDecode(t *testing.T) {
	var typ SetPortToManyHostsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetPortToManyHostsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetPortToManyHostsResponseDto_EncodeDecode(t *testing.T) {
	var typ SetPortToManyHostsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetPortToManyHostsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetPortToManyHostsResponseDtoResponseItem_EncodeDecode(t *testing.T) {
	var typ SetPortToManyHostsResponseDtoResponseItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetPortToManyHostsResponseDtoResponseItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetPortToManyHostsResponseDtoResponseItemInbound_EncodeDecode(t *testing.T) {
	var typ SetPortToManyHostsResponseDtoResponseItemInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetPortToManyHostsResponseDtoResponseItemInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSetPortToManyHostsResponseDtoResponseItemSecurityLayer_EncodeDecode(t *testing.T) {
	var typ SetPortToManyHostsResponseDtoResponseItemSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SetPortToManyHostsResponseDtoResponseItemSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionControllerGetSubscriptionInfoByShortUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionControllerGetSubscriptionInfoByShortUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionControllerGetSubscriptionInfoByShortUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerGetSettingsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerGetSettingsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerGetSettingsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionSettingsControllerUpdateSettingsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionSettingsControllerUpdateSettingsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionSettingsControllerUpdateSettingsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerGetTemplateInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerGetTemplateInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerGetTemplateInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionTemplateControllerUpdateTemplateInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionTemplateControllerUpdateTemplateInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionTemplateControllerUpdateTemplateInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetAllSubscriptionsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetAllSubscriptionsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetAllSubscriptionsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetRawSubscriptionByShortUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetRawSubscriptionByShortUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetRawSubscriptionByShortUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByShortUuidProtectedInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByShortUuidProtectedInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByShortUuidProtectedInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByShortUuidProtectedNotFound_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByShortUuidProtectedNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByShortUuidProtectedNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUsernameInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUsernameInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUsernameInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUsernameNotFound_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUsernameNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUsernameNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSubscriptionsControllerGetSubscriptionByUuidNotFound_EncodeDecode(t *testing.T) {
	var typ SubscriptionsControllerGetSubscriptionByUuidNotFound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SubscriptionsControllerGetSubscriptionByUuidNotFound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerEncryptHappCryptoLinkInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerEncryptHappCryptoLinkInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerEncryptHappCryptoLinkInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetBandwidthStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetBandwidthStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetBandwidthStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesMetricsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesMetricsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesMetricsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetNodesStatisticsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetNodesStatisticsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetNodesStatisticsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetRemnawaveHealthInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetRemnawaveHealthInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetRemnawaveHealthInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestSystemControllerGetX25519KeypairsInternalServerError_EncodeDecode(t *testing.T) {
	var typ SystemControllerGetX25519KeypairsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 SystemControllerGetX25519KeypairsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestTelegramCallbackRequestDto_EncodeDecode(t *testing.T) {
	var typ TelegramCallbackRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 TelegramCallbackRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileRequestDtoConfig_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileRequestDtoConfig
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileRequestDtoConfig
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateConfigProfileResponseDtoResponseNodesItem_EncodeDecode(t *testing.T) {
	var typ UpdateConfigProfileResponseDtoResponseNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateConfigProfileResponseDtoResponseNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoAlpn_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoAlpn
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoAlpn
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoFingerprint_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoFingerprint
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoFingerprint
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoInbound_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostRequestDtoSecurityLayer_EncodeDecode(t *testing.T) {
	var typ UpdateHostRequestDtoSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostRequestDtoSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateHostResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateHostResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostResponseDtoResponseInbound_EncodeDecode(t *testing.T) {
	var typ UpdateHostResponseDtoResponseInbound
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostResponseDtoResponseInbound
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateHostResponseDtoResponseSecurityLayer_EncodeDecode(t *testing.T) {
	var typ UpdateHostResponseDtoResponseSecurityLayer
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateHostResponseDtoResponseSecurityLayer
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeResponseDtoResponseAvailableBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeResponseDtoResponseAvailableBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeResponseDtoResponseAvailableBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeResponseDtoResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeResponseDtoResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeResponseDtoResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeResponseDtoResponseBillingNodesItemNode_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeResponseDtoResponseBillingNodesItemNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeResponseDtoResponseBillingNodesItemNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeResponseDtoResponseBillingNodesItemProvider_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeResponseDtoResponseBillingNodesItemProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeResponseDtoResponseBillingNodesItemProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraBillingNodeResponseDtoResponseStats_EncodeDecode(t *testing.T) {
	var typ UpdateInfraBillingNodeResponseDtoResponseStats
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraBillingNodeResponseDtoResponseStats
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraProviderRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateInfraProviderRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraProviderRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraProviderResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateInfraProviderResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraProviderResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraProviderResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateInfraProviderResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraProviderResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraProviderResponseDtoResponseBillingHistory_EncodeDecode(t *testing.T) {
	var typ UpdateInfraProviderResponseDtoResponseBillingHistory
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraProviderResponseDtoResponseBillingHistory
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInfraProviderResponseDtoResponseBillingNodesItem_EncodeDecode(t *testing.T) {
	var typ UpdateInfraProviderResponseDtoResponseBillingNodesItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInfraProviderResponseDtoResponseBillingNodesItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInternalSquadRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateInternalSquadRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInternalSquadRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInternalSquadResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateInternalSquadResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInternalSquadResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInternalSquadResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateInternalSquadResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInternalSquadResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInternalSquadResponseDtoResponseInboundsItem_EncodeDecode(t *testing.T) {
	var typ UpdateInternalSquadResponseDtoResponseInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInternalSquadResponseDtoResponseInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateInternalSquadResponseDtoResponseInfo_EncodeDecode(t *testing.T) {
	var typ UpdateInternalSquadResponseDtoResponseInfo
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateInternalSquadResponseDtoResponseInfo
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateNodeRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeRequestDtoConfigProfile_EncodeDecode(t *testing.T) {
	var typ UpdateNodeRequestDtoConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeRequestDtoConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateNodeResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateNodeResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeResponseDtoResponseConfigProfile_EncodeDecode(t *testing.T) {
	var typ UpdateNodeResponseDtoResponseConfigProfile
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeResponseDtoResponseConfigProfile
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeResponseDtoResponseConfigProfileActiveInboundsItem_EncodeDecode(t *testing.T) {
	var typ UpdateNodeResponseDtoResponseConfigProfileActiveInboundsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeResponseDtoResponseConfigProfileActiveInboundsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateNodeResponseDtoResponseProvider_EncodeDecode(t *testing.T) {
	var typ UpdateNodeResponseDtoResponseProvider
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateNodeResponseDtoResponseProvider
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsRequestDtoCustomResponseHeaders_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders
	typ = make(UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders
	typ2 = make(UpdateSubscriptionSettingsRequestDtoCustomResponseHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateSubscriptionSettingsResponseDtoResponseCustomResponseHeaders_EncodeDecode(t *testing.T) {
	var typ UpdateSubscriptionSettingsResponseDtoResponseCustomResponseHeaders
	typ = make(UpdateSubscriptionSettingsResponseDtoResponseCustomResponseHeaders)
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateSubscriptionSettingsResponseDtoResponseCustomResponseHeaders
	typ2 = make(UpdateSubscriptionSettingsResponseDtoResponseCustomResponseHeaders)
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateRequestDtoTemplateJson_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateRequestDtoTemplateJson
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateRequestDtoTemplateJson
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateRequestDtoTemplateType_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateRequestDtoTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateRequestDtoTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateTemplateResponseDtoResponseTemplateType_EncodeDecode(t *testing.T) {
	var typ UpdateTemplateResponseDtoResponseTemplateType
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateTemplateResponseDtoResponseTemplateType
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserRequestDto_EncodeDecode(t *testing.T) {
	var typ UpdateUserRequestDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserRequestDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserRequestDtoStatus_EncodeDecode(t *testing.T) {
	var typ UpdateUserRequestDtoStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserRequestDtoStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserRequestDtoTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ UpdateUserRequestDtoTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserRequestDtoTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserResponseDto_EncodeDecode(t *testing.T) {
	var typ UpdateUserResponseDto
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserResponseDto
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserResponseDtoResponse_EncodeDecode(t *testing.T) {
	var typ UpdateUserResponseDtoResponse
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserResponseDtoResponse
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserResponseDtoResponseActiveInternalSquadsItem_EncodeDecode(t *testing.T) {
	var typ UpdateUserResponseDtoResponseActiveInternalSquadsItem
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserResponseDtoResponseActiveInternalSquadsItem
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserResponseDtoResponseHapp_EncodeDecode(t *testing.T) {
	var typ UpdateUserResponseDtoResponseHapp
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserResponseDtoResponseHapp
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserResponseDtoResponseLastConnectedNode_EncodeDecode(t *testing.T) {
	var typ UpdateUserResponseDtoResponseLastConnectedNode
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserResponseDtoResponseLastConnectedNode
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserResponseDtoResponseStatus_EncodeDecode(t *testing.T) {
	var typ UpdateUserResponseDtoResponseStatus
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserResponseDtoResponseStatus
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUpdateUserResponseDtoResponseTrafficLimitStrategy_EncodeDecode(t *testing.T) {
	var typ UpdateUserResponseDtoResponseTrafficLimitStrategy
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UpdateUserResponseDtoResponseTrafficLimitStrategy
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryInternalServerError_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsInternalServerError_EncodeDecode(t *testing.T) {
	var typ UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UserSubscriptionRequestHistoryControllerGetSubscriptionRequestHistoryStatsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkAllResetUserTrafficInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkAllResetUserTrafficInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkAllResetUserTrafficInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersByStatusInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersByStatusInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersByStatusInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkDeleteUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkDeleteUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkDeleteUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkResetUserTrafficInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkResetUserTrafficInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkResetUserTrafficInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkRevokeUsersSubscriptionInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkRevokeUsersSubscriptionInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkRevokeUsersSubscriptionInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateAllUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateAllUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateAllUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersBulkActionsControllerBulkUpdateUsersInternalSquadsInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersBulkActionsControllerBulkUpdateUsersInternalSquadsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersBulkActionsControllerBulkUpdateUsersInternalSquadsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerCreateUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerCreateUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerCreateUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDeleteUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerDeleteUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDeleteUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerDisableUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerDisableUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerDisableUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerEnableUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerEnableUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerEnableUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllTagsInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllTagsInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllTagsInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetAllUsersInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetAllUsersInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetAllUsersInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserAccessibleNodesInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserAccessibleNodesInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserAccessibleNodesInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByShortUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByShortUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByShortUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByTelegramIdInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByTelegramIdInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByTelegramIdInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUsernameInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUsernameInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUsernameInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserByUuidInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserByUuidInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserByUuidInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUserSubscriptionRequestHistoryInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUserSubscriptionRequestHistoryInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUserSubscriptionRequestHistoryInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByEmailInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByEmailInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByEmailInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerGetUsersByTagInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerGetUsersByTagInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerGetUsersByTagInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerResetUserTrafficInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerResetUserTrafficInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerResetUserTrafficInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerRevokeUserSubscriptionInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerRevokeUserSubscriptionInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerRevokeUserSubscriptionInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersControllerUpdateUserInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersControllerUpdateUserInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersControllerUpdateUserInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
func TestUsersStatsControllerGetUserUsageByRangeInternalServerError_EncodeDecode(t *testing.T) {
	var typ UsersStatsControllerGetUserUsageByRangeInternalServerError
	typ.SetFake()

	e := jx.Encoder{}
	typ.Encode(&e)
	data := e.Bytes()
	require.True(t, std.Valid(data), "Encoded: %s", data)

	var typ2 UsersStatsControllerGetUserUsageByRangeInternalServerError
	require.NoError(t, typ2.Decode(jx.DecodeBytes(data)))
}
